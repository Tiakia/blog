<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiankai&#39;s Blog</title>
  
  <subtitle>或碌碌无为,或轰轰烈烈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tiankai.party/"/>
  <updated>2019-01-02T02:33:01.311Z</updated>
  <id>http://www.tiankai.party/</id>
  
  <author>
    <name>tiankai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>金额的表达正则</title>
    <link href="http://www.tiankai.party/posts/32506/"/>
    <id>http://www.tiankai.party/posts/32506/</id>
    <published>2018-12-25T06:12:00.000Z</published>
    <updated>2019-01-02T02:33:01.311Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个真的是有点意思，这里记录一下，大体的意思就是给你一串数字，然后你用三个一逗号的形式把数字表达出来，比如： <code>50153855514.7667</code> 表达出来就是 <code>50,153,855,514.7667</code></p><a id="more"></a><p>第一想法都是使用正则来匹配，我以为使用一个正则就能出来了，后来发现想的太简单了，头疼了好一会，又是正向肯定匹配又是反向否定匹配的弄了半天，后来想了个法子，从小数点分割开，然后再用俩次正则来达到效果。</p><figure class="highlight javascript"><figcaption><span>formateMoney.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formateMoney</span>(<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (money &amp;&amp; money &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> moneyFormate = (money + <span class="string">""</span>).split(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      moneyFormate[<span class="number">0</span>].replace(<span class="regexp">/(\d&#123;3&#125;)+$/gi</span>, (match, $<span class="number">1</span>, $<span class="number">2</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> result = match.replace(<span class="regexp">/(\d&#123;3&#125;)/gi</span>, (_match, _$<span class="number">1</span>) =&gt; <span class="string">","</span> + _$<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> $<span class="number">2</span> !== <span class="number">0</span></span><br><span class="line">          ? result</span><br><span class="line">          : result.replace(<span class="regexp">/,([,|\d]+)/gi</span>, (__match, $<span class="number">11</span>) =&gt; $<span class="number">11</span>);</span><br><span class="line">      &#125;) +</span><br><span class="line">      <span class="string">"."</span> +</span><br><span class="line">      moneyFormate[<span class="number">1</span>]</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> money;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> money1 = <span class="number">12942222.22</span>;</span><br><span class="line"><span class="built_in">console</span>.log(formateMoney(money1)); <span class="comment">//12,942,222.22</span></span><br><span class="line"><span class="keyword">let</span> money2 = <span class="number">914874.2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(formateMoney(money2)); <span class="comment">//914,874.20</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个真的是有点意思，这里记录一下，大体的意思就是给你一串数字，然后你用三个一逗号的形式把数字表达出来，比如： &lt;code&gt;50153855514.7667&lt;/code&gt; 表达出来就是 &lt;code&gt;50,153,855,514.7667&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="正则" scheme="http://www.tiankai.party/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>react路由控制权限</title>
    <link href="http://www.tiankai.party/posts/45622/"/>
    <id>http://www.tiankai.party/posts/45622/</id>
    <published>2018-12-25T06:09:00.000Z</published>
    <updated>2019-01-04T02:33:09.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>react 中可以通过路由来控制用户权限访问，主要使用的 <code>react-router</code> 的 <code>switch</code> 这里有个实用的例子</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RouterConfig</span>(<span class="params">&#123; history &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router history=&#123;history&#125; basename=&#123;config.basename&#125;&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &#123;<span class="comment">/* onEnter=&#123;authenticated(history)&#125; */</span>&#125;</span><br><span class="line">        &#123;<span class="comment">/*-----------------------------*/</span>&#125;</span><br><span class="line">        &#123;<span class="comment">/*renderRoutes(RouteConfig)*/</span>&#125;</span><br><span class="line">        &#123;<span class="comment">/*-----------------------------*/</span>&#125;</span><br><span class="line">        &lt;Route path=<span class="string">"/login"</span> exact component=&#123;Login&#125; /&gt;</span><br><span class="line">        &lt;Authorized</span><br><span class="line">          component=&#123;Routes&#125;</span><br><span class="line">          path=<span class="string">"/"</span></span><br><span class="line">          noMatch=<span class="string">"/login"</span></span><br><span class="line">          history=&#123;history&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样用户在刚进入的时候，如果访问的不是<code>/login</code>那么会进入<code>/</code>对应的 <code>Authorized</code>组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Authorized = <span class="function">(<span class="params">&#123; component: Component, history, noMatch, ...rest &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Route</span><br><span class="line">    &#123;...rest&#125;</span><br><span class="line">    render=&#123;props =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> token = authenticated(history); <span class="comment">//获取 token</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"-----------"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(token);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"-----authorized------"</span>);</span><br><span class="line">      <span class="keyword">return</span> token ? &lt;Component &#123;...props&#125; /&gt; : &lt;Redirect to=&#123;noMatch&#125; /&gt;;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在<code>Authorized</code>组件中，获取<code>token</code>,如果<code>token</code>存在那么就渲染对应的组件，如果<code>token</code>不存在就重定向到<code>/login</code>路径,<code>Authorized</code>组件渲染的 <code>Component</code>是所有的路由集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Routes = <span class="function">(<span class="params">&#123; history &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Layout</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span>&gt;</span>&#123;renderRoutes(RouteConfig)&#125;<span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里使用的<code>react-router-config</code>的库提供的<code>renderRoutes</code>函数，其中的<code>RouteConfig</code>是配置的所有的静态路由<br>大体的思路就是这样，在用户开始访问的时候就控制，如果<code>token</code>(这里也可以是其他的判断条件)存在，继续访问，如果不存在就让他访问另一个路由<br>前端权限控制比较简单，权限更多的还是前后端一起来控制，比较保险</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react 中可以通过路由来控制用户权限访问，主要使用的 &lt;code&gt;react-router&lt;/code&gt; 的 &lt;code&gt;switch&lt;/code&gt; 这里有个实用的例子&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
      <category term="react-router" scheme="http://www.tiankai.party/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>nvmw管理node版本排坑</title>
    <link href="http://www.tiankai.party/posts/23140/"/>
    <id>http://www.tiankai.party/posts/23140/</id>
    <published>2018-12-11T07:24:43.000Z</published>
    <updated>2019-01-02T02:33:01.227Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>nvmw 是 nvm 专为 Windows 开发的版本，用来管理 node 的版本，这里总结一下排坑记录</p><a id="more"></a><h4 id="第一步：安装"><a href="#第一步：安装" class="headerlink" title="第一步：安装"></a>第一步：安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hakobera/nvmw.git</span><br></pre></td></tr></table></figure><h4 id="第二步：配置环境变量"><a href="#第二步：配置环境变量" class="headerlink" title="第二步：配置环境变量"></a>第二步：配置环境变量</h4><p>重新打开命令行窗口，输入<code>nvmw</code>查看是否安装正确</p><h4 id="排坑"><a href="#排坑" class="headerlink" title="排坑"></a>排坑</h4><p>因为墙的原因，会导致我们安装 <code>node</code> 不成功，这里在 github 上作者也给出了解决方法，设置淘宝源，可能因为版本原因，网上搜到的答案都是比较过期的不能解决问题，这里我提供一种思路解决。</p><ul><li>首先是作者给出的解决办法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="string">"NVMW_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"NVMW_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"NVMW_NPM_MIRROR=http://npm.taobao.org/mirrors/npm"</span></span><br><span class="line"></span><br><span class="line">nvmw install 0.11.14</span><br><span class="line">nvmw install node-v0.11.15</span><br><span class="line">nvmw install iojs</span><br><span class="line">nvmw install iojs-v1.0.2</span><br></pre></td></tr></table></figure><p>但是每次安装都需要执行一下 set 命令，比较麻烦我们直接修改配置文件。</p><ul><li><p>打开 get_npm.js 文件，搜索作者让我们这命令行 set 的那几个变量，</p><ul><li><p>修改这俩个变量为以下这样</p><figure class="highlight javascript"><figcaption><span>get_npm.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> NVMW_NPM_MIRROR = <span class="string">"http://npm.taobao.org/mirrors/npm"</span>;</span><br><span class="line"><span class="keyword">var</span> NVMW_IOJS_ORG_MIRROR = <span class="string">"http://npm.taobao.org/mirrors/iojs"</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改判断<code>binType === &#39;iojs&#39;</code>这个表达式的 else 语句对应的位置：</p><figure class="highlight javascript"><figcaption><span>get_npm.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var pkgUri = util.format(NPM_PKG_JSON_URL, 'joyent/node',</span></span><br><span class="line"><span class="comment">//binVersion === 'latest' ? 'master' : binVersion);</span></span><br><span class="line"><span class="keyword">var</span> pkgUri = <span class="string">"https://npm.taobao.org/mirrors/node/index.json"</span>;</span><br><span class="line">wget(pkgUri, <span class="function"><span class="keyword">function</span>(<span class="params">filename, pkg</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//if (filename === null) &#123;</span></span><br><span class="line">  <span class="comment">//return noNpmAndExit();</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  <span class="comment">//downloadNpmZip(JSON.parse(pkg).version);</span></span><br><span class="line">  <span class="keyword">if</span> (filename === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> noNpmAndExit();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> _pkg = <span class="built_in">JSON</span>.parse(pkg);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = _pkg.length; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = _pkg[i];</span><br><span class="line">    <span class="keyword">if</span> (obj.version == binVersion) &#123;</span><br><span class="line">      downloadNpmZip(obj.npm);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>修改 nvmw.bat 文件</li></ul><ul><li><p>x64 改为 win-x64</p><figure class="highlight bat"><figcaption><span>nvmw.bat</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> NODE_EXE_URL=<span class="variable">%NVMW_NODEJS_ORG_MIRROR%</span>/<span class="variable">%NODE_VERSION%</span>/win-x64/node.exe</span><br></pre></td></tr></table></figure></li><li><p>设置 NVMW_NODEJS_ORG_MIRROR/NVMW_IOJS_ORG_MIRROR 变量</p><figure class="highlight bat"><figcaption><span>nvmw.bat</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原始为:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">defined</span> NVMW_NODEJS_ORG_MIRROR (</span><br><span class="line">  <span class="built_in">set</span> "NVMW_NODEJS_ORG_MIRROR=https://nodejs.org/dist"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">defined</span> NVMW_IOJS_ORG_MIRROR (</span><br><span class="line">  <span class="built_in">set</span> "NVMW_IOJS_ORG_MIRROR=https://iojs.org/dist"</span><br><span class="line">)</span><br><span class="line">修改为:</span><br><span class="line"><span class="built_in">set</span> "NVMW_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node"</span><br><span class="line"><span class="built_in">set</span> "NVMW_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs"</span><br></pre></td></tr></table></figure></li></ul><ul><li>修改 <code>fget.js</code> 文件 47 行，<code>XMLHTTP</code> 更改为 <code>ServerXMLHTTP</code></li></ul><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>在修改完这几处地方后应该可以正常下载<code>node.exe</code>和<code>npm.zip</code>文件并解压了，但是一到最后总会提示，找不到该文件或者文件不存在或者进程被占用之类的，然后本来下载好的文件会都给你删掉。。。我仔细研究了一下代码发现问题出在这里</p><figure class="highlight bat"><figcaption><span>nvmw.bat</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">Start</span> unzip "<span class="variable">%NPM_ZIP_FILE%</span>" to "<span class="variable">%NODE_HOME%</span>"</span><br><span class="line">cscript //nologo "<span class="variable">%NVMW_HOME%</span>\unzip.js" "<span class="variable">%NPM_ZIP_FILE%</span>" "<span class="variable">%NODE_HOME%</span>"</span><br><span class="line"><span class="built_in">mkdir</span> "<span class="variable">%NODE_HOME%</span>\node_modules"</span><br><span class="line"><span class="built_in">rmdir</span> /s /q "<span class="variable">%NODE_HOME%</span>\node_modules\npm"</span><br><span class="line"><span class="built_in">move</span> npm-* "<span class="variable">%NODE_HOME%</span>\node_modules\npm"</span><br><span class="line"><span class="built_in">copy</span> "<span class="variable">%NODE_HOME%</span>\node_modules\npm\bin\npm.<span class="built_in">cmd</span>" "<span class="variable">%NODE_HOME%</span>\npm.<span class="built_in">cmd</span>"</span><br><span class="line"><span class="built_in">cd</span> "<span class="variable">%CD_ORG%</span>"</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> "<span class="variable">%NODE_HOME%</span>\npm.<span class="built_in">cmd</span>" <span class="keyword">goto</span> install_error</span><br><span class="line"><span class="built_in">echo</span> npm install ok</span><br></pre></td></tr></table></figure><p>先解释一下这段代码的意思，以下载 8.14.0 版本为例(<code>%NODE_HOME%</code>变量表示存放 node 的文件夹比如 v8.14.0，在下载的时候会自动创建该文件夹)</p><ol><li>在命令行输出 开始解压下载好的 npm.zip 文件</li><li>调用<code>unzip.js</code>文件开始解压缩 npm.zip,后面俩个是参数列表</li><li>新建 v8.14.0/node_modules 文件夹</li><li>删除 v8.14.0/node_modules 文件夹下的 npm 文件</li><li>将解压缩成功的 npm-* 文件夹移动到 新建好的 node_modules 文件夹下<br>问题出在这里安装 5.x 版本没有问题因为 npm.zip 的压缩包里就是 npm-5.6.1 类似的<br>而 8.14.0 版本 npm.zip 压缩包里面就是 cli-6.4.1 了<br>找不到文件自然就报错了，然后就会把下载好的 node 和 npm 压缩包一起删掉</li><li>将 node_modules/npm/bin/npm.cmd 拷贝到 v8.14.0 文件夹下</li></ol><h5 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h5><ul><li>可以把第五步第六步的代码注释了自己操作</li><li>也可以修改第五步代码 自动操作<figure class="highlight bat"><figcaption><span>nvmw.bat</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">move</span> *-* "<span class="variable">%NODE_HOME%</span>\node_modules\npm"</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><p>安装 nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvmw insall 6.9.2</span><br></pre></td></tr></table></figure><p>展示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvmw ls</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvmw use 6.9.2</span><br></pre></td></tr></table></figure><p><a href="https://github.com/tiakia/nvmw-china" target="_blank" rel="noopener">我修改后的版本</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nvmw 是 nvm 专为 Windows 开发的版本，用来管理 node 的版本，这里总结一下排坑记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://www.tiankai.party/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>umi+dva的使用</title>
    <link href="http://www.tiankai.party/posts/59635/"/>
    <id>http://www.tiankai.party/posts/59635/</id>
    <published>2018-11-15T09:20:00.000Z</published>
    <updated>2019-01-04T06:41:34.696Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>umi</code>和<code>dva</code>都是阿里出的简化<code>react</code>开发的架构，以前都是直接开发的没使用这套，后来接触下来以后发现，开发感觉挺舒适的，刚开始使用的<code>dva</code>，有一个缺陷就是基于<code>roadhog</code>搭建的<code>webpack</code>架子，给我们自定义的接口实在有限,后来<code>umi</code>加入了<code>webpack-chain</code>可以自己添加、修改<code>webpack</code>的配置，值得一试。</p><a id="more"></a><p><code>umi+dva</code> 的架构中，<code>dva</code>被当成了数据流，集合了<code>redux</code>/<code>redux-saga</code>，处理异步操作,而且还有个方便的是集合了<code>dva-loading</code>这个插件，不用我们去手动的写<code>loading</code>状态的<code>show/hide</code>了</p><h3 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h3><p><code>dva</code> 首先是一个基于 <code>redux</code> 和 <code>redux-saga</code> 的数据流方案，然后为了简化开发体验，<code>dva</code> 还额外内置了 <code>react-router</code> 和 <code>fetch</code>，所以也可以理解为一个轻量级的应用框架。<br>我们只是用他集合<code>redux</code>和<code>redux-saga</code>的部分，其他的我们使用<code>umi</code>的就行，<code>dva</code> 将文件分为了<code>model</code>、<code>services</code>，<code>model</code>文件夹下建立的就是我们的 <code>redux</code> 文件，<code>services</code>下建立的是我们的<code>api</code>接口，我们看一下<code>dva</code>的<code>model</code>文件</p><figure class="highlight javascript"><figcaption><span>models/login.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; queryLogin &#125; <span class="keyword">from</span> <span class="string">"../services/login"</span>; <span class="comment">//导入loginService API 接口</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">"antd-mobile"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// namespace 用来标识reducer文件，connect的时候使用</span></span><br><span class="line">  <span class="comment">// 类似redux整合所有reducer文件中的key值</span></span><br><span class="line">  namespace: <span class="string">"login"</span>,</span><br><span class="line"></span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="comment">//相当于redux的InitialState</span></span><br><span class="line">    login: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    <span class="comment">//可以在这里进行监听</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//这里进行的就是异步操作了，集成了 redux-saga</span></span><br><span class="line">  effects: &#123;</span><br><span class="line">    *fetch(&#123; payload, callback &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">      <span class="comment">// eslint-disable-line</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">yield</span> call(queryLogin, payload);</span><br><span class="line">        <span class="keyword">if</span> (response.code === <span class="string">"0000"</span>) &#123;</span><br><span class="line">          <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">"save"</span>, <span class="attr">payload</span>: response.data &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errorObj = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">          errorObj.msg = response.data.msg;</span><br><span class="line">          <span class="keyword">throw</span> errorObj;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Error</span>(e));</span><br><span class="line">        Toast.fail(e.msg || <span class="string">"登录请求失败，请重试"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// redux的 reducer 函数</span></span><br><span class="line">  reducers: &#123;</span><br><span class="line">    save(state, action) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, ...action.payload &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在组件中使用<code>dva</code>的<code>model</code>,只显示主要代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  login = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, form &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    form.validateFields(<span class="keyword">async</span> (err, fieldsValues) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; phone, password &#125; = fieldsValues;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> handleError(err, fieldsValues);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> dispatch(&#123;</span><br><span class="line">          type: <span class="string">"login/fetch"</span>,</span><br><span class="line">          payload: &#123;</span><br><span class="line">            user_no: phone,</span><br><span class="line">            user_pass: password</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      loading: &#123; effects &#125;</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;WingBlank className=&#123;styles.logbox&#125;&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            type=<span class="string">"primary"</span></span><br><span class="line">            className=&#123;styles.login&#125;</span><br><span class="line">            onClick=&#123;() =&gt; &#123;</span><br><span class="line">              <span class="keyword">this</span>.login();</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            登录</span><br><span class="line">          &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>WingBlank&gt;</span><br><span class="line">        &lt;ActivityIndicator</span><br><span class="line">          toast</span><br><span class="line">          text=<span class="string">"登录中..."</span></span><br><span class="line">          animating=&#123;effects[<span class="string">"login/fetch"</span>] || <span class="literal">false</span>&#125;</span><br><span class="line">        /&gt;&#123;<span class="string">" "</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect((&#123; login, loading &#125;) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">  login,</span></span><br><span class="line"><span class="regexp">  loading</span></span><br><span class="line"><span class="regexp">&#125;))(createForm()(Login));</span></span><br></pre></td></tr></table></figure><ul><li>首先和<code>redux</code>一样我们需要<code>connect</code>组件注入你需要使用的<code>model</code>这里我们注入了<code>login</code>和<code>loading</code></li><li>在<code>connect</code>注入了<code>login</code>模块后，点击登录时，会调用 <code>login/fetch</code>的异步操作（调用 loginModels 下面的 fetch 方法），如此完成一次完整的流程操作</li><li>这个组件中我们可以看到<code>dva-loading</code>的使用，用户在点击登录后会调用<code>login</code>中的<code>fetch</code>异步操作，在<code>dva-loading</code>中就会自动监听这个 effects 直到他完成，我们就可以直接判断<code>effects[loing/fetch]</code>来监听这个异步操作是否完成，十分的方便</li></ul><h3 id="umi"><a href="#umi" class="headerlink" title="umi"></a>umi</h3><p>对与<code>umi</code>来说，最大的优势就是采用了 <code>next.js</code> 的约定式路由，文件目录即路由， 省却了我们自己去配置路由了，对与之前我们的路由这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RouteConfig = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    component: Index,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/home"</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/home/detail"</span>,</span><br><span class="line">    component: NoticeDetail,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/home/card"</span>,</span><br><span class="line">    component: CardListDetail,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/news"</span>,</span><br><span class="line">    component: NewScheduleList,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/type/:type"</span>, <span class="comment">//重点关注这，umi处理动态路由</span></span><br><span class="line">    component: TypeList,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>而现在我们只需要在<code>page</code>文件夹下创建相应的文件就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ pages/</span><br><span class="line">  + home/</span><br><span class="line">    - index.js <span class="comment"># Home.js</span></span><br><span class="line">    + detail/</span><br><span class="line">      - index.js <span class="comment"># NoticeDetail.js</span></span><br><span class="line">    + card/</span><br><span class="line">      - index.js <span class="comment"># CardListDetail.js</span></span><br><span class="line">  + news/</span><br><span class="line">     - index.js <span class="comment"># NewScheduleList.js</span></span><br><span class="line">  + <span class="built_in">type</span>/</span><br><span class="line">    - <span class="variable">$type</span>.js <span class="comment"># TypeList.js 文件名加$标识是个动态路由</span></span><br><span class="line">  - index.js <span class="comment"># Index.js</span></span><br></pre></td></tr></table></figure><p>其他具体的路由约定规则，可以参考<a href="https://umijs.org/zh/guide/router.html#%E7%BA%A6%E5%AE%9A%E5%BC%8F%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener">umi 官网</a></p><h3 id="umi-和-dva-架构对比"><a href="#umi-和-dva-架构对比" class="headerlink" title="umi 和 dva 架构对比"></a>umi 和 dva 架构对比</h3><p>dva 项目之前通常都是这种扁平的组织方式，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ models</span><br><span class="line">  - global.js</span><br><span class="line">  - a1.js</span><br><span class="line">  - a2.js</span><br><span class="line">  - b.js</span><br><span class="line">+ services</span><br><span class="line">  - a.js</span><br><span class="line">  - b.js</span><br><span class="line">+ routes</span><br><span class="line">  - PageA.js</span><br><span class="line">  - PageB.js</span><br></pre></td></tr></table></figure><p>用了 umi 后，可以按页面维度进行组织，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+ models/global.js</span><br><span class="line">+ pages</span><br><span class="line">  + a</span><br><span class="line">    - index.js</span><br><span class="line">    + models</span><br><span class="line">      - a1.js</span><br><span class="line">      - a2.js</span><br><span class="line">    + services</span><br><span class="line">      - a.js</span><br><span class="line">  + b</span><br><span class="line">    - index.js</span><br><span class="line">    - model.js</span><br><span class="line">    - service.js</span><br></pre></td></tr></table></figure><p>好处是更加结构更加清晰了，减少耦合，一删全删，方便 copy 和共享。</p><blockquote><p>参考链接</p></blockquote><p><a href="https://dvajs.com/guide/" target="_blank" rel="noopener">dva 官网</a><br><a href="https://umijs.org/zh/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">umi 配置</a><br><a href="https://github.com/sorrycc/blog/issues/66" target="_blank" rel="noopener">umi 和 dva 更配</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;umi&lt;/code&gt;和&lt;code&gt;dva&lt;/code&gt;都是阿里出的简化&lt;code&gt;react&lt;/code&gt;开发的架构，以前都是直接开发的没使用这套，后来接触下来以后发现，开发感觉挺舒适的，刚开始使用的&lt;code&gt;dva&lt;/code&gt;，有一个缺陷就是基于&lt;code&gt;roadhog&lt;/code&gt;搭建的&lt;code&gt;webpack&lt;/code&gt;架子，给我们自定义的接口实在有限,后来&lt;code&gt;umi&lt;/code&gt;加入了&lt;code&gt;webpack-chain&lt;/code&gt;可以自己添加、修改&lt;code&gt;webpack&lt;/code&gt;的配置，值得一试。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="umi" scheme="http://www.tiankai.party/tags/umi/"/>
    
      <category term="dva" scheme="http://www.tiankai.party/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>js中的事件执行机制</title>
    <link href="http://www.tiankai.party/posts/37168/"/>
    <id>http://www.tiankai.party/posts/37168/</id>
    <published>2018-11-15T08:58:00.000Z</published>
    <updated>2019-01-04T09:30:09.392Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以前理解的事件只有同步任务和异步任务，后来知道我看到了一篇文章。。。<br>我们常见到的是这样的给你一段代码，说出执行顺序，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"异步任务setTimeout"</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"同步任务"</span>);</span><br></pre></td></tr></table></figure><p>按照同步优先，异步靠后的规则，先执行完所有的同步任务后，再开始执行异步任务，很快的得出结论</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同步任务</span><br><span class="line">异步任务setTimeout</span><br></pre></td></tr></table></figure><p>然后有一天你看到了这样的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setTimeout"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"同步任务"</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise"</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"promise-then"</span>));</span><br></pre></td></tr></table></figure><p><strong>黑人问号脸.jpg</strong><br>这就有点触及到我的知识盲区了。。。</p><p>先上答案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">同步任务;</span><br><span class="line">promise;</span><br><span class="line">promise - then;</span><br><span class="line">setTimeout;</span><br></pre></td></tr></table></figure><h3 id="微任务-amp-amp-宏任务"><a href="#微任务-amp-amp-宏任务" class="headerlink" title="微任务 &amp;&amp; 宏任务"></a>微任务 &amp;&amp; 宏任务</h3><p>这里其实有个概念我们没认识就是微任务和宏任务，javascript 是一门单线程的语言，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p><ul><li>macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval</li><li>micro-task(微任务)：Promise，process.nextTick(nodejs)</li></ul><p>js 的事件循环是这样的，进入后，进行宏任务事件循环，遇到宏任务异步代码，压入宏任务异步任务栈等待执行，遇到微任务异步压入微任务的异步任务栈等待执行，在完成第一次宏任务循环后，先查看微任务异步栈中有没有任务，如果有先执行所有的异步微任务，然后再开始第二次的宏任务循环，开始执行宏任务的异步任务。<br>我们跟着文章开始的代码来走一遍：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setTimeout"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"同步任务"</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise"</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"promise-then"</span>));</span><br></pre></td></tr></table></figure><ul><li>第一次宏任务循环，遇到<code>setTimeout</code>，压入宏任务的异步栈，等待执行</li><li>继续遇到 <code>console.log</code> 执行 输出 <code>同步任务</code></li><li>遇到<code>Promise</code>，并且<code>resolve</code>直接输出<code>promise</code></li><li><code>Promise</code>的<code>then</code>压入微任务的异步栈等待执行</li><li>第一次宏任务循环结束，查看是否有微任务，执行<code>then</code>操作，输出<code>promise-then</code></li><li>开始第二次宏任务循环，在异步栈中发现了<code>setTimeout</code>，输出<code>setTimeout</code></li></ul><p>总结来说就是，先进行同步宏任务，宏任务完成后先查看一下是否有<code>prmise</code>之类的微任务，执行完微任务后再执行宏任务的异步任务。<br>我们一起来走一下这个例子看看是否已经搞懂了事件执行机制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"2"</span>);</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"3"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"4"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"5"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"6"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"7"</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"8"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"9"</span>);</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"10"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"11"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"12"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>事件开始执行，遇到 <code>console.log</code> 直接输出<code>1</code></li><li>遇到 <code>setTimeout</code> 压入宏任务异步栈等待执行</li><li>遇到<code>process.nextTick</code>压入微任务异步栈等待执行</li><li>遇到<code>Promise</code>,直接输出<code>7</code>，并且已经<code>resolve</code>，那么对应的<code>then</code>压入微任务异步栈等待执行</li><li>遇到<code>setTimeout</code>压入宏任务异步栈，这里标记为<code>setTimeout2</code></li><li>第一次宏任务事件结束，我们来查看一下事件栈，是否有微任务，如果有先执行</li></ul><table><thead><tr><th>宏任务异步栈</th><th>微任务异步栈</th></tr></thead><tbody><tr><td>setTimeout</td><td>process.nextTick</td></tr><tr><td>setTimeout2</td><td>promise.then</td></tr></tbody></table><ul><li><p>执行微任务异步栈，执行<code>process.nextTick</code>输出<code>6</code>,然后再执行 <code>promise.then</code>，输入<code>8</code></p></li><li><p>这样在第一次事件循环结束后，输出了<code>1</code>/<code>7</code>/<code>6</code>/<code>8</code></p></li><li><p>开始第二次的事件循环</p></li><li><p>执行<code>setTimeout</code>遇到<code>console</code>直接执行，输出<code>2</code>,遇到<code>process.nextTick</code>压入微任务异步栈</p></li><li><p>遇到<code>promise</code>,执行<code>console</code>输出<code>4</code>,并且已经<code>resolve</code>执行，将<code>then</code>压入微任务异步栈</p></li><li><p>这一次的宏任务事件执行结束查看一下是否微任务异步栈，是否有微任务等待执行</p></li></ul><table><thead><tr><th>宏任务异步栈</th><th>微任务异步栈</th></tr></thead><tbody><tr><td>setTimeout2</td><td>process.nextTick</td></tr><tr><td>空</td><td>promise.then</td></tr></tbody></table><ul><li><p>执行微任务异步栈，<code>process.nextTick</code>输出<code>3</code>,执行<code>promise.then</code>输出<code>5</code></p></li><li><p>第二次事件循环结束后，输出了<code>2</code>/<code>4</code>/<code>3</code>/<code>5</code></p></li><li><p>开始第三次宏任务事件</p></li><li><p><code>setTimeout2</code>中遇到<code>console</code>直接输出<code>9</code>,<code>process.nextTick</code>压入微任务异步栈等待执行</p></li><li><p>遇到<code>Promise</code>直接执行，输出<code>11</code>,已经<code>resolve</code>了把<code>then</code>代码压入微任务异步栈等待执行</p></li><li><p>这一次的宏任务事件执行结束查看一下是否微任务异步栈，是否有微任务等待执行</p></li></ul><table><thead><tr><th>宏任务异步栈</th><th>微任务异步栈</th></tr></thead><tbody><tr><td>空</td><td>process.nextTick</td></tr><tr><td>空</td><td>promise.then</td></tr></tbody></table><ul><li><p>执行<code>process.nextTick</code>输出<code>10</code>,执行<code>promise.then</code>输出<code>12</code></p></li><li><p>这一次事件循环结束后，输出<code>9</code>/<code>11</code>/<code>10</code>/<code>12</code></p></li><li>这样三次事件循环下来，依次输出了<code>1</code>/<code>7</code>/<code>6</code>/<code>8</code>/<code>2</code>/<code>4</code>/<code>3</code>/<code>5</code>/<code>9</code>/<code>11</code>/<code>10</code>/<code>12</code></li></ul><p>值得深思：</p><ol><li><code>setInterval(fn,ms)</code>来说，我们已经知道不是每过<code>ms</code>秒会执行一次<code>fn</code>，而是每过<code>m</code>s 秒，会有<code>fn</code>进入<code>Event Queue</code>。一旦<code>setInterval</code>的回调函数<code>fn</code>执行时间超过了延迟时间<code>ms</code>，那么就完全看不出来有时间间隔了</li><li><code>setTimeout(fn,0)</code>的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行</li></ol><blockquote><p>参考链接</p></blockquote><p><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次彻底弄懂 JavaScript 执行机制</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前理解的事件只有同步任务和异步任务，后来知道我看到了一篇文章。。。&lt;br&gt;我们常见到的是这样的给你一段代码，说出执行顺序，&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;异步任务setTimeout&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;同步任务&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照同步优先，异步靠后的规则，先执行完所有的同步任务后，再开始执行异步任务，很快的得出结论&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.tiankai.party/tags/js/"/>
    
      <category term="promise" scheme="http://www.tiankai.party/tags/promise/"/>
    
      <category term="setTimeout" scheme="http://www.tiankai.party/tags/setTimeout/"/>
    
  </entry>
  
  <entry>
    <title>使用eslint来规范你的代码</title>
    <link href="http://www.tiankai.party/posts/42946/"/>
    <id>http://www.tiankai.party/posts/42946/</id>
    <published>2018-10-30T14:30:00.000Z</published>
    <updated>2019-01-07T03:47:04.688Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用自定义的<code>eslint</code>规则结合编辑器来规范你平时的代码编写风格，我这里配置了 <code>vscode</code> 和 <code>webstorm</code> 俩个编辑器的 在校验规则的同时，可以自动把你的代码格式化。如果你的电脑配置可以的话建议你使用<code>webstorm</code>，虽然<code>vscode</code>可以任意安装插件，但是论功能的完善还是<code>webstorm</code>更甚一筹</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g eslint</span><br><span class="line">npm install -g prettier</span><br><span class="line">npm install -g eslint-plugin-prettier</span><br></pre></td></tr></table></figure><p>react 相关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-eslint</span><br><span class="line">npm install -g eslint-plugin-react</span><br><span class="line">npm install -g eslint-plugin-jsx-a11y</span><br><span class="line">npm install -g eslint-plugin-import</span><br></pre></td></tr></table></figure><h3 id="编辑自己的eslint规则"><a href="#编辑自己的eslint规则" class="headerlink" title="编辑自己的eslint规则"></a>编辑自己的<code>eslint</code>规则</h3><figure class="highlight javascript"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    <span class="comment">// 检查 ES6 语法</span></span><br><span class="line">    ecmaVersion: <span class="number">6</span>,</span><br><span class="line">    sourceType: <span class="string">"module"</span>,</span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      experimentalObjectRestSpread: <span class="literal">true</span>,</span><br><span class="line">      jsx: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  parser: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// extending airbnb config and config derived from eslint-config-prettier</span></span><br><span class="line">  <span class="comment">// 这里是 vue</span></span><br><span class="line">  <span class="comment">//extends: ["plugin:vue/essential", "airbnb-base", "prettier"],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 选择 eslint 插件</span></span><br><span class="line">  <span class="comment">//plugins: ["prettier", "vue"],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// react</span></span><br><span class="line">  extends: [<span class="string">"prettier"</span>, <span class="string">"eslint:recommended"</span>, <span class="string">"plugin:react/recommended"</span>],</span><br><span class="line">  plugins: [<span class="string">"prettier"</span>, <span class="string">"react"</span>, <span class="string">"jsx-a11y"</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不需要框架</span></span><br><span class="line">  <span class="comment">// extends: ['airbnb-base', 'prettier'],</span></span><br><span class="line">  <span class="comment">// plugins: ['prettier'],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义 eslint 检查规则</span></span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">//箭头函数前后俩个空格</span></span><br><span class="line">    <span class="string">"arrow-spacing"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        before: <span class="literal">true</span>,</span><br><span class="line">        after: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//大括号前后有空格</span></span><br><span class="line">    <span class="string">"block-spacing"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</span><br><span class="line">    <span class="comment">//规定 else 关键字 要与花括号保持在同一行</span></span><br><span class="line">    <span class="string">"brace-style"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">"1tbs"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        allowSingleLine: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// react 如果在项目中文件名后缀是 .js 而不是 .jsx 避免报错</span></span><br><span class="line">    <span class="string">"react/jsx-filename-extension"</span>: [</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        extensions: [<span class="string">".js"</span>, <span class="string">".jsx"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//react props validation 错误</span></span><br><span class="line">    <span class="string">"react/prop-types"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"no-eval"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"no-console"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"comma-dangle"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//规定逗号后面必须加空格</span></span><br><span class="line">    <span class="string">"comma-spacing"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        before: <span class="literal">false</span>,</span><br><span class="line">        after: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定子类构造函数中必须调用super，非子类不要调用super。</span></span><br><span class="line">    <span class="string">"constructor-super"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免不必要的 .call() 和 .apply()</span></span><br><span class="line">    <span class="string">"no-useless-call"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="comment">//规定不要定义未使用的变量</span></span><br><span class="line">    <span class="string">"no-unused-vars"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        vars: <span class="string">"all"</span>,</span><br><span class="line">        args: <span class="string">"none"</span>,</span><br><span class="line">        ignoreRestSiblings: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//"no-useless-constructor": "error"</span></span><br><span class="line">    <span class="string">"no-useless-constructor"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="comment">//规定点号操作符须与属性需在同一行</span></span><br><span class="line">    <span class="string">"dot-location"</span>: [<span class="number">2</span>, <span class="string">"property"</span>],</span><br><span class="line">    <span class="comment">//使用一致的缩进</span></span><br><span class="line">    <span class="comment">/* 'indent': [2, 2, &#123;</span></span><br><span class="line"><span class="comment">     *     'SwitchCase': 1</span></span><br><span class="line"><span class="comment">     * &#125;], */</span></span><br><span class="line">    <span class="comment">//规定键值对中冒号与值之间要留空白</span></span><br><span class="line">    <span class="string">"key-spacing"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        beforeColon: <span class="literal">false</span>,</span><br><span class="line">        afterColon: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//关键字前后实用一致的间距</span></span><br><span class="line">    <span class="string">"keyword-spacing"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        before: <span class="literal">true</span>,</span><br><span class="line">        after: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"new-cap"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        newIsCap: <span class="literal">true</span>,</span><br><span class="line">        capIsNew: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定多行 if 语句的 括号不能省略</span></span><br><span class="line">    curly: [<span class="number">2</span>, <span class="string">"multi-line"</span>],</span><br><span class="line">    <span class="comment">//规定文件末尾空一行，以防文件解析错误</span></span><br><span class="line">    <span class="string">"eol-last"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="comment">//规定函数调用时标识符与括号间不留间隔。第二个参数取值“never”和“always”，"never"表不留空格，"always"表要留空格</span></span><br><span class="line">    <span class="string">"func-call-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">    <span class="comment">//规定不能混合使用空格与制表符做为缩进</span></span><br><span class="line">    <span class="string">"no-mixed-spaces-and-tabs"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定除了缩进，不要使用多个空格</span></span><br><span class="line">    <span class="string">"no-multi-spaces"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不允许有连续多行空行且文件头部不允许空行</span></span><br><span class="line">    <span class="string">"no-multiple-empty-lines"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        max: <span class="number">1</span>,</span><br><span class="line">        maxEOF: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定行末不留空格。</span></span><br><span class="line">    <span class="string">"no-trailing-spaces"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定属性前面不能加空格</span></span><br><span class="line">    <span class="string">"no-whitespace-before-property"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定对象属性换行时注意统一代码风格(要么都换行，要么都不换)。</span></span><br><span class="line">    <span class="string">"object-property-newline"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        allowMultiplePropertiesPerLine: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定对于三元运算符 ? 和 : 与他们所负责的代码处于同一行</span></span><br><span class="line">    <span class="comment">/* "operator-linebreak": [2, "after", &#123;</span></span><br><span class="line"><span class="comment">     *     "overrides": &#123;</span></span><br><span class="line"><span class="comment">     *         "?": "before",</span></span><br><span class="line"><span class="comment">     *         ":": "before"</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     * &#125;], */</span></span><br><span class="line">    <span class="comment">//规则定义代码中不要出现多余留白,“blocks”表代码块，“classes”表类，“switches”表switch语句，取值都为“never”或“always”，表示是否需要留空行.</span></span><br><span class="line">    <span class="string">"padded-blocks"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        blocks: <span class="string">"never"</span>,</span><br><span class="line">        switches: <span class="string">"never"</span>,</span><br><span class="line">        classes: <span class="string">"never"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定展开运算符与它的表达式间不要留空白。第二个参数取值“never”和“always”，表是否需要留白。</span></span><br><span class="line">    <span class="string">"rest-spread-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">    <span class="comment">//规定分号前不留空格，后面留一个空格。</span></span><br><span class="line">    <span class="string">"semi-spacing"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        before: <span class="literal">false</span>,</span><br><span class="line">        after: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定必须添加分号</span></span><br><span class="line">    semi: [<span class="string">"error"</span>, <span class="string">"always"</span>],</span><br><span class="line">    <span class="comment">//规定代码块收尾需留空格。</span></span><br><span class="line">    <span class="string">"space-before-blocks"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</span><br><span class="line">    <span class="comment">//规定圆括号之间不留空格</span></span><br><span class="line">    <span class="string">"space-in-parens"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">    <span class="comment">//规定字符串拼接操作符 (Infix operators) 之间要留空格</span></span><br><span class="line">    <span class="string">"space-infix-ops"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定get和set成对出现</span></span><br><span class="line">    <span class="string">"accessor-pairs"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不允许多余的行末逗号。</span></span><br><span class="line">    <span class="string">"comma-dangle"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        arrays: <span class="string">"never"</span>,</span><br><span class="line">        objects: <span class="string">"never"</span>,</span><br><span class="line">        imports: <span class="string">"never"</span>,</span><br><span class="line">        exports: <span class="string">"never"</span>,</span><br><span class="line">        functions: <span class="string">"never"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定始终将逗号置于行末。</span></span><br><span class="line">    <span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],</span><br><span class="line">    <span class="comment">//规定始终使用 === 替代 ==，null除外。第二个参数配置是否使用 === ，第三个参数配置是否忽略空值判断。(这里暂时是 warning 状态)</span></span><br><span class="line">    eqeqeq: [</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="string">"always"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="literal">null</span>: <span class="string">"ignore"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定函数里面的异常信息不要忘记处理。第二个参数配置匹配那些参数的正则表达式.</span></span><br><span class="line">    <span class="string">"handle-callback-err"</span>: [<span class="string">"error"</span>, <span class="string">"^(err|error)$"</span>],</span><br><span class="line">    <span class="comment">//规定避免修改使用 const 声明的变量。</span></span><br><span class="line">    <span class="string">"no-const-assign"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免对类名重新赋值。</span></span><br><span class="line">    <span class="string">"no-class-assign"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定使用数组字面量而不是构造器</span></span><br><span class="line">    <span class="string">"no-array-constructor"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定无参的构造函数调用时要带上括号</span></span><br><span class="line">    <span class="string">"new-parens"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要对变量使用 delete 操作。(waring)</span></span><br><span class="line">    <span class="string">"no-delete-var"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//规定不要定义重复的函数参数</span></span><br><span class="line">    <span class="string">"no-dupe-args"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定类中不要定义重复的属性</span></span><br><span class="line">    <span class="string">"no-dupe-class-members"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定对象字面量中不要定义重复的属性</span></span><br><span class="line">    <span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定switch 语句中不要定义重复的 case 分支</span></span><br><span class="line">    <span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定正则中不要使用空字符。</span></span><br><span class="line">    <span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要解构空值</span></span><br><span class="line">    <span class="string">"no-empty-pattern"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//定义catch 中不要对错误重新赋值</span></span><br><span class="line">    <span class="string">"no-ex-assign"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定switch一定要使用 break 来将条件分支正常中断</span></span><br><span class="line">    <span class="string">"no-fallthrough"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免对声明过的函数重新赋值</span></span><br><span class="line">    <span class="string">"no-func-assign"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要对全局只读对象重新赋值</span></span><br><span class="line">    <span class="string">"no-global-assign"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要向 RegExp 构造器传入非法的正则表达式。</span></span><br><span class="line">    <span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定禁止使用 iterator。</span></span><br><span class="line">    <span class="string">"no-iterator"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免将变量赋值给自己</span></span><br><span class="line">    <span class="string">"no-self-assign"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免将变量与自己进行比较</span></span><br><span class="line">    <span class="string">"no-self-compare"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定禁止随意更改关键字的值</span></span><br><span class="line">    <span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定禁止使用稀疏数组</span></span><br><span class="line">    <span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定正确使用 ES6 中的字符串模板</span></span><br><span class="line">    <span class="string">"no-template-curly-in-string"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定用throw 抛错时，抛出 Error 对象而不是字符串。</span></span><br><span class="line">    <span class="string">"no-throw-literal"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要使用 (, [, or ` 等作为一行的开始。在没有分号的情况下代码压缩后会导致报错，而坚持这一规范则可避免出错。</span></span><br><span class="line">    <span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定循环语句中注意更新循环变量</span></span><br><span class="line">    <span class="string">"no-unmodified-loop-condition"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定return，throw，continue 和 break 后不要再跟代码。</span></span><br><span class="line">    <span class="string">"no-unreachable"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定finally 代码块中不要再改变程序执行流程</span></span><br><span class="line">    <span class="string">"no-unsafe-finally"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定未定义前不能使用</span></span><br><span class="line">    <span class="string">"no-use-before-define"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        functions: <span class="literal">false</span>,</span><br><span class="line">        classes: <span class="literal">false</span>,</span><br><span class="line">        variables: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定禁止无用的表达式。</span></span><br><span class="line">    <span class="string">"no-unused-expressions"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        allowShortCircuit: <span class="literal">true</span>,</span><br><span class="line">        allowTernary: <span class="literal">true</span>,</span><br><span class="line">        allowTaggedTemplates: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定禁止在正则表达式中使用控制字符</span></span><br><span class="line">    <span class="string">"no-control-regex"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免使用 arguments.callee 和 arguments.caller</span></span><br><span class="line">    <span class="string">"no-caller"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定条件语句中赋值语句使用括号包起来。</span></span><br><span class="line">    <span class="string">"no-cond-assign"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要使用 debugger。</span></span><br><span class="line">    <span class="string">"no-debugger"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要扩展原生对象。</span></span><br><span class="line">    <span class="string">"no-extend-native"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免不必要的布尔转换。</span></span><br><span class="line">    <span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免多余的函数上下文绑定</span></span><br><span class="line">    <span class="string">"no-extra-bind"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要使用多余的括号包裹函数</span></span><br><span class="line">    <span class="string">"no-extra-parens"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],</span><br><span class="line">    <span class="comment">//规定不要省去小数点前面的0（增强可读性）</span></span><br><span class="line">    <span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定避免使用隐式的 eval()。</span></span><br><span class="line">    <span class="string">"no-implied-eval"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定嵌套的代码块中禁止再定义函数</span></span><br><span class="line">    <span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],</span><br><span class="line">    <span class="comment">//规定不要使用非法的空白符</span></span><br><span class="line">    <span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要使用标签语句</span></span><br><span class="line">    <span class="string">"no-labels"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        allowLoop: <span class="literal">false</span>,</span><br><span class="line">        allowSwitch: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定不要书写不必要的嵌套代码块</span></span><br><span class="line">    <span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要使用多行字符串</span></span><br><span class="line">    <span class="string">"no-multi-str"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定new 创建对象实例后需要赋值给变量</span></span><br><span class="line">    <span class="string">"no-new"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定禁止使用 Function 构造器</span></span><br><span class="line">    <span class="string">"no-new-func"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定禁止使用 Object 构造器</span></span><br><span class="line">    <span class="string">"no-new-object"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定禁止使用 new require</span></span><br><span class="line">    <span class="string">"no-new-require"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定禁止使用 Symbol 构造器</span></span><br><span class="line">    <span class="string">"no-new-symbol"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定禁止使用原始包装器</span></span><br><span class="line">    <span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要将全局对象的属性作为函数调用</span></span><br><span class="line">    <span class="string">"no-obj-calls"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要使用八进制字面量</span></span><br><span class="line">    <span class="string">"no-octal"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定不要重复声明变量</span></span><br><span class="line">    <span class="string">"no-redeclare"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//规定return 语句中的赋值必需有括号包裹</span></span><br><span class="line">    <span class="string">"no-return-assign"</span>: [<span class="number">2</span>, <span class="string">"except-parens"</span>],</span><br><span class="line">    <span class="comment">//规定如果有更好的实现，尽量不要使用三元表达式</span></span><br><span class="line">    <span class="string">"no-unneeded-ternary"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        defaultAssignment: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//规定不要使用 undefined 来初始化变量。</span></span><br><span class="line">    <span class="string">"no-undef-init"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"jsx-quotes"</span>: [<span class="number">1</span>, <span class="string">"prefer-double"</span>], <span class="comment">//强制在JSX属性（jsx-quotes）中一致使用双引号</span></span><br><span class="line">    <span class="string">"react/display-name"</span>: <span class="number">0</span>, <span class="comment">//防止在React组件定义中丢失displayName</span></span><br><span class="line">    <span class="string">"react/forbid-prop-types"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        forbid: [<span class="string">"any"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ], <span class="comment">//禁止某些propTypes</span></span><br><span class="line">    <span class="string">"react/jsx-boolean-value"</span>: <span class="number">2</span>, <span class="comment">//在JSX中强制布尔属性符号</span></span><br><span class="line">    <span class="string">"react/jsx-closing-bracket-location"</span>: <span class="number">1</span>, <span class="comment">//在JSX中验证右括号位置</span></span><br><span class="line">    <span class="string">"react/jsx-curly-spacing"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        when: <span class="string">"never"</span>,</span><br><span class="line">        children: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ], <span class="comment">//在JSX属性和表达式中加强或禁止大括号内的空格。</span></span><br><span class="line">    <span class="string">"react/jsx-indent-props"</span>: [<span class="number">2</span>, <span class="number">2</span>], <span class="comment">//验证JSX中的props缩进</span></span><br><span class="line">    <span class="string">"react/jsx-key"</span>: <span class="number">2</span>, <span class="comment">//在数组或迭代器中验证JSX具有key属性</span></span><br><span class="line">    <span class="string">"react/jsx-max-props-per-line"</span>: [</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        maximum: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    ], <span class="comment">// 限制JSX中单行上的props的最大数量</span></span><br><span class="line">    <span class="string">"react/jsx-no-bind"</span>: <span class="number">0</span>, <span class="comment">//JSX中不允许使用箭头函数和bind</span></span><br><span class="line">    <span class="string">"react/jsx-no-duplicate-props"</span>: <span class="number">2</span>, <span class="comment">//防止在JSX中重复的props</span></span><br><span class="line">    <span class="string">"react/jsx-no-literals"</span>: <span class="number">0</span>, <span class="comment">//防止使用未包装的JSX字符串</span></span><br><span class="line">    <span class="string">"react/jsx-no-undef"</span>: <span class="number">1</span>, <span class="comment">//在JSX中禁止未声明的变量</span></span><br><span class="line">    <span class="string">"react/jsx-pascal-case"</span>: <span class="number">0</span>, <span class="comment">//为用户定义的JSX组件强制使用PascalCase</span></span><br><span class="line">    <span class="string">"react/jsx-sort-props"</span>: <span class="number">0</span>, <span class="comment">//强化props按字母排序</span></span><br><span class="line">    <span class="string">"react/jsx-uses-react"</span>: <span class="number">1</span>, <span class="comment">//防止反应被错误地标记为未使用</span></span><br><span class="line">    <span class="string">"react/jsx-uses-vars"</span>: <span class="number">2</span>, <span class="comment">//防止在JSX中使用的变量被错误地标记为未使用</span></span><br><span class="line">    <span class="string">"react/no-danger"</span>: <span class="number">0</span>, <span class="comment">//防止使用危险的JSX属性</span></span><br><span class="line">    <span class="string">"react/no-did-mount-set-state"</span>: <span class="number">0</span>, <span class="comment">//防止在componentDidMount中使用setState</span></span><br><span class="line">    <span class="string">"react/no-did-update-set-state"</span>: <span class="number">1</span>, <span class="comment">//防止在componentDidUpdate中使用setState</span></span><br><span class="line">    <span class="string">"react/no-direct-mutation-state"</span>: <span class="number">2</span>, <span class="comment">//防止this.state的直接变异</span></span><br><span class="line">    <span class="string">"react/no-multi-comp"</span>: <span class="number">1</span>, <span class="comment">//防止每个文件有多个组件定义</span></span><br><span class="line">    <span class="string">"react/no-set-state"</span>: <span class="number">0</span>, <span class="comment">//防止使用setState</span></span><br><span class="line">    <span class="string">"react/no-unknown-property"</span>: <span class="number">2</span>, <span class="comment">//防止使用未知的DOM属性</span></span><br><span class="line">    <span class="string">"react/prefer-es6-class"</span>: <span class="number">2</span>, <span class="comment">//为React组件强制执行ES5或ES6类</span></span><br><span class="line">    <span class="string">"react/prop-types"</span>: <span class="number">0</span>, <span class="comment">//防止在React组件定义中丢失props验证</span></span><br><span class="line">    <span class="string">"react/react-in-jsx-scope"</span>: <span class="number">2</span>, <span class="comment">//使用JSX时防止丢失React</span></span><br><span class="line">    <span class="string">"react/self-closing-comp"</span>: <span class="number">0</span>, <span class="comment">//防止没有children的组件的额外结束标签</span></span><br><span class="line">    <span class="string">"react/sort-comp"</span>: <span class="number">2</span>, <span class="comment">//强制组件方法顺序</span></span><br><span class="line">    <span class="string">"no-extra-boolean-cast"</span>: <span class="number">0</span>, <span class="comment">//禁止不必要的bool转换</span></span><br><span class="line">    <span class="string">"react/no-array-index-key"</span>: <span class="number">0</span>, <span class="comment">//防止在数组中遍历中使用数组key做索引</span></span><br><span class="line">    <span class="string">"react/no-deprecated"</span>: <span class="number">1</span>, <span class="comment">//不使用弃用的方法</span></span><br><span class="line">    <span class="string">"react/jsx-equals-spacing"</span>: <span class="number">2</span>, <span class="comment">//在JSX属性中强制或禁止等号周围的空格</span></span><br><span class="line">    <span class="string">"import/imports-first"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"import/newline-after-import"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"import/no-dynamic-require"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"import/no-extraneous-dependencies"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"import/no-named-as-default"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"import/no-unresolved"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"import/prefer-default-export"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"import/extensions"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"jsx-a11y/aria-props"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"jsx-a11y/heading-has-content"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"jsx-a11y/href-no-hash"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"jsx-a11y/label-has-for"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"jsx-a11y/mouse-events-have-key-events"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"jsx-a11y/role-has-required-aria-props"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"jsx-a11y/role-supports-aria-props"</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><ul><li>安装 <code>eslint</code>/<code>prettier</code> 插件</li><li>打开 <code>文件 --- 首选项 --- 设置 --- 在 settings.json 中 编辑</code></li></ul><figure class="highlight javascript"><figcaption><span>settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"prettier.eslintIntegration"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"eslint.options"</span>: &#123;<span class="comment">//路径指向自定义的 eslint 规则</span></span><br><span class="line"><span class="string">"eslintConfig"</span>: <span class="string">"c:/Users/TK/.eslintrc.js"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"javascript.format.enable"</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>tips： 在编辑 react 文件的时候 vscode 需要把右下角的解析器 <code>Javascript(Babel)</code> 改为 <code>JavaScript React</code>,这样在保存的时候格式才不会乱</p></blockquote><h3 id="webstorm"><a href="#webstorm" class="headerlink" title="webstorm"></a>webstorm</h3><p>相较于<code>vscode</code>来说<code>webstorm</code>的配置就有点复杂了。</p><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>编辑器安装<code>eslint</code> 和 <code>pretteir</code> 插件</p><ul><li>WebStorm 2018.1 和以上的版本</li><li>Webstorm 2017.3 和更早的版本</li></ul><blockquote><p>Prettier</p></blockquote><ol><li>WebStorm 2018.1 和以上的版本</li></ol><ul><li>官方已经默认支持了 <code>prettier</code>,可以在<code>File --- settings --- Languages &amp; Frameworks --- JavaScript --- Prettier</code> 中找到，找到后需要配置一下。</li><li><code>Node interpreter</code> — 找到你安装的 <code>node.exe</code> 的目录。<ul><li>eg: <code>C:\Pragram Files\nodejs\node.exe</code></li></ul></li><li><p><code>Prettier package</code> — 找到你全局安装的 prettier 目录</p><ul><li>eg: <code>~\AppData\Roaming\npm\node_modules\prettier</code></li></ul></li></ul><ol start="2"><li>Webstorm 2017.3 和更早的版本这个没跟着配过，我的版本是 2018 的，这个是从官网扒下来的，文末有链接。</li></ol><ul><li>转到<code>首选项 | 工具 | 外部工具</code>,</li><li>然后单击<code>+</code>添加新工具。<code>Name</code>填写为 Prettier,</li><li><code>Programs</code> 填写全局安装的 <code>prettier.cmd</code><ul><li>eg： <code>C:\Users\user_name\AppData\Roaming\npm\prettier.cmd</code></li></ul></li><li><code>Parameters</code> 填写 <code>--write $FilePathRelativeToProjectRoot$</code></li><li><code>Working directory</code> 填写 <code>$ProjectFileDir$</code></li><li>按<code>Cmd/Ctrl-Shift-A</code>（查找操作），搜索<code>Prettier</code>，然后点击<code>Enter</code>。</li><li><code>prettier</code> 将针对当前文件运行</li></ul><blockquote><p>eslint</p></blockquote><p><code>eslint</code>没找以前的版本，直接找的 2018 的，感兴趣的可以去配一下，和<code>prettier</code>大同小异</p><ul><li>在<code>File --- settings --- Languages &amp; Frameworks --- JavaScript --- Code Quality Tools --- ESLint</code> 中找到配置<code>eslint</code></li><li><code>Node interpreter</code> — 找到你安装的 <code>node.exe</code> 的目录。<ul><li>eg: <code>C:\Pragram Files\nodejs\node.exe</code></li></ul></li><li><code>ESLint package</code> — 找到你全局安装的 prettier 目录<ul><li>eg: <code>~\AppData\Roaming\npm\node_modules\eslint</code></li></ul></li><li><code>Configuration file</code> 中选择 <code>Configuration file</code> 找到你自己配置的<code>eslintrc.js</code>文件</li></ul><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>配置 <code>Ctrl + s</code> 自动格式化代码</p><ol><li><code>Edit - Macros - Start Macros Recording</code></li><li>按住 <code>Ctrl-Shift-Alt-p</code> 然后 再按 <code>Ctrl-s</code></li><li>点击右下角的红色圆点停止录制宏，输入名字 eg: <code>prettier code and Save</code></li><li>打开设置 <code>File --- settings --- Keymap</code>,搜索刚刚保存的 宏的名字</li><li>双击 选择 <code>Add Keyboard Shortcut</code> 弹出框出来后 键盘上按 <code>Ctrl-S</code>,选择 <code>Remove</code></li><li>finish 完成了。</li></ol><blockquote><p>参考链接</p></blockquote><p><a href="https://prettier.io/docs/en/webstorm.html" target="_blank" rel="noopener">webstorm 配置 prettier</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用自定义的&lt;code&gt;eslint&lt;/code&gt;规则结合编辑器来规范你平时的代码编写风格，我这里配置了 &lt;code&gt;vscode&lt;/code&gt; 和 &lt;code&gt;webstorm&lt;/code&gt; 俩个编辑器的 在校验规则的同时，可以自动把你的代码格式化。如果你的电脑配置可以的话建议你使用&lt;code&gt;webstorm&lt;/code&gt;，虽然&lt;code&gt;vscode&lt;/code&gt;可以任意安装插件，但是论功能的完善还是&lt;code&gt;webstorm&lt;/code&gt;更甚一筹&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.tiankai.party/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://www.tiankai.party/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>react拾遗</title>
    <link href="http://www.tiankai.party/posts/17411/"/>
    <id>http://www.tiankai.party/posts/17411/</id>
    <published>2018-10-23T06:39:00.000Z</published>
    <updated>2019-01-02T03:09:47.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>总结一些 react 中常见的面试题吧，同时也是让自己多学习学习 react 相关的知识。查漏补缺。</p><a id="more"></a><h3 id="组件的命名"><a href="#组件的命名" class="headerlink" title="组件的命名"></a>组件的命名</h3><p>基于路径命名的方式，举个例子，组件的路径如果是 <code>components/User/List.jsx</code>，那么它就被命名为 <code>UserList</code>。</p><h3 id=""><a href="#" class="headerlink" title="!!()"></a>!!()</h3><p>!!(a)的作用是将 a 强制转换为布尔类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!a); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">''</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">'null'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!c); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!d); <span class="comment">//false</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br></pre></td></tr></table></figure><h3 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h3><p><code>React.PureComponent</code> 相较于 <code>React.Component</code> 做了一个<code>shouldComponentupdate()</code>的浅比较，避免了重复更新</p><h3 id="props-和-state"><a href="#props-和-state" class="headerlink" title="props 和 state"></a>props 和 state</h3><p>props 更多的类似是 函数 的 参数<br>state 类似函数内部声明的变量，在函数内部使用，控制函数状态</p><h3 id="setState-的-callback"><a href="#setState-的-callback" class="headerlink" title="setState 的 callback()"></a>setState 的 callback()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">name</span>: <span class="string">"Tian"</span> &#125;, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>setState</code>是异步的，但是可以在回调函数中获取<code>setState</code>后的 <code>state</code></p><h3 id="HTML-和-React-中的事件处理有什么区别"><a href="#HTML-和-React-中的事件处理有什么区别" class="headerlink" title="HTML 和 React 中的事件处理有什么区别"></a>HTML 和 React 中的事件处理有什么区别</h3><ul><li><code>react</code> 事件名称大写，eg: <code>onClick</code>/<code>onChange</code></li><li>在 HTML 中阻止事件可以<code>return false</code>,在 <code>react</code> 中 必须使用 <code>e.preventDefault()</code></li></ul><h3 id="react-中-函数绑定-this-的方法"><a href="#react-中-函数绑定-this-的方法" class="headerlink" title="react 中 函数绑定 this 的方法"></a>react 中 函数绑定 this 的方法</h3><ul><li>在 构造函数中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"click"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>箭头函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"click"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>react 中函数的使用</p></blockquote><ul><li><code>&lt;button onCLick={this.handleClick}&gt;Click&lt;/button&gt;</code></li><li><code>&lt;input onChange={e =&gt; this.handleChange(e)}/&gt;</code></li></ul><h3 id="ref-的使用"><a href="#ref-的使用" class="headerlink" title="ref 的使用"></a>ref 的使用</h3><figure class="highlight javascript"><figcaption><span>MyComponent.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.myRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>SearchBar.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchBar</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.txtSearch = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">term</span>: <span class="string">""</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setInputSearchRef = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.txtSearch = e;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  onInputChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">term</span>: <span class="keyword">this</span>.txtSearch.value &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input</span><br><span class="line">        value=&#123;<span class="keyword">this</span>.state.term&#125;</span><br><span class="line">        onChange=&#123;<span class="keyword">this</span>.onInputChange.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">        ref=&#123;<span class="keyword">this</span>.setInputSearchRef&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="受控组件-和-非受控组件"><a href="#受控组件-和-非受控组件" class="headerlink" title="受控组件 和 非受控组件"></a>受控组件 和 非受控组件</h3><p>使用 <code>setState</code> 控制内部状态的组件称为受控组件，</p><h4 id="controlled"><a href="#controlled" class="headerlink" title="controlled"></a>controlled</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">name</span>: <span class="string">""</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleNameChange = <span class="keyword">this</span>.handleNameChange.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleNameChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">name</span>: event.target.value &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"text"</span></span><br><span class="line">          value=&#123;<span class="keyword">this</span>.state.name&#125;</span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.handleNameChange&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>当注释 <code>this.setState({value: event.target.value});</code> 这行代码，文本框再次输入时，页面不会重新渲染，所产生效果即是文本框输入不了值，即文本框值的改变受到 <code>setState()</code> 方法的控制，在未执行时，不重新渲染组件</p></blockquote><h4 id="uncontrolled"><a href="#uncontrolled" class="headerlink" title="uncontrolled"></a>uncontrolled</h4><p>表单数据由 DOM 本身处理。即不受<code>setState()</code>的控制，与传统的 HTML 表单输入相似，input 输入值即显示最新值（使用 <code>ref</code> 从 DOM 获取表单值）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.input = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(<span class="string">"A name was submitted: "</span> + <span class="keyword">this</span>.input.value);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Name:</span><br><span class="line">          &lt;input type=<span class="string">"text"</span> ref=&#123;input =&gt; (<span class="keyword">this</span>.input = input)&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="submit" value="Submit" /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="React16-生命周期"><a href="#React16-生命周期" class="headerlink" title="React16 生命周期"></a>React16 生命周期</h3><p><a href="http://www.tiankai.party/react16.html">react16 生命周期</a></p><h3 id="React-高阶组件"><a href="#React-高阶组件" class="headerlink" title="React 高阶组件"></a>React 高阶组件</h3><p>在组件内部对旧的组件进行封装，返回一个新的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        title: <span class="string">"New Header"</span>,</span><br><span class="line">        footer: <span class="literal">false</span>,</span><br><span class="line">        showFeatureX: <span class="literal">false</span>,</span><br><span class="line">        showFeatureY: <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...newProps</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="react-16-6-lazy"><a href="#react-16-6-lazy" class="headerlink" title="react 16.6 lazy"></a>react 16.6 lazy</h3><p>类似于<code>react-loadable</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; lazy, Suspense &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">const</span> OtherComponent = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./OtherComponent"</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">      &lt;OtherComponent /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="React-Context"><a href="#React-Context" class="headerlink" title="React Context"></a>React Context</h3><figure class="highlight javascript"><figcaption><span>ThemeContext.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> themes = &#123;</span><br><span class="line">  light: &#123;</span><br><span class="line">    foreground: <span class="string">"#000"</span>,</span><br><span class="line">    background: <span class="string">"#eee"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  dark: &#123;</span><br><span class="line">    foreground: <span class="string">"#fff"</span>,</span><br><span class="line">    background: <span class="string">"#222"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ThemeContext = React.createContext(themes.dark);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Tool <span class="keyword">from</span> <span class="string">"./Tool"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ThemeContext, themes &#125; <span class="keyword">from</span> <span class="string">"./modules/ThemeContext"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Provider &#125; = ThemeContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      theme: themes.light</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.changeTheme = <span class="keyword">this</span>.changeTheme.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  changeTheme() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prev</span> =&gt;</span> (&#123;</span><br><span class="line">      theme: prev.theme === themes.dark ? themes.light : themes.dark</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider value=&#123;<span class="keyword">this</span>.state.theme&#125;&gt;</span><br><span class="line">        &lt;Tool changeTheme=&#123;<span class="keyword">this</span>.changeTheme&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>Tool.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ThemeContext, themes &#125; <span class="keyword">from</span> <span class="string">"./modules/ThemeContext"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Consumer &#125; = ThemeContext;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;value =&gt; (</span><br><span class="line">          &lt;div</span><br><span class="line">            style=&#123;&#123;</span><br><span class="line">              backgroundColor: value.background,</span><br><span class="line">              width: <span class="string">"100%"</span>,</span><br><span class="line">              height: <span class="string">"100%"</span></span><br><span class="line">            &#125;&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;button</span><br><span class="line">              style=&#123;&#123;</span><br><span class="line">                backgroundColor: value.foreground,</span><br><span class="line">                color: value.background,</span><br><span class="line">                outline: <span class="string">"none"</span>,</span><br><span class="line">                padding: <span class="string">"5px 8px"</span>,</span><br><span class="line">                borderRadius: <span class="string">"5px"</span>,</span><br><span class="line">                border: <span class="number">0</span>,</span><br><span class="line">                margin: <span class="string">"20px"</span></span><br><span class="line">              &#125;&#125;</span><br><span class="line">              onClick=&#123;<span class="keyword">this</span>.props.changeTheme&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              Toggle - Theme -&#123;<span class="string">" "</span>&#125;</span><br><span class="line">              &#123;value.background === themes.dark.background ? <span class="string">"dark"</span> : <span class="string">"light"</span>&#125;</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;<span class="regexp">/Consumer&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Tool.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  changeTheme: PropTypes.func,</span></span><br><span class="line"><span class="regexp">  errorAction: PropTypes.func</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Tool;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一些 react 中常见的面试题吧，同时也是让自己多学习学习 react 相关的知识。查漏补缺。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>图片懒加载</title>
    <link href="http://www.tiankai.party/posts/8917/"/>
    <id>http://www.tiankai.party/posts/8917/</id>
    <published>2018-10-10T09:59:00.000Z</published>
    <updated>2019-01-02T02:54:45.250Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一直都想自己实现这个功能而不是知道原理不实践，这次突然看到掘金上的文章后，跟着走了一遍代码，原来不管什么效果只知道原理是远远不够的，你必须亲自实现一下，然后才知道其中的坑，也会学到更多。程序员就要勤于动手。</p><a id="more"></a><p>先放一张自己画的图，理清楚这几个高度的关系。</p><p><img src="/../images/window.png" alt="clientHeight"></p><ul><li>认识一个函数<code>let rectObj = element.getBoundingClientRect()</code><ul><li>返回的对象<code>rectObj.top</code> 表示的是 该元素 距离视口（浏览器窗口）的距离，即图中的 <code>clientBoundRect.top</code></li><li>视口的高度 <code>document.documentElement.clientHeight</code></li><li><code>document.body.clientHeight</code> 获取的 网页的高度</li></ul></li></ul><blockquote><p>这里参考了一下阮一峰大大的 获取元素 的绝对位置 和 相对位置</p></blockquote><ul><li>相对位置<br><code>element.getBoundingClientRect().top</code></li><li>绝对位置<br>相对位置 + 网页滚动过的距离<br><code>element.getBoundingClientRect().top + document.documentElement.scrollTop</code></li></ul><h3 id="传统的-监听-Scroll-事件"><a href="#传统的-监听-Scroll-事件" class="headerlink" title="传统的 监听 Scroll 事件"></a>传统的 监听 Scroll 事件</h3><p>在 scroll 事件中 我们只需要判断一下，元素距离浏览器窗口顶部的距离是否小于浏览器窗口的高度，就可以判断出 图片是否进入了 可视区域，<br>然后再使用节流函数， 每隔 200ms 调用一次 函数， 节省开销</p><figure class="highlight javascript"><figcaption><span>lazy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的图片</span></span><br><span class="line"><span class="keyword">this</span>.lazyImg.forEach(<span class="function">(<span class="params">val, idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rectObj = val.getBoundingClientRect();</span><br><span class="line">  <span class="comment">// 如果当前元素距 视口 的距离 小于 视口的 高度</span></span><br><span class="line">  <span class="comment">// 此时元素处于可见范围</span></span><br><span class="line">  <span class="keyword">if</span> (rectObj.top &lt; <span class="built_in">document</span>.documentElement.clientHeight) &#123;</span><br><span class="line">    <span class="keyword">let</span> actualSrc = val.dataset.src;</span><br><span class="line">    val.setAttribute(<span class="string">"src"</span>, actualSrc);</span><br><span class="line">    val.removeAttribute(<span class="string">"class"</span>);</span><br><span class="line">    <span class="comment">// 当滚动到最后一个图片后 移除 scroll 事件</span></span><br><span class="line">    <span class="keyword">if</span> (idx === <span class="keyword">this</span>.lazyImg.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">"scroll"</span>, <span class="built_in">window</span>.scrollFun);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h4><blockquote><p>Get: 重新认识了一下 节流函数 记忆理解更深了一层</p></blockquote><p>具体的节流函数可以查看我之前写的一篇<a href="http://www.tiankai.party/%E5%87%BD%E6%95%B0%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html">防抖节流的文章</a></p><figure class="highlight javascript"><figcaption><span>throttle.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">  that = <span class="keyword">this</span>,</span><br><span class="line">  timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _args = args,</span><br><span class="line">    now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span>(now - start &gt; delay)&#123;</span><br><span class="line">      start = now;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = setTimeout(() = &gt; &#123;</span><br><span class="line">        fn.apply(that, _args);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方式</span></span><br><span class="line"><span class="keyword">let</span> throttleFun = throttle(scrollFun, <span class="number">200</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, () =&gt; &#123;</span><br><span class="line">  throttleFun(args);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="新的-Intersection-Observer-API"><a href="#新的-Intersection-Observer-API" class="headerlink" title="新的 Intersection Observer API"></a>新的 Intersection Observer API</h3><p>使用分俩步：</p><ul><li>新建 <code>Intersection Observer</code> 观察对象 <code>oberver</code></li></ul><figure class="highlight javascript"><figcaption><span>observer.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new IntersctionObserver(callback, options)</span></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> IntersctionObserver(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.forEach(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// entry.isIntersecting 标识元素是否进入可见区域</span></span><br><span class="line">    <span class="comment">// entry.target 观察的当前元素</span></span><br><span class="line">    <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">      <span class="keyword">let</span> _target = entry.target;</span><br><span class="line">      <span class="keyword">let</span> actualSrc = _target.getAttribute(<span class="string">"data-src"</span>);</span><br><span class="line">      _target.removeAttribute(<span class="string">"class"</span>);</span><br><span class="line">      _target.setAttribute(<span class="string">"src"</span>, actualSrc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>observer.observe(element)</code> 观察元素</li></ul><figure class="highlight javascript"><figcaption><span>observer.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.lazyImg.forEach(<span class="function"><span class="params">img</span> =&gt;</span> observer.boserve(img));</span><br></pre></td></tr></table></figure><p><a href="https://github.com/tiakia/some-demo/blob/master/lazyImg/lazyImage.html" target="_blank" rel="noopener">完整代码</a></p><blockquote><p>参考链接</p></blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener">intersectionObserver - MDN</a></p><p><a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="noopener">阮一峰的网络日志</a></p><p><a href="https://juejin.im/post/5bbc60e8f265da0af609cd04?utm_source=gold_browser_extension" target="_blank" rel="noopener">掘金</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直都想自己实现这个功能而不是知道原理不实践，这次突然看到掘金上的文章后，跟着走了一遍代码，原来不管什么效果只知道原理是远远不够的，你必须亲自实现一下，然后才知道其中的坑，也会学到更多。程序员就要勤于动手。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.tiankai.party/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>常见的排序算法</title>
    <link href="http://www.tiankai.party/posts/11962/"/>
    <id>http://www.tiankai.party/posts/11962/</id>
    <published>2018-09-26T01:46:00.000Z</published>
    <updated>2019-01-02T02:51:05.711Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里列举几种，前端常见的几种排序算法，记忆巩固一下吧,后期慢慢更新。算法才是最重要的。</p><a id="more"></a><p>1.冒泡排序</p><ul><li>比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><figure class="highlight javascript"><figcaption><span>bubleSort.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                [arr[j], arr[j+<span class="number">1</span>]] = [arr[j+<span class="number">1</span>], arr[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.快速排序</p><ul><li>选择 中间的值 做为 基准值，把数组拆分成左右俩个数组</li><li>比基准值大的放到 右边数组，比基准值小的放到 左边数组</li><li>最后 排序一下 然后 拼接成排序好的数组</li></ul><figure class="highlight javascript"><figcaption><span>quickSort.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length,</span><br><span class="line">    leftArr = [],</span><br><span class="line">    rightArr = [],</span><br><span class="line">    cenVal = arr[<span class="built_in">Math</span>.floor(len / <span class="number">2</span>)];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; cenVal) &#123;</span><br><span class="line">      leftArr.push(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rightArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  leftArr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b &gt; <span class="number">0</span>);</span><br><span class="line">  rightArr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b &gt; <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> [...leftArr, ...rightArr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.插入排序</p><ul><li>默认数组第一个是已经排序好的，从第二个元素开始排序</li><li>第二个元素和第一个元素比较 如果第二个元素比第一个小 那么 这俩个元素互换位置</li><li>然后从第三个元素开始，和第一个，第二个比较，把第三个元素 插入到 该在的位置，这样前三个就是排好序的。</li><li>从第四个开始 重复上述步骤</li></ul><figure class="highlight javascript"><figcaption><span>insertSort.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">old_index, new_index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (new_index &gt;= <span class="keyword">this</span>.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> k = new_index - <span class="keyword">this</span>.length;</span><br><span class="line">    <span class="keyword">while</span> (k-- + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.push(<span class="literal">undefined</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.splice(new_index, <span class="number">0</span>, <span class="keyword">this</span>.splice(old_index, <span class="number">1</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// for testing purposes</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length,</span><br><span class="line">    orderIndex;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">        orderIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.move(i, orderIndex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.选择排序</p><ul><li>从第一个元素开始和后面的所有元素比较，记录最小的位置，然后交换位置</li><li>从第二个元素开始和后面的所有元素比较，继续循环比较</li><li>重复上述步骤</li></ul><figure class="highlight javascript"><figcaption><span>selectSort.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择排序法一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 把小的数放到前面，下次遍历的时候从排好的数开始</span></span><br><span class="line"><span class="comment"> * 每个数和它后面的每个数比较，把小的数放在前面</span></span><br><span class="line"><span class="comment"> * 下次循环从已经比较好的数开始进行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unKonwSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">        [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序法二</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 循环只保留下标，在一次循环完成后再交换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> minIndex,</span><br><span class="line">    len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><p><a href="https://juejin.im/post/57dcd394a22b9d00610c5ec8#heading-10" target="_blank" rel="noopener">掘金</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里列举几种，前端常见的几种排序算法，记忆巩固一下吧,后期慢慢更新。算法才是最重要的。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.tiankai.party/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.tiankai.party/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>compositionstart/end 处理中文输入问题</title>
    <link href="http://www.tiankai.party/posts/38500/"/>
    <id>http://www.tiankai.party/posts/38500/</id>
    <published>2018-09-06T07:43:00.000Z</published>
    <updated>2019-01-02T02:55:03.605Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>问题的引出在上一次写的 防抖 节流中，在防抖的 input 框输入的时候发现我输入的中文结果控制台显示出来的是拼音，然后就找到这俩个函数 <code>compositionstart</code> 和 <code>compositionend</code></p><a id="more"></a><h3 id="compositionstart"><a href="#compositionstart" class="headerlink" title="compositionstart"></a>compositionstart</h3><p>该事件仅在若干可见字符的输入之前，而这些可见字符的输入可能需要一连串的键盘操作、语音识别或者点击输入法的。</p><h3 id="compositionend"><a href="#compositionend" class="headerlink" title="compositionend"></a>compositionend</h3><p>该事件触发于可见字符输入完成之后。</p><p>和<code>input</code>三个事件发生的顺序是:</p><ul><li><code>compositionstart</code></li><li><code>input</code></li><li><code>compositionend</code></li></ul><p>触发<code>compositionstart</code>时，会同时触发<code>input</code>事件；最后输入完成时，触发<code>compositionend</code>。</p><p>选词结束的时候<code>input</code>会比<code>compositionend</code>先一步触发，此时 isLock 还未调整为 false，所以不能触发到 console，所以这里需要 <code>setTimeout</code> 的无阻塞模式，让 console 优先级排到最后，才能在<code>compositionend</code> 事件触发后打印出值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理中文输入的问题</span></span><br><span class="line"><span class="keyword">let</span> inputChina = <span class="built_in">document</span>.getElementById(<span class="string">"inputChina"</span>),</span><br><span class="line">  isLock = <span class="literal">true</span>,</span><br><span class="line">  timer = <span class="literal">null</span>;</span><br><span class="line">inputChina.addEventListener(<span class="string">"compositionstart"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  isLock = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"compositionstart: "</span> + e.target.value);</span><br><span class="line">&#125;);</span><br><span class="line">inputChina.addEventListener(<span class="string">"input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"input: "</span> + e.target.value);</span><br><span class="line">  timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"correct: "</span> + e.target.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  timer = <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br><span class="line">inputChina.addEventListener(<span class="string">"compositionend"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  isLock = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"compositionend: "</span> + e.target.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><p><a href="https://www.cnblogs.com/lonhon/p/7643095.html" target="_blank" rel="noopener">博客园大神</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题的引出在上一次写的 防抖 节流中，在防抖的 input 框输入的时候发现我输入的中文结果控制台显示出来的是拼音，然后就找到这俩个函数 &lt;code&gt;compositionstart&lt;/code&gt; 和 &lt;code&gt;compositionend&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.tiankai.party/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>函数的防抖和节流</title>
    <link href="http://www.tiankai.party/posts/43821/"/>
    <id>http://www.tiankai.party/posts/43821/</id>
    <published>2018-09-06T02:33:00.000Z</published>
    <updated>2019-01-02T03:08:40.516Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天看了掘金的文章函数的防抖和节流，然后想自己总结一篇，应证一下是否学会了。</p><a id="more"></a><p>先来 一个 普通情况下的截图</p><p><img src="/../images/normal.gif" alt="normal"></p><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>含义：一个函数如果在一段时间内不断触发，那么我们就让这个事件在停止触发一段时间后发生，如果在这个时间内重新触发了那么这个时间重新开始计算。<br>案例： 搜索框联想搜索时，浏览器窗口 resize 事件、Scroll 事件等。</p><p><img src="/../images/debounce.gif" alt="debounce"></p><figure class="highlight javascript"><figcaption><span>debounce.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数的防抖</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fun, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>,</span><br><span class="line">      _args = args;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fun.call(that, _args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testInput</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Value: "</span> + e.target.value + <span class="string">"\n"</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> debounceInput = <span class="built_in">document</span>.getElementById(<span class="string">"debounce"</span>);</span><br><span class="line"><span class="comment">// 调用方式</span></span><br><span class="line"><span class="keyword">let</span> debounceFunc = debounce(testInput, <span class="number">500</span>);</span><br><span class="line">debounceInput.addEventListener(</span><br><span class="line">  <span class="string">"input"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    debounceFunc(e);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>含义： 规定函数在一定的时间段内执行一次，如果在这个时段内多次触发，也只会触发一次。</p><p><img src="/../images/throttle.gif" alt="throttle"></p><figure class="highlight javascript"><figcaption><span>throttle.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fun, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> last = +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>,</span><br><span class="line">      _args = args,</span><br><span class="line">      now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (last &amp;&amp; now - last &gt; delay) &#123;</span><br><span class="line">      last = now;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fun.call(that, _args);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用方式</span></span><br><span class="line"><span class="keyword">let</span> throttleInput = <span class="built_in">document</span>.getElementById(<span class="string">"throttle"</span>);</span><br><span class="line"><span class="keyword">let</span> throttleFunc = throttle(testInput, <span class="number">1000</span>);</span><br><span class="line">throttleInput.addEventListener(</span><br><span class="line">  <span class="string">"input"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    throttleFunc(e);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>注意： 在防抖和节流函数中，在闭包函数内留住 this 还是选择 闭包外留住 this，最后函数中 this 的指向不一样。闭包外留住 this 指向的是 外层函数所指的 this，闭包内留住的 this 指向的是 接受外层函数返回函数的 变量 所指的 this</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">lazy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(selector) &#123;</span><br><span class="line">      <span class="keyword">this</span>.lazyImg = <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line">      <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    init() &#123;</span><br><span class="line">      <span class="built_in">window</span>.scrollFun = <span class="keyword">this</span>.throttle(<span class="keyword">this</span>.judge, <span class="number">200</span>);</span><br><span class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, <span class="built_in">window</span>.scrollFun);</span><br><span class="line">    &#125;</span><br><span class="line">    judge() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    throttle(fn, delay) &#123;</span><br><span class="line">      <span class="comment">// 节流 每隔一段时后 触发一次函数</span></span><br><span class="line">      <span class="keyword">let</span> timer,</span><br><span class="line">        that = <span class="keyword">this</span>, <span class="comment">// 这里留住 this 指向的是 throttle的 this(lazy)</span></span><br><span class="line">        start = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _args = args,</span><br><span class="line">          <span class="comment">//that = this, // 这里留住 this 指向的是 scrollFun 的 this(window)</span></span><br><span class="line">          now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (now - start &gt; delay) &#123;</span><br><span class="line">          start = now;</span><br><span class="line">          clearTimeout(timer);</span><br><span class="line">          timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.call(that, _args);</span><br><span class="line">          &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">new</span> lazy(<span class="string">"article img"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了掘金的文章函数的防抖和节流，然后想自己总结一篇，应证一下是否学会了。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.tiankai.party/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>redux-saga处理异步请求(初级篇)</title>
    <link href="http://www.tiankai.party/posts/49250/"/>
    <id>http://www.tiankai.party/posts/49250/</id>
    <published>2018-09-05T08:56:00.000Z</published>
    <updated>2019-01-02T03:17:07.365Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>redux 是 react 中处理数据的方式，数据的获取有时候需要通过请求后台来获得，这个操作就是副作用，<code>redux-saga</code> 就是用来处理副作用的方式。</p><a id="more"></a><h4 id="使用-redux-saga-的方式："><a href="#使用-redux-saga-的方式：" class="headerlink" title="使用 redux-saga 的方式："></a>使用 <code>redux-saga</code> 的方式：</h4><figure class="highlight javascript"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createSagaMiddleware &#125; <span class="keyword">from</span> <span class="string">"redux-saga"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rootSaga <span class="keyword">from</span> <span class="string">"./sagas"</span>;</span><br><span class="line"><span class="comment">//创建 saga 中间件</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"><span class="comment">//redux 应用 saga 中间件</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware));</span><br><span class="line"></span><br><span class="line">sagaMiddleware.run(rootSaga);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> action = <span class="function"><span class="params">type</span> =&gt;</span> store.dispatch(&#123; type &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123; value, onIncrement, onDecrement, onIncrementasync &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button onClick=&#123;onIncrementAsync&#125;&gt;increment after <span class="number">1</span> second&lt;<span class="regexp">/button&gt;&#123;" "&#125;</span></span><br><span class="line"><span class="regexp">    &lt;button onClick=&#123;onIncrement&#125;&gt;Increment&lt;/</span>button&gt;&#123;<span class="string">" "</span>&#125;</span><br><span class="line">    &lt;button onClick=&#123;onDecrement&#125;&gt;Decrement&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;hr /</span>&gt;</span><br><span class="line">    &lt;div&gt;Clicked: &#123;value&#125; times&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Counter</span><br><span class="line">      value=&#123;store.getState()&#125;</span><br><span class="line">      onIncrement=&#123;() =&gt; action(<span class="string">"INCREMENT"</span>)&#125;</span><br><span class="line">      onDecrement=&#123;() =&gt; action(<span class="string">"DECREMENT"</span>)&#125;</span><br><span class="line">      onIncrementAsync=&#123;() =&gt; action(<span class="string">"INCREMENTASYNC"</span>)&#125;</span><br><span class="line">    /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>reducers.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducers</span>(<span class="params">state = <span class="number">0</span>, &#123; type &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"INCREMENT"</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"DECREMENT"</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加一个点击按钮 1s 后增加 1 的 saga</p><figure class="highlight javascript"><figcaption><span>sagas.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; put, takeEvery, all &#125; <span class="keyword">from</span> <span class="string">"redux-saga/effects"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">incrementAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> delay(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">"INCREMENT"</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">watchIncrementAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> takeEvery(<span class="string">"INCREMENTASYNC"</span>, incrementAsync);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>* <span class="title">rootSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> all([helloSaga(), watchIncrementAsync()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h4><p>saga 提供的工具函数，可以用来进行异步操作。</p><ul><li><code>call</code> 函数用来发起异步请求 阻塞的 阻塞函数执行知道返回 resolve 或 reject</li><li><code>fork</code> 无阻塞的发起异步请求，函数可以继续执行，而不会等待 fork 发起的异步任务结束</li><li><code>put</code> 类似 redux 的 dispatch 发起一个 action</li><li><code>take</code> 监听这个 action 的发生,一般放到一个 <code>while(true)</code>循环中，否则只能监听到第一次的 action</li><li><code>cancel()</code> fork 返回一个 task 列表，使用 cancel 可以中止任务执行</li><li><code>takeEvery</code> 监听每次触发的操作</li><li><code>takeLatest</code> 只监听最后一次触发的操作</li></ul><h4 id="创建一个-logger-日志记录-saga"><a href="#创建一个-logger-日志记录-saga" class="headerlink" title="创建一个 logger 日志记录 saga"></a>创建一个 logger 日志记录 saga</h4><figure class="highlight javascript"><figcaption><span>sgas.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">logger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> action = <span class="keyword">yield</span> take(*);</span><br><span class="line">    <span class="keyword">const</span> state = <span class="keyword">yield</span> select();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"actions： "</span> + <span class="built_in">JSON</span>.stringify(action));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"state after: "</span> + state);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>* <span class="title">rootSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> all([helloSaga(), watchIncrementasync(), logger()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>take(*)可以监听所有的 action，搭配 while(true) 可以监听所有的 操作，记录日志</p></blockquote><p>使用了 saga， 那么逻辑就可以放在 saga 中，数据的状态和绑定数据到 react 放在 reducer 里面 而 react 只负责 UI 界面展示</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redux 是 react 中处理数据的方式，数据的获取有时候需要通过请求后台来获得，这个操作就是副作用，&lt;code&gt;redux-saga&lt;/code&gt; 就是用来处理副作用的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
      <category term="redux-saga" scheme="http://www.tiankai.party/tags/redux-saga/"/>
    
  </entry>
  
  <entry>
    <title>使用canvas压缩图片</title>
    <link href="http://www.tiankai.party/posts/34974/"/>
    <id>http://www.tiankai.party/posts/34974/</id>
    <published>2018-09-04T06:22:00.000Z</published>
    <updated>2019-01-02T03:23:04.953Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前俩天做了一个图片转 base64 上传的功能，发现如果图片的 base64 过大的话，请求会变的很慢，严重的直接超时了，所以想到了在上传前压缩一下图片，然后再上传到后台，这样可以大大的提高效率，在这里记录一下利用 canvas 压缩图片遇到的几个坑。完整代码会在文末给出。</p><a id="more"></a><h4 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h4><ol><li>第一个坑，在压缩图片的时候没获取图片本身的宽高，给了一个 <code>600*480</code> 的定宽定高，因为是手机端的，在上传图片的时候都是几兆的图片，所以这块没任何问题。出问题的地方在 修改头像的时候，测试的时候上传的图片都是小图片，然后就出现了 压缩后的图片显示不完全，大部分都是空白的现象，这就是因为在压缩的时候没有考虑图片原本的宽高的情况。</li><li>第二个坑，解决第一个坑的办法就是在图片加载完成后（onload），获取图片本身的宽高，然后赋值给<code>canvas</code>,这样进行操作，但是这有个坑就是，图片加载是异步的，在你<code>return</code>的时候，返回的可能是 <code>undefined</code> 而不是你需要的 压缩后的 base64。这里的解决方法是，新建一个 <code>Promise</code>，然后把结果 <code>resolve()</code> 返回去，在调用的时候 <code>.then()</code> 得到结果。</li></ol><h4 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h4><ol><li><code>canvas</code>的<code>toDataURL(&#39;image/png&#39;, 0.9)</code>; 把 canvas 画的图片转换为 base64,第一个参数表示的是图片的类型，第二个参数表示的是图片的清晰度。</li><li>规定一个最大尺寸，如果图片本身的宽高大于这个尺寸，按照最大的一个边进行缩放，另一个根据图片的 比例 进行设置，然后设置给 <code>canvas</code>.</li></ol><figure class="highlight javascript"><figcaption><span>miniImage.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">miniSize</span>(<span class="params">imgData, maxSize = <span class="number">200</span> * <span class="number">1024</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// const maxSize = 200 * 1024;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (imgData &amp;&amp; imgData.files &amp;&amp; imgData.files.size &lt; maxSize) &#123;</span><br><span class="line">    <span class="keyword">return</span> imgData.url;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------压缩图片-------------------"</span>);</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.src = imgData.url;</span><br><span class="line">    <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      img.addEventListener(</span><br><span class="line">        <span class="string">"load"</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">//图片原始尺寸</span></span><br><span class="line">          <span class="keyword">let</span> originWidth = <span class="keyword">this</span>.width;</span><br><span class="line">          <span class="keyword">let</span> originHeight = <span class="keyword">this</span>.height;</span><br><span class="line">          <span class="comment">// 最大尺寸限制</span></span><br><span class="line">          <span class="keyword">let</span> maxWidth = <span class="number">400</span>,</span><br><span class="line">            maxHeight = <span class="number">400</span>;</span><br><span class="line">          <span class="comment">// 目标尺寸</span></span><br><span class="line">          <span class="keyword">let</span> targetWidth = originWidth,</span><br><span class="line">            targetHeight = originHeight;</span><br><span class="line">          <span class="comment">// 图片尺寸超过400x400的限制</span></span><br><span class="line">          <span class="keyword">if</span> (originWidth &gt; maxWidth || originHeight &gt; maxHeight) &#123;</span><br><span class="line">            <span class="keyword">if</span> (originWidth / originHeight &gt; maxWidth / maxHeight) &#123;</span><br><span class="line">              <span class="comment">// 更宽，按照宽度限定尺寸</span></span><br><span class="line">              targetWidth = maxWidth;</span><br><span class="line">              targetHeight = <span class="built_in">Math</span>.round(</span><br><span class="line">                maxWidth * (originHeight / originWidth)</span><br><span class="line">              );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              targetHeight = maxHeight;</span><br><span class="line">              targetWidth = <span class="built_in">Math</span>.round(</span><br><span class="line">                maxHeight * (originWidth / originHeight)</span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          canvas.width = targetWidth;</span><br><span class="line">          canvas.height = targetHeight;</span><br><span class="line">          ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">          <span class="keyword">let</span> base64 = canvas.toDataURL(<span class="string">"image/png"</span>, <span class="number">0.9</span>);</span><br><span class="line">          resolve(base64);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">onChangeImg = <span class="keyword">async</span> (files, type, index) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> previous = <span class="keyword">this</span>.props.imagePicker.files;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">"add"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = miniSize(files[files.length - <span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//使用 .then() 调用获得结果</span></span><br><span class="line">    <span class="keyword">await</span> result.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      previous.push(&#123; <span class="attr">url</span>: res &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">"remove"</span>) &#123;</span><br><span class="line">    previous.splice(index, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.props.dispatch(&#123;</span><br><span class="line">    type: <span class="string">"imagePicker/saveImage"</span>,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      files: previous</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前俩天做了一个图片转 base64 上传的功能，发现如果图片的 base64 过大的话，请求会变的很慢，严重的直接超时了，所以想到了在上传前压缩一下图片，然后再上传到后台，这样可以大大的提高效率，在这里记录一下利用 canvas 压缩图片遇到的几个坑。完整代码会在文末给出。&lt;/p&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://www.tiankai.party/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://www.tiankai.party/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>eslint配置记录</title>
    <link href="http://www.tiankai.party/posts/13347/"/>
    <id>http://www.tiankai.party/posts/13347/</id>
    <published>2018-08-16T01:39:00.000Z</published>
    <updated>2019-01-02T03:25:45.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>eslint 可以帮助进行我们检查代码，使我们的代码写的整洁，高效，在这里总结一篇关于 eslint 配置的一些事项，一些规则持续更新。</p><p>eslint 的配置文件放在根目录中，新建<code>.eslintrc.js</code>文件，然后开始配置，一般常见的配置如下:</p><a id="more"></a><figure class="highlight javascript"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  parser: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="string">"react"</span>, <span class="string">"jsx-a11y"</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">"react/prop-types"</span>: [<span class="number">2</span>],</span><br><span class="line">    <span class="string">"jsx-a11y/href-no-hash"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: <span class="string">"react-app"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们来详细的看一下 各个字段所代表的意思：</p><h3 id="rules"><a href="#rules" class="headerlink" title="rules:"></a>rules:</h3><p>是你具体配置的 eslint 的规则对象，对象的属性名为具体的规则名称，其他的规则名称会在文末有个总结，属性值是定义规则的开闭原则可以使用以下的值：</p><ul><li><code>&quot;off&quot;</code> or <code>0</code>-关闭规则</li><li><code>&quot;warn&quot;</code> or <code>1</code>-将规则视为一个警告，不会影响编译</li><li><code>&quot;error&quot;</code> or <code>2</code>- 将规则视为一个错误，在打包编译的时候会报错</li></ul><h3 id="extends"><a href="#extends" class="headerlink" title="extends:"></a>extends:</h3><p>这个字段表示的是 eslint 的扩展，你可以通过这个来使用社区别人写好的规则，我这里使用的是 <code>create-react-app</code> 的 eslint 扩展。也可以使用 <code>&quot;extends&quot;: &quot;eslint:recommended&quot;</code>这样会开启 eslint 推荐打开的规则。</p><h3 id="parser"><a href="#parser" class="headerlink" title="parser:"></a>parser:</h3><p>规定 eslint 的解析器，默认是 <code>esprima</code>，在这个配置中使用的是<code>bael-eslint</code>解析器</p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins:"></a>plugins:</h3><p>eslint 支持 第三方插件，在使用前必须安装他们，插件名称可以省略 <code>eslint-plugin-</code>前缀,常用的俩个插件就是 <code>eslint-plugin-react</code> 和 <code>eslint-plugin-jsx-a11y</code>,如果在 <code>rules</code> 规则对象中使用 插件中的规则的话，就如上面配置中的那样是 <code>react/prop-tyeps</code> 这样来使用。</p><h3 id="env"><a href="#env" class="headerlink" title="env:"></a>env:</h3><p>规定了 eslint 的启用环境</p><h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title="eslintignore"></a>eslintignore</h3><p>配置 忽略 eslint 语法检查的文件，可以配置在 <code>package.json</code> 文件里,同样 eslint 的配置同样也可以放在 <code>package.json</code> 文件里</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"mypackage"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line">      <span class="attr">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"node"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslintIgnore"</span>: [<span class="string">"hello.js"</span>, <span class="string">"world.js"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rules-1"><a href="#rules-1" class="headerlink" title="rules"></a>rules</h3><p>这些规则 js 中的可能的错误或逻辑错误有关：</p><table><thead><tr><th>规则</th><th>解释</th></tr></thead><tbody><tr><td>for-direction</td><td>强制 <code>“for”</code> 循环中更新子句的计数器朝着正确的方向移动</td></tr><tr><td>getter-return</td><td>强制 getter 函数中出现  <code>return</code>  语句</td></tr><tr><td>no-await-in-loop</td><td>禁止在循环中出现  <code>await</code></td></tr><tr><td>no-compare-neg-zero</td><td>禁止与 -0 进行比较</td></tr><tr><td>no-cond-assign</td><td>禁止条件表达式中出现赋值操作符</td></tr><tr><td>no-console</td><td>禁用 <code>console</code></td></tr><tr><td>no-constant-condition</td><td>禁止在条件中使用常量表达式</td></tr><tr><td>no-control-regex</td><td>禁止在正则表达式中使用控制字符</td></tr><tr><td>no-debugger</td><td>禁用 <code>debugger</code></td></tr><tr><td>no-duplicate-case</td><td>禁止出现重复 <code>case</code> 标签</td></tr><tr><td>no-dupe-args</td><td>禁止 <code>function</code> 定义中出现重命名参数</td></tr><tr><td>no-dupe-keys</td><td>禁止对象字面量中出现重复的 <code>key</code></td></tr><tr><td>no-empty</td><td>禁止出现空语句块</td></tr><tr><td>no-empty-character-class</td><td>禁止在正则表达式中使用空字符集</td></tr><tr><td>no-ex-assign</td><td>禁止对 <code>catch</code> 字句的参数重新赋值</td></tr><tr><td>no-extra-boolean-cast</td><td>禁止不必要的布尔转换</td></tr><tr><td>no-extra-parens</td><td>禁止不必要的括号</td></tr><tr><td>no-extra-semi</td><td>禁止不必要的分号</td></tr><tr><td>no-func-assign</td><td>禁止对 <code>function</code> 声明重新赋值</td></tr><tr><td>no-inner-declarations</td><td>禁止在嵌套的块中出现变量声明或  <code>function</code>  声明</td></tr><tr><td>no-invalid-regexp</td><td>禁止  <code>RegExp</code>  构造函数中存在无效的正则表达式字符串</td></tr><tr><td>no-irregular-whitespace</td><td>禁止在字符串和注释之外不规则的空白</td></tr><tr><td>no-obj-calls</td><td>禁止把全局对象作为函数调用</td></tr><tr><td>no-prototype-builtins</td><td>禁止直接调用  <code>Object.prototypes</code>  的内置属性</td></tr><tr><td>no-regex-spaces</td><td>禁止正则表达式字面量中出现多个空格</td></tr><tr><td>no-sparse-arrays</td><td>禁用稀疏数组</td></tr><tr><td>no-template-curly-in-string</td><td>禁止在常规字符串中出现模板字面量占位符语法</td></tr><tr><td>no-unexpected-multiline</td><td>禁止出现令人困惑的多行表达式</td></tr><tr><td>no-unreachable</td><td>禁止在<code>return</code>、<code>throw</code>、<code>continue</code>  和  <code>break</code>  语句之后出现不可达代码</td></tr><tr><td>no-unsafe-finally</td><td>禁止在  <code>finally</code>  语句块中出现控制流语句</td></tr><tr><td>no-unsafe-negation</td><td>禁止对关系运算符的左操作数使用否定操作符</td></tr><tr><td>no-isnan</td><td>要求使用  <code>isNaN()</code>  检查  <code>NaN</code></td></tr><tr><td>valid-jsdoc</td><td>强制使用有效的 JSDoc 注释</td></tr><tr><td>valid-typeof</td><td>强制  <code>typeof</code>  表达式与有效的字符串进行比较</td></tr></tbody></table><p>这些规则是关于最佳实践的：</p><table><thead><tr><th>规则</th><th>解释</th></tr></thead><tbody><tr><td>accessor-pairs</td><td>强制 getter 和 setter 在对象中成对出现</td></tr><tr><td>array-callback-return</td><td>强制数组方法的回调函数中有  <code>return</code>  语句</td></tr><tr><td>block-scoped-var</td><td>强制把变量的使用限制在其定义的作用域范围内</td></tr><tr><td>class-methods-use-this</td><td>强制类方法使用  <code>this</code></td></tr><tr><td>complexity</td><td>指定程序中允许的最大环路复杂度</td></tr><tr><td>consistent-return</td><td>要求  <code>return</code>  语句要么总是指定返回的值，要么不指定</td></tr><tr><td>curly</td><td>强制所有控制语句使用一致的括号风格</td></tr><tr><td>default-case</td><td>要求  <code>switch</code>  语句中有  <code>default</code>  分支</td></tr><tr><td>dot-location</td><td>强制在点号之前和之后一致的换行</td></tr><tr><td>dot-notation</td><td>强制尽可能地使用点号</td></tr><tr><td>eqeqeq</td><td>要求使用  <code>===</code>  和  <code>!==</code></td></tr><tr><td>guard-for-in</td><td>要求  <code>for-in</code>  循环中有一个  <code>if</code>  语句</td></tr><tr><td>no-alert</td><td>禁用  <code>alert</code>、<code>confirm</code>  和  <code>prompt</code></td></tr><tr><td>no-caller</td><td>禁用  <code>arguments.caller</code>  或  <code>arguments.callee</code></td></tr><tr><td>no-case-declarations</td><td>不允许在 case 子句中使用词法声明</td></tr><tr><td>no-div-regex</td><td>禁止除法操作符显式的出现在正则表达式开始的位置</td></tr><tr><td>no-else-return</td><td>禁止  <code>if</code>  语句中  <code>return</code>  语句之后有  <code>else</code>  块</td></tr><tr><td>no-empty-pattern</td><td>禁止使用空解构模式</td></tr><tr><td>no-eq-null</td><td>禁止在没有类型检查操作符的情况下与  <code>null</code>  进行比较</td></tr><tr><td>no-eval</td><td>禁用  <code>eval()</code></td></tr><tr><td>no-extend-native</td><td>禁止扩展原生类型</td></tr><tr><td>no-extra-bind</td><td>禁止不必要的  <code>.bind()</code>  调用</td></tr><tr><td>no-extra-label</td><td>禁用不必要的标签</td></tr><tr><td>no-fallthrough</td><td>禁止  <code>case</code>  语句落空</td></tr><tr><td>no-floating-decimal</td><td>禁止数字字面量中使用前导和末尾小数点</td></tr><tr><td>no-global-assign</td><td>禁止对原生对象或只读的全局对象进行赋值</td></tr><tr><td>no-implicit-coercion</td><td>禁止使用短符号进行类型转换</td></tr><tr><td>no-implicit-globals</td><td>禁止在全局范围内使用变量声明和  <code>function</code>  声明</td></tr><tr><td>no-implied-eval</td><td>禁止使用类似  <code>eval()</code>  的方法</td></tr><tr><td>no-invalid-this</td><td>禁止  <code>this</code>  关键字出现在类和类对象之外</td></tr><tr><td>no-iterator</td><td>禁用  <code>__iterator__</code>  属性</td></tr><tr><td>no-labels</td><td>禁用标签语句</td></tr><tr><td>no-lone-blocks</td><td>禁用不必要的嵌套块</td></tr><tr><td>no-loop-func</td><td>禁止在循环中出现  <code>function</code>  声明和表达式</td></tr><tr><td>no-magic-numbers</td><td>禁用魔术数字</td></tr><tr><td>no-multi-spaces</td><td>禁止使用多个空格</td></tr><tr><td>no-multi-str</td><td>禁止使用多行字符串</td></tr><tr><td>no-new</td><td>禁止使用  <code>new</code>  以避免产生副作用</td></tr><tr><td>no-new-func</td><td>禁止对  <code>Function</code>  对象使用  <code>new</code>  操作符</td></tr><tr><td>no-new-wrappers</td><td>禁止对  <code>String</code>，<code>Number</code>  和  <code>Boolean</code>  使用  <code>new</code>  操作符</td></tr><tr><td>no-octal</td><td>禁用八进制字面量</td></tr><tr><td>no-octal-escape</td><td>禁止在字符串中使用八进制转义序列</td></tr><tr><td>no-param-reassign</td><td>禁止对  <code>function</code>  的参数进行重新赋值</td></tr><tr><td>no-proto</td><td>禁用  <code>__proto__</code>  属性</td></tr><tr><td>no-redeclare</td><td>禁止多次声明同一变量</td></tr><tr><td>no-restricted-properties</td><td>禁止使用对象的某些属性</td></tr><tr><td>no-return-assign</td><td>禁止在  <code>return</code>  语句中使用赋值语句</td></tr><tr><td>no-return-await</td><td>禁用不必要的  <code>return await</code></td></tr><tr><td>no-script-url</td><td>禁止使用  <code>javascript:</code> url</td></tr><tr><td>no-self-assign</td><td>禁止自我赋值</td></tr><tr><td>no-self-compare</td><td>禁止自身比较</td></tr><tr><td>no-sequences</td><td>禁用逗号操作符</td></tr><tr><td>no-throw-literal</td><td>禁止抛出异常字面量</td></tr><tr><td>no-unmodified-loop-condition</td><td>禁用一成不变的循环条件</td></tr><tr><td>no-unused-expressions</td><td>禁止出现未使用过的表达式</td></tr><tr><td>no-unused-labels</td><td>禁用出现未使用过的标</td></tr><tr><td>no-useless-call</td><td>禁止不必要的  <code>.call()</code>  和  <code>.apply()</code></td></tr><tr><td>no-useless-escape</td><td>禁用不必要的转义字符</td></tr><tr><td>no-useless-return</td><td>禁止多余的 return 语句</td></tr><tr><td>no-void</td><td>禁用  <code>void</code>  操作符</td></tr><tr><td>no-warning-comments</td><td>禁止在注释中使用特定的警告术语</td></tr><tr><td>no-with</td><td>禁用  <code>with</code>  语句</td></tr><tr><td>prefer-promise-reject-errors</td><td>要求使用 Error 对象作为 Promise 拒绝的原因</td></tr><tr><td>radix</td><td>强制在<code>parseInt()</code>使用基数参数</td></tr><tr><td>require-await</td><td>禁止使用不带  <code>await</code>  表达式的 async 函数</td></tr><tr><td>vars-on-top</td><td>要求所有的  <code>var</code>  声明出现在它们所在的作用域顶部</td></tr><tr><td>wrap-iife</td><td>要求 IIFE 使用括号括起来</td></tr><tr><td>yoda</td><td>要求或禁止 “Yoda” 条件</td></tr><tr><td>strict</td><td>要求或禁止使用严格模式指令</td></tr></tbody></table><p>变量声明有关的规则：</p><table><thead><tr><th>规则</th><th>解释</th></tr></thead><tbody><tr><td>init-declarations</td><td>要求或禁止  <code>var</code>  声明中的初始化</td></tr><tr><td>no-catch-shadow</td><td>禁止  <code>catch</code>  子句的参数与外层作用域中的变量同名</td></tr><tr><td>no-delete-var</td><td>禁止删除变量</td></tr><tr><td>no-label-var</td><td>不允许标签与变量同名</td></tr><tr><td>no-restricted-globals</td><td>禁用特定的全局变量</td></tr><tr><td>no-shadow</td><td>禁止变量声明与外层作用域的变量同名</td></tr><tr><td>no-shadow-restricted-names</td><td>禁止将标识符定义为受限的名字</td></tr><tr><td>no-undef</td><td>禁用未声明的变量，除非它们在  <code>/*global */</code>  注释中被提到</td></tr><tr><td>no-undef-init</td><td>禁止将变量初始化为  <code>undefined</code></td></tr><tr><td>no-undefined</td><td>禁止将  <code>undefined</code>  作为标识符</td></tr><tr><td>no-unused-vars</td><td>禁止出现未使用过的变量</td></tr><tr><td>no-use-before-define</td><td>禁止在变量定义之前使用它们</td></tr></tbody></table><p>关于 Node.js 规则的</p><table><thead><tr><th>规则</th><th>解释</th></tr></thead><tbody><tr><td>callback-return</td><td>强制数组方法回调函数中有 return 语句</td></tr><tr><td>global-require</td><td>要求<code>require()</code>出现在顶层模块作用域中</td></tr><tr><td>handle-callback-err</td><td>要求回调函数中有错误处理</td></tr><tr><td>no-buffer-constructor</td><td>禁用 <code>Buffer()</code> 构造函数</td></tr><tr><td>no-mixed-requires</td><td>禁止混合常规变量声明和<code>require</code>调用</td></tr><tr><td>no-new-require</td><td>禁止调用<code>require</code> 时 使用 <code>new</code> 操作符</td></tr><tr><td>no-path-concat</td><td>禁止对  <code>__dirname</code>  和  <code>__filename</code>  进行字符串连接</td></tr><tr><td>no-process-env</td><td>禁用  <code>process.env</code></td></tr><tr><td>no-process-exit</td><td>禁用  <code>process.exit()</code></td></tr><tr><td>no-restricted-modules</td><td>禁用通过  <code>require</code>  加载的指定模块</td></tr><tr><td>no-sync</td><td>禁用同步方法</td></tr></tbody></table><p>关于代码编写风格的：</p><table><thead><tr><th>规则</th><th>解释</th></tr></thead><tbody><tr><td>array-bracket-newline</td><td>在数组开括号后和闭括号前强制换行</td></tr><tr><td>array-bracket-spacing</td><td>强制数组方括号中使用一致的空格</td></tr><tr><td>array-element-newline</td><td>强制数组元素间出现换行</td></tr><tr><td>block-spacing</td><td>禁止或强制在代码块中开括号前和闭括号后有空格</td></tr><tr><td>brace-style</td><td>强制在代码块中使用一致的大括号风格</td></tr><tr><td>camelcase</td><td>强制使用骆驼拼写法命名约定</td></tr><tr><td>capitalized-comments</td><td>强制或禁止对注释的第一个字母大写</td></tr><tr><td>comma-dangle</td><td>要求或禁止末尾有逗号</td></tr><tr><td>comma-spacing</td><td>强制在逗号前后使用一致的空格</td></tr><tr><td>comma-style</td><td>强制使用一致的逗号风格</td></tr><tr><td>computed-property-spacing</td><td>强制在计算的属性的方括号中使用一致的空格</td></tr><tr><td>consistent-this</td><td>当获取当前执行环境的上下文时，强制使用一致的命名</td></tr><tr><td>eol-last</td><td>要求或禁止文件末尾存在空行</td></tr><tr><td>func-call-sapcing</td><td>要求或禁止在函数标识符和其调用之间有空格</td></tr><tr><td>func-names</td><td>要求或禁止使用命名的  <code>function</code>  表达式</td></tr><tr><td>func-name-matching</td><td>要求函数名与赋值给它们的变量名或属性名相匹配</td></tr><tr><td>func-style</td><td>强制一致地使用  <code>function</code>  声明或表达式</td></tr><tr><td>function-paren-newline</td><td>强制在函数括号内使用一致的换行</td></tr><tr><td>id-blacklist</td><td>禁用指定的标识符</td></tr><tr><td>id-length</td><td>强制标识符的最小和最大长度</td></tr><tr><td>id-match</td><td>要求标识符匹配一个指定的正则表达式</td></tr><tr><td>implicit-arrow-linebreak</td><td>强制隐式返回的箭头函数体的位置</td></tr><tr><td>indent</td><td>强制使用一致的缩进</td></tr><tr><td>jsx-quotes</td><td>强制在 JSX 属性中一致地使用双引号或单引号</td></tr><tr><td>key-spacing</td><td>强制在对象字面量的属性中键和值之间使用一致的间距</td></tr><tr><td>keyword-spacing</td><td>强制在关键字前后使用一致的空格</td></tr><tr><td>line-comment-position</td><td>强制行注释的位置</td></tr><tr><td>linebreak-style</td><td>强制使用一致的换行风格</td></tr><tr><td>lines-around-comment</td><td>要求在注释周围有空行</td></tr><tr><td>lines-between-class-members</td><td>要求或禁止类成员之间出现空行</td></tr><tr><td>max-depth</td><td>强制可嵌套的块的最大深度</td></tr><tr><td>max-len</td><td>强制一行的最大长度</td></tr><tr><td>max-lines</td><td>强制最大行数</td></tr><tr><td>max-nested-callbacks</td><td>强制回调函数最大嵌套深度</td></tr><tr><td>max-params</td><td>强制函数定义中最多允许的参数数量</td></tr><tr><td>max-statements</td><td>强制函数块最多允许的的语句数量</td></tr><tr><td>max-statements-per-line</td><td>强制每一行中所允许的最大语句数量</td></tr><tr><td>multiline-comment-style</td><td>强制对多行注释使用特定风格</td></tr><tr><td>multiline-ternary</td><td>要求或禁止在三元操作数中间换行</td></tr><tr><td>new-cap</td><td>要求构造函数首字母大写</td></tr><tr><td>new-parens</td><td>要求调用无参构造函数时有圆括号</td></tr><tr><td>newline-per-cahined-call</td><td>要求方法链中每个调用都有一个换行符</td></tr><tr><td>no-array-constructor</td><td>禁用  <code>Array</code>  构造函数</td></tr><tr><td>no-bitwise</td><td>禁用按位运算符</td></tr><tr><td>no-continue</td><td>禁用  <code>continue</code>  语句</td></tr><tr><td>no-inline-comments</td><td>禁止在代码后使用内联注释</td></tr><tr><td>no-lonely-if</td><td>禁止  <code>if</code>  作为唯一的语句出现在  <code>else</code>  语句中</td></tr><tr><td>no-mixed-operators</td><td>禁止混合使用不同的操作符</td></tr><tr><td>no-mixed-spaces-and-tabs</td><td>禁止空格和 tab 的混合缩进</td></tr><tr><td>no-multi-assign</td><td>禁止连续赋值</td></tr><tr><td>no-multiple-empty-lines</td><td>禁止出现多行空行</td></tr><tr><td>no-negated-condition</td><td>禁用否定的表达式</td></tr><tr><td>no-nested-ternary</td><td>禁用嵌套的三元表达式</td></tr><tr><td>no-new-object</td><td>禁用 Object 的构造函数</td></tr><tr><td>no-plusplus</td><td>禁用一元操作符 ++ 和 –</td></tr><tr><td>no-restricted-syntax</td><td>禁用特定的语法</td></tr><tr><td>no-tabs</td><td>禁用 tab</td></tr><tr><td>no-ternary</td><td>禁用三元操作符</td></tr><tr><td>no-trailing-spaces</td><td>禁用行尾空格</td></tr><tr><td>no-underscore-dangle</td><td>禁止标识符中有悬空下划线</td></tr><tr><td>no-unneeded-ternary</td><td>禁止可以在有更简单的可替代的表达式时使用三元操作符</td></tr><tr><td>no-whitespace-before-property</td><td>禁止属性前有空白</td></tr><tr><td>nonblock-statement-body-position</td><td>强制单个语句的位置</td></tr><tr><td>object-curly-newline</td><td>强制大括号内换行符的一致性</td></tr><tr><td>object-curly-spacing</td><td>强制在大括号中使用一致的空格</td></tr><tr><td>object-property-newline</td><td>强制将对象的属性放在不同的行上</td></tr><tr><td>one-var</td><td>强制函数中的变量要么一起声明要么分开声明</td></tr><tr><td>one-var-declaration-per-line</td><td>要求或禁止在变量声明周围换行</td></tr><tr><td>operator-assignment</td><td>要求或禁止在可能的情况下使用简化的赋值操作符</td></tr><tr><td>operator-linebreak</td><td>强制操作符使用一致的换行符</td></tr><tr><td>padded-blocks</td><td>要求或禁止块内填充</td></tr><tr><td>padding-line-between-statements</td><td>要求或禁止在语句间填充空行</td></tr><tr><td>quote-props</td><td>要求或禁止在语句间填充空行</td></tr><tr><td>quotes</td><td>强制使用一致的反勾号、双引号或单引号</td></tr><tr><td>require-jsdoc</td><td>要求使用 JSDoc 注释</td></tr><tr><td>semi</td><td>要求或禁止使用分号代替 ASI</td></tr><tr><td>semi-spacing</td><td>强制分号之前和之后使用一致的空格</td></tr><tr><td>semi-style</td><td>强制分号的位置</td></tr><tr><td>sort-keys</td><td>要求对象属性按序排列</td></tr><tr><td>sort-vars</td><td>要求同一个声明块中的变量按顺序排列</td></tr><tr><td>space-before-blocks</td><td>强制在块之前使用一致的空格</td></tr><tr><td>space-before-function-paren</td><td>强制在 function 的左括号之前使用一致的空格</td></tr><tr><td>space-in-parens</td><td>强制在圆括号内使用一致的空格</td></tr><tr><td>space-infix-ops</td><td>要求操作符周围有空格</td></tr><tr><td>space-unary-ops</td><td>强制在一元操作符前后使用一致的空格</td></tr><tr><td>spaced-comment</td><td>强制在注释中 // 或 /* 使用一致的空格</td></tr><tr><td>switch-colon-spacing</td><td>强制在 switch 的冒号左右有空格</td></tr><tr><td>template-tag-spacing</td><td>要求或禁止在模板标记和它们的字面量之间有空格</td></tr><tr><td>unicode-bom</td><td>要求或禁止 Unicode 字节顺序标记 (BOM)</td></tr><tr><td>wrap-regex</td><td>要求正则表达式被括号括起来</td></tr></tbody></table><p>ES6 规则：</p><table><thead><tr><th>规则</th><th>解释</th></tr></thead><tbody><tr><td>arrow-body-style</td><td>要求箭头函数体使用大括号</td></tr><tr><td>arrow-parens</td><td>要求箭头函数的参数使用圆括号</td></tr><tr><td>arrow-spacing</td><td>强制箭头函数的箭头前后使用一致的空格</td></tr><tr><td>constructor-super</td><td>要求在构造函数中有 super() 的调用</td></tr><tr><td>generator-star-spacing</td><td>强制 generator 函数中 * 号周围使用一致的空格</td></tr><tr><td>no-class-assign</td><td>禁止修改类声明的变量</td></tr><tr><td>no-confusing-arrow</td><td>禁止在可能与比较操作符相混淆的地方使用箭头函数</td></tr><tr><td>no-const-assign</td><td>禁止修改 const 声明的变量</td></tr><tr><td>no-dupe-class-members</td><td>禁止类成员中出现重复的名称</td></tr><tr><td>no-duplicate-imports</td><td>禁止重复模块导入</td></tr><tr><td>no-new-symbol</td><td>禁止 Symbolnew 操作符和 new 一起使用</td></tr><tr><td>no-restricted-imports</td><td>禁止使用指定的 import 加载的模块</td></tr><tr><td>no-this-before-super</td><td>禁止在构造函数中，在调用 super() 之前使用 this 或 super</td></tr><tr><td>no-useless-computed-key</td><td>禁止在对象中使用不必要的计算属性</td></tr><tr><td>no-useless-constructor</td><td>禁用不必要的构造函数</td></tr><tr><td>no-useless-rename</td><td>禁止在 import 和 export 和解构赋值时将引用重命名为相同的名字</td></tr><tr><td>no-var</td><td>要求使用 let 或 const 而不是 var</td></tr><tr><td>object-shorthand</td><td>要求或禁止对象字面量中方法和属性使用简写语法</td></tr><tr><td>prefer-arrow-callback</td><td>要求回调函数使用箭头函数</td></tr><tr><td>prefer-const</td><td>要求使用 const 声明那些声明后不再被修改的变量</td></tr><tr><td>prefer-destructuring</td><td>优先使用数组和对象解构</td></tr><tr><td>prefer-numeric-literals</td><td>禁用 parseInt() 和 Number.parseInt()，使用二进制，八进制和十六进制字面量</td></tr><tr><td>prefer-rest-params</td><td>要求使用剩余参数而不是 arguments</td></tr><tr><td>prefer-spread</td><td>要求使用扩展运算符而非 .apply()</td></tr><tr><td>prefer-template</td><td>要求使用模板字面量而非字符串连接</td></tr><tr><td>require-yield</td><td>要求 generator 函数内有 yield</td></tr><tr><td>rest-spread-spacing</td><td>强制剩余和扩展运算符及其表达式之间有空格</td></tr><tr><td>sort-imports</td><td>强制模块内的 import 排序</td></tr><tr><td>symbol-description</td><td>要求 symbol 描述</td></tr><tr><td>template-curly-spacing</td><td>要求或禁止模板字符串中的嵌入表达式周围空格的使用</td></tr><tr><td>yield-star-spacing</td><td>强制在 yield<em> 表达式中 </em> 周围使用空格</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;eslint 可以帮助进行我们检查代码，使我们的代码写的整洁，高效，在这里总结一篇关于 eslint 配置的一些事项，一些规则持续更新。&lt;/p&gt;
&lt;p&gt;eslint 的配置文件放在根目录中，新建&lt;code&gt;.eslintrc.js&lt;/code&gt;文件，然后开始配置，一般常见的配置如下:&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://www.tiankai.party/categories/webpack/"/>
    
    
      <category term="eslint" scheme="http://www.tiankai.party/tags/eslint/"/>
    
      <category term="webpack" scheme="http://www.tiankai.party/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>react16 生命周期</title>
    <link href="http://www.tiankai.party/posts/5777/"/>
    <id>http://www.tiankai.party/posts/5777/</id>
    <published>2018-08-14T07:34:00.000Z</published>
    <updated>2019-01-02T03:38:35.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>react16 移除的生命周期</p><a id="more"></a><ul><li><p>componentWillMount</p></li><li><p>componentWillReceiveProps</p></li><li><p>componentWillUpdate</p></li></ul><p>react16 新的生命周期</p><ul><li><p>getDerivedStateFromProps</p></li><li><p>getSnapshotBeforeUpdate</p></li></ul><p>整体生命周期流程图：<br><img src="/../images/react16.png" alt="react16"></p><p>完整的生命周期流程（按顺序）</p><h3>组件进入挂载阶段（Mounting）</h3><p>调用的函数顺序</p><ul><li>constructor</li><li>getDerivedStateFromProps</li><li>render</li><li>componentDidMount</li></ul><blockquote><p>constructor</p></blockquote><p>组件的构造函数可以在这里进行 state 初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isLoading: <span class="literal">false</span>,</span><br><span class="line">      goods: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getDerivedStateFromProps</p></blockquote><p><code>static getDerivedStateFromProps(nextProps, prevState)</code></p><p>构造函数初始化后进入该生命周期，取代原先的 <code>componentWillReceiveProps</code></p><ul><li>不能在该函数中使用 <code>this</code></li><li>接收新的<code>props</code>，然后决定是否更新 旧的 <code>state</code></li><li>函数会返回一个对象用来更新当前的<code>state</code>状态，如果不需要可以返回 <code>null</code></li></ul><p>调用时机：</p><ul><li>组件挂载时</li><li>接收到新的 props 时</li><li>调用了 setState 和 forceUpdate 时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isLoading: <span class="literal">true</span>,</span><br><span class="line">      goods: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextProps.goods !== prevState.goods) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        isLoading: <span class="literal">false</span>,</span><br><span class="line">        goods: nextProps.goods</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>render</p></blockquote><p>render 方法 返回组件要渲染的东西</p><blockquote><p>componentDidMount</p></blockquote><p>组件装载后调用，可以在这里请求数据，操作 DOM 节点。</p><h3 id="更新阶段（Update）"><a href="#更新阶段（Update）" class="headerlink" title="更新阶段（Update）"></a>更新阶段（Update）</h3><p><code>更新阶段生命周期函数调用：</code></p><ul><li>getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li>render</li><li>getSnapshotBeforeUpdate</li><li>componentDidUpdate</li></ul><blockquote><p>getDerivedStateFromProps</p></blockquote><p><code>static getDerivedStateFromProps(nextProps, prevState)</code><br>当组件的 props 改变，或者组件内部调用了 setState 或者 forceUpdate 会发生</p><blockquote><p>shouldComponentUpdate</p></blockquote><p><code>shouldComponentUpdate(nextProps, nextState)</code></p><p>在组件 触发 render 之前都会调用这个函数 返回一个布尔值，如果返回 true 组件触发 render 渲染，返回 false 组件不触发 render 函数，默认返回 true，所以我们需要在函数中 比较 <code>this.props</code> 和 <code>nextProps</code> 以及 <code>this.state</code> 和 <code>nextState</code> 来决定是否需要 触发 render 函数渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isLoading: <span class="literal">true</span>,</span><br><span class="line">      goods: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.goods.length !== nextState.goods.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方推荐的是组件继承 <code>PureComponent</code> 来减少组件重复渲染的次数，而不是开发者自己手工书写。<code>PureComponent</code> 是官方提供的，在内部对 props 和 state 进行了 一层浅比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isLoading: <span class="literal">true</span>,</span><br><span class="line">      goods: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>render</p></blockquote><p>根据 <code>shouldComponentUpdate</code> 返回的值 是否觉得需要调用 render 渲染</p><blockquote><p>getSnapshotBeforeUpdate</p></blockquote><p><code>getSnapshotBeforeUpdate(prevProps, prevState)</code></p><p>这个方法在 render 之后，<code>componentDidUpdate</code> 之前调用，有两个参数 prevProps 和 prevState，表示之前的属性和之前的 state，这个函数有一个返回值，会作为第三个参数传给 <code>componentDidUpdate</code>，如果你不想要返回值，请返回 null，不写的话控制台会有警告</p><p>还有这个方法一定要和 <code>componentDidUpdate</code> 一起使用，否则控制台也会有警告</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      messages: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handleMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.interval = <span class="built_in">window</span>.setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state.messages.length &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.handleMessage();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.rootNode.scrollHeight;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollTop = <span class="keyword">this</span>.rootNode.scrollTop;</span><br><span class="line">    <span class="keyword">if</span> (scrollTop &lt; <span class="number">5</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">this</span>.rootNode.scrollTop =</span><br><span class="line">      scrollTop + (<span class="keyword">this</span>.rootNode.scrollHeight - snapshot);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnMount() &#123;</span><br><span class="line">    windows.clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">  &#125;</span><br><span class="line">  handleMessage() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prev</span> =&gt;</span> (&#123;</span><br><span class="line">      message: [<span class="string">`msg <span class="subst">$&#123;prev.messages.length&#125;</span>`</span>, ...prev.messages]</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;n =&gt; (<span class="keyword">this</span>.listRef = n)&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.message.map(<span class="function">(<span class="params">msg, idx</span>) =&gt;</span> (</span><br><span class="line">          &lt;div key=&#123;idx&#125;&gt;&#123;msg&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        ))&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>componentDidUpdate</p></blockquote><p><code>componentDidUpdate(prevProps, prevState, snapshot)</code></p><p>该方法在<code>getSnapshotBeforeUpdate</code>方法之后被调用，有三个参数<code>prevProps</code>，<code>prevState</code>，<code>snapshot</code>，表示之前的 props，之前的 state，和 snapshot。第三个参数是<code>getSnapshotBeforeUpdate</code>返回的，在这个函数里我们可以操作 DOM，和发起服务器请求，还可以<code>setState</code>，但是注意一定要用 if 语句控制，否则会导致无限循环</p><h3 id="卸载阶段（UnMount）"><a href="#卸载阶段（UnMount）" class="headerlink" title="卸载阶段（UnMount）"></a>卸载阶段（UnMount）</h3><p>组件卸载的时候只有一个生命周期函数</p><blockquote><p>componentWillUnmount</p></blockquote><p>当我们的组件被卸载或者销毁了就会调用，我们可以在这个函数里去清除一些定时器，取消网络请求，清理无效的 DOM 元素等垃圾清理工作</p><p>注意不要在这个函数里去调用 setState，因为组件不会重新渲染了</p><h3 id="错误收集"><a href="#错误收集" class="headerlink" title="错误收集"></a>错误收集</h3><p>在 react16 之前，如果代码报错时候，会直接出现红屏，react16 之后可以直接使用这个函数来收集错误设置错误显示时的<code>state</code>，这样在界面上就不会出现红屏,但是这里有个问题，就是在捕获到错误的瞬间，React 会在这次渲染周期中将这个组件渲染为<code>null</code></p><blockquote><p>componentDidCatch</p></blockquote><p>`componentDidCatch(error, info)</p><blockquote><p>getDerivedStateFromError</p></blockquote><p>为解决上述问题，react 在 16.6 版本新增了一个生命周期函数<br>这个方法跟<code>getDerivedStateFromProps</code>类似，唯一的区别是他只有在出现错误的时候才触发，他相对于<code>componentDidCatch</code>的优势是在当前的渲染周期中就可以修改<code>state</code>，以在当前渲染就可以出现错误的 UI，而不需要一个 null 的中间态。<br>而这个方法的出现，也意味着以后出现错误的时候，修改<code>state</code>展现错误时界面的状态应该放在这里去做，而后续收集错误信息之类的放到<code>componentDidCatch</code>里面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react16 移除的生命周期&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-redux脚手架搭建问题总结</title>
    <link href="http://www.tiankai.party/posts/34080/"/>
    <id>http://www.tiankai.party/posts/34080/</id>
    <published>2018-07-23T08:27:00.000Z</published>
    <updated>2019-01-02T03:56:11.663Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>先列举功能点：</p><ol><li>react 热更新 react-hot-loader</li><li>css 提取</li><li>webpack4 的 splitcommonchunk</li><li>react-router-dom 和 redux 整合</li><li>redux-saga</li><li>react-router 动态配置 react-loadable</li><li>react-router-config 静态路由</li><li>sass/less</li><li>重复渲染问题处理</li><li>webpack 打包第三方库</li></ol><a id="more"></a><h5 id="babel-配置"><a href="#babel-配置" class="headerlink" title="babel 配置"></a>babel 配置</h5><figure class="highlight javascript"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>:[</span><br><span class="line">  <span class="string">"react"</span>,</span><br><span class="line">  [<span class="string">"env"</span>, &#123;</span><br><span class="line">  <span class="string">"targets"</span>: &#123;</span><br><span class="line">    <span class="string">"browsers"</span>: [<span class="string">"last 2 versions"</span>, <span class="string">"safari &gt;= 7"</span>],</span><br><span class="line">    <span class="string">"node"</span>: <span class="string">"current"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"modules"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"include"</span>: [</span><br><span class="line">    <span class="string">"transform-es2015-arrow-functions"</span>, <span class="comment">//箭头函数</span></span><br><span class="line">    <span class="string">"transform-es2015-spread"</span> <span class="comment">//扩展运算符</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"exclude"</span>: [],</span><br><span class="line">  <span class="string">"useBuiltIns"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>:[</span><br><span class="line">  [<span class="string">"transform-runtime"</span>, &#123;</span><br><span class="line">    <span class="string">"helpers"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"polyfill"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"regenerator"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"moduleName"</span>: <span class="string">"babel-runtime"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  [<span class="string">"transform-object-rest-spread"</span>, &#123;<span class="string">"useBuiltIns"</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">  <span class="string">"syntax-dynamic-import"</span> <span class="comment">// import() 函数</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="resolve-配置"><a href="#resolve-配置" class="headerlink" title="resolve 配置"></a>resolve 配置</h5><p>在文件中可以直接使用 <code>src</code> 关键字 来引入文件</p><figure class="highlight javascript"><figcaption><span>webpack.common.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">      <span class="keyword">static</span>: Path(<span class="string">'../static'</span>),</span><br><span class="line">      src: Path(<span class="string">'../src'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Path</code>是自己封装的</p><figure class="highlight javascript"><figcaption><span>webpack.common.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Path = <span class="function">(<span class="params">filePath</span>) =&gt;</span> path.join(path.resolve(\_\_dirname,filePath));</span><br></pre></td></tr></table></figure><h5 id="react-hot-loader"><a href="#react-hot-loader" class="headerlink" title="react-hot-loader"></a>react-hot-loader</h5><p>热更新使用的是 <code>react-hot-loader</code> 这个插件，可以在不刷新 state 的时候，刷新页面<br>入口文件配置：</p><figure class="highlight javascript"><figcaption><span>webpack.dev.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    index: [</span><br><span class="line">        <span class="string">`webpack-dev-server/client?http://localhost:<span class="subst">$&#123;AppPort&#125;</span>`</span>,</span><br><span class="line">        <span class="string">'webpack/hot/only-dev-server'</span>,</span><br><span class="line">        <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">        <span class="string">'babel-polyfill'</span>,</span><br><span class="line">        Path(<span class="string">'../src/main.js'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>transform-runtime</code> 只会对 es6 的语法进行转换，而不会对新 api(Set、Maps 等)进行转换。如果需要转换新 api，就要引入<code>babel-polyfill</code></p><h5 id="为什么需要引入-babel-runtime"><a href="#为什么需要引入-babel-runtime" class="headerlink" title="为什么需要引入 babel-runtime ?"></a>为什么需要引入 babel-runtime ?</h5><p><code>babel-polyfill</code> 通过帮助函数(helper) 实现 es6 功能后，会重复出现在一些模块里，导致编译后的代码体积变大。Babel 为了解决这个问题，提供了单独的包 <code>babel-runtime</code> 供编译模块复用工具函数。这时候就需要使用 <code>transform-runtime</code>：启用 <code>babel-runtime</code>，以避免编译输出的重复问题</p><h6 id="热更新还需俩个插件"><a href="#热更新还需俩个插件" class="headerlink" title="热更新还需俩个插件"></a>热更新还需俩个插件</h6><figure class="highlight javascript"><figcaption><span>webpack.dev.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示 模块的 相对路径</span></span><br><span class="line"><span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line"><span class="comment">// 浏览器 刷新</span></span><br><span class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br></pre></td></tr></table></figure><h5 id="代码分割配置"><a href="#代码分割配置" class="headerlink" title="代码分割配置"></a>代码分割配置</h5><figure class="highlight javascript"><figcaption><span>webpack.dev.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  minimize: <span class="literal">false</span>,</span><br><span class="line">  runtimeChunk: <span class="literal">true</span>,</span><br><span class="line">  mergeDuplicateChunks: <span class="literal">true</span>,</span><br><span class="line">  removeEmptyChunks: <span class="literal">true</span>,</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">'async'</span>,</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">      commons: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          name: <span class="string">"vendor"</span>,</span><br><span class="line">          chunks: <span class="string">"all"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个暂定这个配置，后期优化后，会更新上来</p><h5 id="HthmlWebpackPlugin"><a href="#HthmlWebpackPlugin" class="headerlink" title="HthmlWebpackPlugin"></a>HthmlWebpackPlugin</h5><p>插入 js 使用 assetHtmlPlugin</p><figure class="highlight javascript"><figcaption><span>webpack.dev.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  title: <span class="string">'React-Redux-App'</span>,</span><br><span class="line">  inject: <span class="literal">true</span>,</span><br><span class="line">  template: Path(<span class="string">'../static/tpl.html'</span>),</span><br><span class="line">  chunksSortMode: <span class="string">'none'</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> AddAssetHtmlPlugin([</span><br><span class="line">  &#123;</span><br><span class="line">    filepath: Path(<span class="string">'../static/js/vendors_lib.js'</span>),</span><br><span class="line">    includeSourcemap: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    filepath: Path(<span class="string">'../build/\*.js'</span>),</span><br><span class="line">    includeSourcemap: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">]),</span><br></pre></td></tr></table></figure><h5 id="webpack-dll-config-js"><a href="#webpack-dll-config-js" class="headerlink" title="webpack.dll.config.js"></a>webpack.dll.config.js</h5><p>打包第三方公共的库</p><p>webpack.dev.js</p><figure class="highlight javascript"><figcaption><span>webpack.dev.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- tab js --&gt;</span><br><span class="line"><span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      context: __dirname,</span><br><span class="line">      manifest: <span class="built_in">require</span>(path.resolve(__dirname, <span class="string">'../static/vendors-manifest.json'</span>))</span><br><span class="line">  &#125;),</span><br><span class="line">&lt;!-- endtab --&gt;</span><br></pre></td></tr></table></figure><p>webpack.dll.config.js</p><figure class="highlight javascript"><figcaption><span>webpack.dll.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">  vendors: [</span><br><span class="line">    <span class="string">'react'</span>,</span><br><span class="line">    <span class="string">'react-dom'</span>,</span><br><span class="line">    <span class="string">'react-router-dom'</span>,</span><br><span class="line">    <span class="string">'redux'</span>,</span><br><span class="line">    <span class="string">'react-redux'</span></span><br><span class="line">  ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename: <span class="string">'[name]\_lib.js'</span>,</span><br><span class="line">    path: path.resolve(**dirname, <span class="string">'../static/js'</span>),</span><br><span class="line">    library: <span class="string">'[name]\_lib'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      context: **dirname,</span><br><span class="line">      path: path.resolve(\_\_dirname,<span class="string">'../static/[name]-manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]\_lib'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">      parallel: <span class="literal">true</span>,</span><br><span class="line">      sourceMap: <span class="literal">true</span>,</span><br><span class="line">      uglifyOptions: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">        output: &#123;</span><br><span class="line">          comments: <span class="literal">false</span>,</span><br><span class="line">          beautify: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        compress: &#123;</span><br><span class="line">          warnings: <span class="literal">false</span>,</span><br><span class="line">          drop_console: <span class="literal">true</span>,</span><br><span class="line">          collapse_vars: <span class="literal">true</span>,</span><br><span class="line">          reduce_vars: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>项目开始前 要先 运行一下 <code>webpack.dll.config.js</code></p><h5 id="生产配置"><a href="#生产配置" class="headerlink" title="生产配置"></a>生产配置</h5><p>css 压缩:<br>loaders</p><figure class="highlight javascript"><figcaption><span>webpack.pro.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            MiniCssExtractPlugin.loader,</span><br><span class="line">            <span class="string">'css-loader'</span>,</span><br><span class="line">            <span class="string">'postcss-loader'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    test: <span class="regexp">/\.scss$/i</span>,</span><br><span class="line">    use: [</span><br><span class="line">      MiniCssExtractPlugin.loader,</span><br><span class="line">      <span class="string">'css-loader'</span>,</span><br><span class="line">      <span class="string">'postcss-loader'</span>,</span><br><span class="line">      <span class="string">'sass-loader'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">    use: [</span><br><span class="line">      MiniCssExtractPlugin.loader,</span><br><span class="line">      <span class="string">'css-loader'</span>,</span><br><span class="line">      <span class="string">'postcss-loader'</span>,</span><br><span class="line">      <span class="string">'less-loader'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>js 压缩：<br>plugins</p><figure class="highlight javascript"><figcaption><span>webpack.pro.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">    sourceMap: <span class="literal">true</span>,</span><br><span class="line">    test: <span class="regexp">/\.jsx?$/i</span>,</span><br><span class="line">    parallel: <span class="literal">true</span>, <span class="comment">//使用多进程并行和文件换成提高构建速度</span></span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    uglifyOptions: &#123;</span><br><span class="line">        nameCache: <span class="literal">true</span>,</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">        compress: &#123;</span><br><span class="line">            warnings: <span class="literal">false</span>,  <span class="comment">//删除无用代码时不输出警告</span></span><br><span class="line">            drop_console: <span class="literal">true</span>,  <span class="comment">//删除所有console语句，可以兼容IE</span></span><br><span class="line">            collapse_vars: <span class="literal">true</span>,  <span class="comment">//内嵌已定义但只使用一次的变量</span></span><br><span class="line">            reduce_vars: <span class="literal">true</span>,  <span class="comment">//提取使用多次但没定义的静态值到变量</span></span><br><span class="line">        &#125;,</span><br><span class="line">        output: &#123;</span><br><span class="line">            beautify: <span class="literal">false</span>, <span class="comment">//最紧凑的输出，不保留空格和制表符</span></span><br><span class="line">            comments: <span class="literal">false</span>, <span class="comment">//删除所有注释</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ie8: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">  filename: <span class="string">"[name].css"</span>,</span><br><span class="line">  chunkFilename: <span class="string">"[id].css"</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p><a href="https://github.com/tiakia/react-redux-app" target="_blank" rel="noopener">项目链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先列举功能点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;react 热更新 react-hot-loader&lt;/li&gt;
&lt;li&gt;css 提取&lt;/li&gt;
&lt;li&gt;webpack4 的 splitcommonchunk&lt;/li&gt;
&lt;li&gt;react-router-dom 和 redux 整合&lt;/li&gt;
&lt;li&gt;redux-saga&lt;/li&gt;
&lt;li&gt;react-router 动态配置 react-loadable&lt;/li&gt;
&lt;li&gt;react-router-config 静态路由&lt;/li&gt;
&lt;li&gt;sass/less&lt;/li&gt;
&lt;li&gt;重复渲染问题处理&lt;/li&gt;
&lt;li&gt;webpack 打包第三方库&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>谷歌云免费一年搭建梯子</title>
    <link href="http://www.tiankai.party/posts/55404/"/>
    <id>http://www.tiankai.party/posts/55404/</id>
    <published>2018-06-29T03:15:00.000Z</published>
    <updated>2019-01-02T06:10:03.917Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>谷歌云现在有活动，新注册的可以免费使用一年，之前同事使用这个搭建了一个梯子，可以访问国外的网站，我今天自己搭建了一下，遇到不少坑，在这里记录一下,有俩个先决条件</p><ul><li>信用卡</li><li>可以翻墙访问谷歌</li></ul><p>信用卡这个是谷歌必须要求的，在注册的时候就需要绑定，绑定成功会扣到 1 美元，过几天会退回来，就是验证一下信用卡是否可用。<br>翻墙这个问题可以使用蓝灯，也可以使用一个谷歌的扩展程序<code>谷歌访问助手</code>这个我在后面会给出链接，这个访问助手智能访问谷歌搜索和谷歌邮箱，其他的油管之类的就不行了。话不多说，紧接着开始教程。</p><a id="more"></a><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ul><li>首先注册一个谷歌账号</li><li>登录<a href="https://cloud.google.com/" target="_blank" rel="noopener">谷歌云</a></li><li>点击免费试用<br><img src="/../images/googlecloud1.png" alt="图片1"></li><li>然后就是同意谷歌服务条款</li><li>绑定信用卡号，填写个人信息,账号类型为 个人</li><li>进入页面后，点击左上角的面包屑导航</li><li><p>点击 Compute Engine - VM 实例 - 创建</p><ul><li>名称随意</li><li>地区选择 推荐 asia-east1-c 亚洲东部</li><li>机器类型选择最低的 微型</li><li>启动磁盘选择 Debian GUN/Linux 8 的操作系统</li><li>点击勾选 http 和 https</li><li><p>点击 管理、磁盘、网络、SSH 秘钥的 网络的 tab 选项卡，点击网络接口，外部 ip 选择新建一个静态 ip 名称随意，内部 ip 临时(自动) 一个地区静态 ip 只能创建一个<br><img src="/../images/googlecloud2.png" alt="图片2"></p><p><img src="/../images/googlecloud3.png" alt="图片3"></p><p><img src="/../images/googlecloud4.png" alt="图片4"></p><p><img src="/../images/googlecloud5.png" alt="图片5"></p></li></ul></li><li><p>点击创建<br><img src="/../images/googlecloud6.png" alt="图片6"></p></li><li>创建成功后，再点击 左上角 的面包屑导航</li><li><p>点击网络 VPC 网络 - 防火墙规则 - 创建防火墙规则 - 名字随意起（其他没有提及的默认） - 流量方向 入站 - 目标标记 http-server - ip 地址范围 0.0.0.0/0 - 协议和端口 全部允许 - 点击保存<br><img src="/../images/googlecloud7.png" alt="图片7"></p><p><img src="/../images/googlecloud8.png" alt="图片8"></p></li><li><p>同样的方法再新建一个，只是 目标标记 改为 https-server</p></li><li>顺带看一眼 外部 ip 是不是 静态的<br><img src="/../images/googlecloud9.png" alt="图片9"></li></ul><h2 id="安装-bbr-加速"><a href="#安装-bbr-加速" class="headerlink" title="安装 bbr 加速"></a>安装 bbr 加速</h2><ul><li>然后返回 VM 实例 - 点击 在浏览器打开 ssh - 然后 输入以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh &amp;&amp; bash bbr.sh install</span><br><span class="line"><span class="comment"># 如果出现蓝屏 选择 NO</span></span><br><span class="line"><span class="comment">#  需要重启 输入 y，关闭 重新打开一个ssh</span></span><br><span class="line">sudo -i</span><br><span class="line">bash bbr.sh start</span><br></pre></td></tr></table></figure><h2 id="安装-shadowsocksR"><a href="#安装-shadowsocksR" class="headerlink" title="安装 shadowsocksR"></a>安装 shadowsocksR</h2><blockquote><p>推荐俩个脚本 这是第一个</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; chmod +x shadowsocksR.sh</span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure><p>完成后会要求输入 密码 - 端口号 然后剩下的回车就好 这里我输入的密码是 123456 端口是 455<br><img src="/../images/googlecloud12.png" alt="图片12"><br>完成后会出现如下图<br><img src="/../images/googlecloud13.png" alt="图片13"></p><blockquote><p>推荐第二个脚本 这俩个脚本 任选一个安装即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://softs.fun/Bash/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></table></figure><p>然后按照提示操作</p><ul><li>安装脚本</li><li>设置 用户名 密码 端口号</li><li>加密方式 协议 和 混淆 推荐按下图的选择<br><img src="/../images/googlecloud14.png" alt="图片14"><br>最后完成后如下图<br><img src="/../images/googlecloud11.png" alt="图片11"></li><li>取得这个二维码的链接，粘贴到浏览器</li><li>打开客户端软件，在文末的分享链接里有</li><li><code>ShadowsocksR-dotnet4.0.exe</code> 我的是 win7 系统 ，点击这个.exe 后缀的文件</li><li>在任务栏中右键 二维码扫描 然后 就会自动 配置好 服务器的 端口号 ip 这些</li><li>然后 把其他的 服务器信息删了 只保留你自己的 服务器信息</li><li>系统代理模式 选择 全局模式</li><li>代理规则 选择 绕过局域网 和 大陆</li><li>然后 就可以 访问 被墙的网站了</li><li>注意 要把 谷歌访问助手屏蔽掉</li></ul><h2 id="客户端-windows-安装的软件"><a href="#客户端-windows-安装的软件" class="headerlink" title="客户端 windows 安装的软件"></a>客户端 windows 安装的软件</h2><p><a href="https://github.com/tiakia/-" target="_blank" rel="noopener">客户端软件和谷歌访问助手</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谷歌云现在有活动，新注册的可以免费使用一年，之前同事使用这个搭建了一个梯子，可以访问国外的网站，我今天自己搭建了一下，遇到不少坑，在这里记录一下,有俩个先决条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信用卡&lt;/li&gt;
&lt;li&gt;可以翻墙访问谷歌&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信用卡这个是谷歌必须要求的，在注册的时候就需要绑定，绑定成功会扣到 1 美元，过几天会退回来，就是验证一下信用卡是否可用。&lt;br&gt;翻墙这个问题可以使用蓝灯，也可以使用一个谷歌的扩展程序&lt;code&gt;谷歌访问助手&lt;/code&gt;这个我在后面会给出链接，这个访问助手智能访问谷歌搜索和谷歌邮箱，其他的油管之类的就不行了。话不多说，紧接着开始教程。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.tiankai.party/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.tiankai.party/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序支付流程梳理</title>
    <link href="http://www.tiankai.party/posts/55893/"/>
    <id>http://www.tiankai.party/posts/55893/</id>
    <published>2018-06-26T08:52:00.000Z</published>
    <updated>2019-01-02T06:18:46.813Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用 <code>thinkjs</code> 封装了个小程序支付的 <code>Service</code> 在这里记录一下，顺便梳理一下小程序支付的流程和思路。首先，先把官网的流程图放上来，然后按照图一步步的来。</p><a id="more"></a><p><img src="/../images/wxa-7-2.jpg" alt="微信小程序支付流程图"></p><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a><strong>第一步：</strong></h4><p>用户请求开发者后台，发起下单请求</p><ul><li>发起请求前在小程序端调用<code>wx.checkSession()</code>查看<code>session_key</code>是否过期<ul><li>如果过期了 重新调用 <code>wx.login()</code> 返回 <code>session_key</code>和<code>openid</code></li><li>如果没过期 继续下一步操作，请求开发者后台</li></ul></li></ul><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a><strong>第二步：</strong></h4><p>开发者查找一下数据库或者缓存里是否有 <code>openid</code> 和 <code>session_key</code></p><ul><li>如果有生成订单编号 <code>out_trade_no</code></li><li>如果没有返回错误消息，缺少<code>openid</code>、<code>session_key</code></li></ul><h4 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a><strong>第三步：</strong></h4><p>开发者服务器请求统一下单<code>API</code>,带上要求的参数：</p><ul><li>小程序的 <code>appid</code></li><li>商户号 <code>mch_id</code></li><li>随机字符串 <code>nonce_str</code>(下面会给出方法)</li><li>签名 <code>sign</code> （具体方法见下面）</li><li>商品描述 <code>body</code>(商品简单描述比如：短信平台-短信套餐充值)</li><li>商品订单号 <code>out_trade_no</code></li><li>标价金额 <code>total_fee</code></li><li>终端 IP <code>spbill_create_ip</code></li></ul><p><code>nonce_str</code>获取随机字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  功能： 返回32位随机字符串</span></span><br><span class="line"><span class="comment"> *  create by tiankai on 2018-06-25 15:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getNonceStr()&#123;</span><br><span class="line">    <span class="keyword">let</span> char = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> randomNum = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*char.length);</span><br><span class="line">        result += char[randomNum];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sign</code> 参数签名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  功能：sign 参数签名</span></span><br><span class="line"><span class="comment"> *  create by tiankai on 2018-06-26 12:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> makeSign(params, key)&#123;</span><br><span class="line">    <span class="comment">// 生成签名 sign</span></span><br><span class="line">    <span class="keyword">let</span> strOrderArr = <span class="built_in">Object</span>.keys(params).sort();</span><br><span class="line">    <span class="keyword">let</span> stringA = <span class="string">""</span>;</span><br><span class="line">    strOrderArr.map(<span class="function"><span class="params">val</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果参数值为空，或者验证返回的 sign 不参与签名</span></span><br><span class="line">        <span class="keyword">if</span>(</span><br><span class="line">            think.isNullOrUndefined(params[val]) ||</span><br><span class="line">            val === <span class="string">'sign'</span> ||</span><br><span class="line">            params[val].length === <span class="number">0</span></span><br><span class="line">        ) <span class="keyword">return</span>;</span><br><span class="line">        stringA += val + <span class="string">"="</span> + params[val] + <span class="string">"&amp;"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> stringSignTemp = stringA + <span class="string">"key="</span> + key;</span><br><span class="line">    <span class="keyword">let</span> sign = think.md5(stringSignTemp).toUpperCase();</span><br><span class="line">    <span class="keyword">return</span> sign;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用函数的方法,<code>key</code>为商户平台设置的密钥<code>key</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> signString = &#123;</span><br><span class="line">  appid: config.appid,</span><br><span class="line">  mch_id: config.mchid,</span><br><span class="line">  nonce_str: <span class="keyword">await</span> <span class="keyword">this</span>.getNonceStr(),</span><br><span class="line">  body: <span class="string">"短信平台-短信套餐购买"</span>,</span><br><span class="line">  out_trade_no: <span class="string">"20180926125346"</span>, <span class="comment">//订单号</span></span><br><span class="line">  total_fee: <span class="number">88</span>, <span class="comment">//订单金额</span></span><br><span class="line">  <span class="comment">//APP和网页支付提交用户端ip，Native支付填调用微信支付API的机器IP</span></span><br><span class="line">  <span class="comment">//需要自行获取，这里只是为了测试直接写上了</span></span><br><span class="line">  spbill_create_ip: <span class="string">"123.12.12.123"</span>,</span><br><span class="line">  notify_url: config.notify_url,</span><br><span class="line">  trade_type: <span class="string">"JSAPI"</span>,</span><br><span class="line">  openid: <span class="keyword">await</span> think.cache(<span class="string">"openId"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> sign = <span class="keyword">await</span> <span class="keyword">this</span>.makeSign(signString, config.key);</span><br></pre></td></tr></table></figure><p>得到这几个参数就开始发起请求统一下单 API 了，这里需要注意的是，请求参数应该以 <code>xml</code>的形式传送过去，这里借助一个工具<code>xml2js</code>把对象转换为 xml,也可以把 xml 转换为 对象、json。</p><p>安装 <code>xml2js</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i xml2js</span><br></pre></td></tr></table></figure><p>使用 <code>xml2js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xml2js = <span class="built_in">require</span>(<span class="string">"xml2js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//xml-&gt;json</span></span><br><span class="line"><span class="comment">//xml2js默认会把子子节点的值变为一个数组, explicitArray设置为false</span></span><br><span class="line"><span class="keyword">var</span> xmlParser = <span class="keyword">new</span> xml2js.Parser(&#123; <span class="attr">explicitArray</span>: <span class="literal">false</span>, <span class="attr">ignoreAttrs</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">//json-&gt;xml</span></span><br><span class="line"><span class="keyword">var</span> jsonBuilder = <span class="keyword">new</span> xml2js.Builder();</span><br></pre></td></tr></table></figure><p>请求参数转换为 xml</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  功能：获取统一下单 API 请求XML参数</span></span><br><span class="line"><span class="comment"> *  create by tiankai on 2018-06-25 15:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> getUnifiedOrderParams()&#123;</span><br><span class="line">    <span class="keyword">let</span> signString = &#123;</span><br><span class="line">        appid: config.appid,</span><br><span class="line">        mch_id: config.mchid,</span><br><span class="line">        nonce_str: <span class="keyword">await</span> <span class="keyword">this</span>.getNonceStr(),</span><br><span class="line">        body: <span class="string">'短信平台-短信套餐购买'</span>,</span><br><span class="line">        out_trade_no: <span class="string">'20180926125346'</span>,<span class="comment">//订单号</span></span><br><span class="line">        total_fee: <span class="number">88</span>,<span class="comment">//订单金额</span></span><br><span class="line">        <span class="comment">//APP和网页支付提交用户端ip，Native支付填调用微信支付API的机器IP</span></span><br><span class="line">        <span class="comment">//需要自行获取，这里只是为了测试直接写上了</span></span><br><span class="line">        spbill_create_ip: <span class="string">'123.12.12.123'</span>,</span><br><span class="line">        notify_url: config.notify_url,</span><br><span class="line">        trade_type: <span class="string">'JSAPI'</span>,</span><br><span class="line">        openid: <span class="keyword">await</span> think.cache(<span class="string">'openId'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sign = <span class="keyword">await</span> <span class="keyword">this</span>.makeSign(signString,config.key);</span><br><span class="line">    signString.sign = sign;</span><br><span class="line">    <span class="comment">/* console.log("--------------------------");</span></span><br><span class="line"><span class="comment">     * console.log(sign);</span></span><br><span class="line"><span class="comment">     * console.log("--------------------------"); */</span></span><br><span class="line">    <span class="keyword">let</span> xml = <span class="keyword">await</span> jsonBuilder.buildObject(signString);</span><br><span class="line">    <span class="comment">/* console.log(xml); */</span></span><br><span class="line">    <span class="keyword">return</span> xml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以发起统一下单 API 请求了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  功能：调用统一下单API接口</span></span><br><span class="line"><span class="comment"> *  create by tiankai on 2018-06-26 11:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> unifiedOrder()&#123;</span><br><span class="line">    <span class="keyword">let</span> xmlParams = <span class="keyword">await</span> <span class="keyword">this</span>.getUnifiedOrderParams();</span><br><span class="line">    <span class="keyword">let</span> unifiedOrderUrl = config.unifiedOrderUrl;</span><br><span class="line">    <span class="keyword">let</span> opt = &#123;</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        mode: <span class="string">'cors'</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'content-type'</span>: <span class="string">'text/xml'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        body: xmlParams</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.fetch(unifiedOrderUrl, opt);</span><br><span class="line">    <span class="comment">//这里微信返回的也是 xml</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> res.text();</span><br><span class="line">    <span class="keyword">let</span> data = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 微信返回的 XML 转换为 JSON</span></span><br><span class="line">    xmlParser.parseString(result,<span class="function"><span class="keyword">function</span>(<span class="params">err, jsonData</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">            <span class="comment">/* console.log(jsonData); */</span></span><br><span class="line">            data = jsonData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a><strong>第四步：</strong></h4><p>当请求成功时 判断一下 <code>return_code</code> 和 <code>result_code</code></p><ul><li>如果它们都等于 <code>SUCCESS</code> 的时候，微信会把我们需要的预支付订单信息<code>prepay_id</code>返回来，</li><li>否则返回 <code>return_msg</code> 给前端 展示具体错误</li></ul><h4 id="第五步："><a href="#第五步：" class="headerlink" title="第五步："></a><strong>第五步：</strong></h4><p>拿上<code>prepay_id</code>,进行再次签名，然后返回给前端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  功能：统一下单接口返回 prepay_id 再次签名 返回给前端</span></span><br><span class="line"><span class="comment"> *  create by tiankai on 2018-06-26 15:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> payParams()&#123;</span><br><span class="line">    <span class="keyword">let</span> signString = &#123;</span><br><span class="line">        appid: config.appid,</span><br><span class="line">        timeStamp: +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        nonce_str: <span class="keyword">await</span> <span class="keyword">this</span>.getNonceStr(),</span><br><span class="line">        package: <span class="literal">null</span>,</span><br><span class="line">        signType: <span class="string">'MD5'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用 统一下单 API</span></span><br><span class="line">    <span class="keyword">let</span> jsonData = <span class="keyword">await</span> <span class="keyword">this</span>.unifiedOrder();</span><br><span class="line">    <span class="keyword">if</span>(think.isNullOrUndefined(jsonData) &amp;&amp;</span><br><span class="line">       jsonData.xml.return_code === <span class="string">'SUCCESS'</span> &amp;&amp;</span><br><span class="line">       jsonData.xml.result_code === <span class="string">'SUCCESS'</span></span><br><span class="line">    )&#123;</span><br><span class="line">        signString.package = <span class="string">'perpay_id='</span>+jsonData.xml.perpay_id</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jsonData.xml.return_msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行再次签名</span></span><br><span class="line">    <span class="keyword">let</span> paySign = <span class="keyword">await</span> <span class="keyword">this</span>.makeSign(signString,config.key);</span><br><span class="line">    signString.paySign = paySign;</span><br><span class="line">    <span class="keyword">let</span> &#123; appid, signType, ...result &#125; = signString;</span><br><span class="line">    <span class="comment">// result 中不包括 appid 和 signType 返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第六步："><a href="#第六步：" class="headerlink" title="第六步："></a><strong>第六步：</strong></h4><p>用户确认支付后，小程序端调用支付接口，根据返回结果提示用户</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wx.requestPayment(&#123;</span><br><span class="line">  timeStamp: <span class="string">""</span>,</span><br><span class="line">  nonceStr: <span class="string">""</span>, <span class="comment">//后端返回的随机字符串</span></span><br><span class="line">  package: <span class="string">""</span>, <span class="comment">//后端返回的</span></span><br><span class="line">  signType: <span class="string">"MD5"</span>,</span><br><span class="line">  paySign: <span class="string">""</span>, <span class="comment">//后端返回的</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;&#125;,</span><br><span class="line">  fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="第七步："><a href="#第七步：" class="headerlink" title="第七步："></a><strong>第七步：</strong></h4><p>支付成功后，微信服务器会把支付结果返回给配置的<code>notify_url</code>，开发者根据支付结果，更新服务器的订单状态。</p><p>大体流程就是这，现在进行到了 <strong>第四步</strong> 公司小程序 <code>appid</code> 还没申请下来 商户号 <code>mch_id</code>也没有，等过段时间继续更新。（18/6/27）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 &lt;code&gt;thinkjs&lt;/code&gt; 封装了个小程序支付的 &lt;code&gt;Service&lt;/code&gt; 在这里记录一下，顺便梳理一下小程序支付的流程和思路。首先，先把官网的流程图放上来，然后按照图一步步的来。&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.tiankai.party/categories/nodejs/"/>
    
    
      <category term="thinkjs" scheme="http://www.tiankai.party/tags/thinkjs/"/>
    
      <category term="小程序" scheme="http://www.tiankai.party/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>nginx初见</title>
    <link href="http://www.tiankai.party/posts/40486/"/>
    <id>http://www.tiankai.party/posts/40486/</id>
    <published>2018-06-19T01:56:00.000Z</published>
    <updated>2019-01-02T06:22:17.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一次近距离的接触 <code>nginx</code>,今天先来了解一下 nginx 的俩个重要的功能 <code>反向代理</code>和<code>负载均衡</code></p><a id="more"></a><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>正向代理隐藏真实请求的客户端<br>一个经典的例子就是大陆访问谷歌被墙,我们可以在国外搭建一台代理服务器,让代理服务器帮你去请求谷歌,代理服务器再把请求的结果返回来,完成一个正向代理的过程.</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理隐藏真实的服务端<br>反向代理则正好相反,当我们从客户端请求 一个资源 的时候,背后可能有成千上万台服务器在为我们提供服务,反向代理服务器会将我们的请求转发到真实的服务器上面,至于这个服务器是哪个我们不知道,可以用反向代理来做负载均衡</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>当用户访问网站的时候，先访问一个中间服务器，再让这个中间服务器在服务器集群中选择一个压力较小的服务器，然后将该访问请求引入选择的服务器.这个中间服务器就是反向代理服务器<br>所以，用户每次访问，都会保证服务器集群中的每个服务器压力趋于平衡，分担了服务器压力，避免了服务器崩溃的情况<br>一句话：nginx 会给你分配服务器压力小的去访问</p><h3 id="windows-安装-nginx"><a href="#windows-安装-nginx" class="headerlink" title="windows 安装 nginx"></a>windows 安装 nginx</h3><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx 官网下载</a></p><ul><li>下载后,解压到文件目录</li><li>命令行进入该文件目录</li><li>运行<code>nginx</code>命令</li></ul><p>这个时候命令行没有任何显示,打开浏览器,输入<code>localhost:80</code>,然后就可以看到 nginx 的欢迎页面,一个简单的见面会.</p><h3 id="nginx-简单命令"><a href="#nginx-简单命令" class="headerlink" title="nginx 简单命令"></a>nginx 简单命令</h3><ul><li><code>nginx -v</code> 查看 nginx 的版本号</li><li><code>start nginx</code> 启动 nginx 服务</li><li><code>nginx -s reload</code> 重新启动服务</li><li><code>nginx -s stop</code> 停止 nginx 服务</li><li><code>nginx -s quit</code> 退出 nginx</li><li><code>nginx -t</code> 测试配置文件的有效性</li></ul><p>windows 上如果修改了配置文件需要先<code>nginx -s quit</code> 退出 nginx ,然后再 <code>nginx -s reload</code> ,然后再<code>start nginx</code>启动 nginx 服务</p><h3 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h3><p>找到 nginx 的配置文件<code>conf/nginx.conf</code></p><figure class="highlight nginx"><figcaption><span>conf/nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line"><span class="attribute">user</span> nobody;  <span class="comment"># nginx子进程运行的用户和用户组</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;  <span class="comment"># 开启一个 nginx 工作进程,一般 CPU 几核就写几</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;  <span class="comment"># 错误日志存放地址</span></span><br><span class="line"><span class="attribute">pid</span> logs/nginx.pid;  <span class="comment"># 主进程pid存放地址</span></span><br><span class="line"><span class="comment"># events 配置</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>; <span class="comment"># 一个进程能同时处理 1024 个请求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># HTTP 配置</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ...此处省略默认配置</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;  <span class="comment"># 监听本机上的 80 端口</span></span><br><span class="line">        <span class="attribute">server_name</span> localhost;  <span class="comment"># 域名 localhost</span></span><br><span class="line">        <span class="attribute">location</span> / &#123; <span class="comment"># 匹配路由</span></span><br><span class="line">            <span class="attribute">root</span> html; <span class="comment"># 站点根目录</span></span><br><span class="line">            <span class="attribute">index</span> index.html index.htm; <span class="comment"># 首页的配置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html; <span class="comment"># 错误页面的重定向</span></span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span> html;  <span class="comment"># 站点根目录文件夹</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h3><p>nginx 的反向代理主要通过<code>proxy_pass</code>来实现,比如说实现访问<code>localhost:80</code>然后反向代理到我的博客.进行以下的配置:</p><figure class="highlight nginx"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://www.tiankai.party;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新启动 nginx 服务,在浏览器输入 <code>localhost:80</code> 就发现被反向代理到了我的博客地址</p><h3 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h3><p>实现负载均衡就要用到这个模块了.</p><figure class="highlight nginx"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">upstream</span> www.tiankai.party &#123;</span><br><span class="line">     ip_hash;</span><br><span class="line">     <span class="attribute">server</span> tiankai1.example.com; <span class="comment"># 服务器的地址</span></span><br><span class="line">     <span class="attribute">server</span> tiankai2.example.com;</span><br><span class="line">     <span class="attribute">server</span> tiankai3.example.com;</span><br><span class="line">     <span class="attribute">server</span> tiankai4.example.com;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attribute">localtion</span> / &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span> http://www.tiankai.party</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户请求被反向代理到了<code>http://www.tiankai.party</code> 的时候,会对应的找到 名为 <code>www.tiankai.party</code> 的 <code>upstream</code> 的 四个 服务器,这样在访问<code>localhost:80</code>的时候,就会把请求代理到 这四个服务器上,实现负载均衡.</p><p><code>ip_hash</code>的作用: 是为了在用户访问后留下记号,这样下次用户再进行访问的时候直接访问上次分发的服务器地址就行了.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次近距离的接触 &lt;code&gt;nginx&lt;/code&gt;,今天先来了解一下 nginx 的俩个重要的功能 &lt;code&gt;反向代理&lt;/code&gt;和&lt;code&gt;负载均衡&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://www.tiankai.party/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://www.tiankai.party/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>thinkjs项目结构简析</title>
    <link href="http://www.tiankai.party/posts/42422/"/>
    <id>http://www.tiankai.party/posts/42422/</id>
    <published>2018-06-11T07:59:00.000Z</published>
    <updated>2019-01-02T07:31:12.408Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>thinkjs 项目整合了 koa2.x,兼容了 koa 的所有功能, 同时封装了一些功能,MVC 的架构让开发变的更简单,条理</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">├── development.js                        <span class="comment"># 开发环境启动配置文件</span></span><br><span class="line">├── nginx.conf                            <span class="comment"># NGINX 配置文件</span></span><br><span class="line">├── package.json</span><br><span class="line">├── pm2.json                              <span class="comment"># pm2 配置文件</span></span><br><span class="line">├── production.js                         <span class="comment"># 生产环境启动文件</span></span><br><span class="line">├── README.md</span><br><span class="line">├── releasenotes.txt</span><br><span class="line">├── runtime</span><br><span class="line">│   └── config</span><br><span class="line">│       └── development.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── apidoc.json</span><br><span class="line">│   ├── bootstrap</span><br><span class="line">│   │   ├── master.js                     <span class="comment"># master 进程</span></span><br><span class="line">│   │   └── worker.js                     <span class="comment"># worker 进程</span></span><br><span class="line">│   ├── config                            <span class="comment"># 所有的配置文件</span></span><br><span class="line">│   │   ├── adapter.js                    <span class="comment"># 引入的外部适配器 解决一种功能的多种实现</span></span><br><span class="line">│   │   ├── config.js                     <span class="comment"># 公共配置</span></span><br><span class="line">│   │   ├── config.production.js          <span class="comment"># 生产环境配置</span></span><br><span class="line">│   │   ├── crontab.js                    <span class="comment"># 定时执行的任务</span></span><br><span class="line">│   │   ├── extend.js                     <span class="comment"># 引入的外部扩展配置</span></span><br><span class="line">│   │   ├── middleware.js                 <span class="comment"># 引入的外部中间件</span></span><br><span class="line">│   │   ├── router.js                     <span class="comment"># 自定义路由配置</span></span><br><span class="line">│   │   └── validator.js                  <span class="comment"># 数据校验配置</span></span><br><span class="line">│   ├── controller                        <span class="comment"># 一个页面一个控制器</span></span><br><span class="line">│   │   ├── common</span><br><span class="line">│   │   │   ├── iotSms.js</span><br><span class="line">│   │   │   └── service.js</span><br><span class="line">│   │   ├── rest.js</span><br><span class="line">│   │   ├── sms_record.js</span><br><span class="line">│   │   ├── sys_area.js</span><br><span class="line">│   │   ├── sys_dict.js</span><br><span class="line">│   │   ├── sys_log.js</span><br><span class="line">│   │   ├── sys_menu.js</span><br><span class="line">│   │   ├── sys_office.js</span><br><span class="line">│   │   ├── sys_role.js</span><br><span class="line">│   │   ├── sys_system.js</span><br><span class="line">│   │   ├── sys_user.js</span><br><span class="line">│   ├── extend                            <span class="comment"># 项目里（自定义）的扩展配置</span></span><br><span class="line">│   │   ├── controller.js                 <span class="comment"># 针对 controller 的扩展</span></span><br><span class="line">│   │   ├── service.js                    <span class="comment"># 扩展 service 类</span></span><br><span class="line">│   │   └── think.js                      <span class="comment"># 扩展 think 类</span></span><br><span class="line">│   ├── logic                             <span class="comment"># 控制器之前的数据校验</span></span><br><span class="line">│   │   ├── common                        <span class="comment"># 系统在调用 controller 之前 会先调用</span></span><br><span class="line">│   │   │   └── service.js                <span class="comment"># 同名的 logic 进行数据校验</span></span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── sys_area.js                   <span class="comment"># 和控制器的名字一样</span></span><br><span class="line">│   │   ├── sys_dict.js</span><br><span class="line">│   │   ├── sys_log.js</span><br><span class="line">│   │   ├── sys_menu.js</span><br><span class="line">│   │   ├── sys_office.js</span><br><span class="line">│   │   ├── sys_role.js</span><br><span class="line">│   │   ├── sys_system.js</span><br><span class="line">│   │   └── sys_user.js</span><br><span class="line">│   ├── middleware                        <span class="comment"># 项目中自定义的中间件</span></span><br><span class="line">│   │   ├── eliPagination.js</span><br><span class="line">│   │   └── jwtAuthentication.js</span><br><span class="line">│   ├── model                             <span class="comment"># 数据库操作</span></span><br><span class="line">│   │   ├── base.js</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── sms_record.js</span><br><span class="line">│   │   ├── sys_application.js</span><br><span class="line">│   │   ├── sys_area.js</span><br><span class="line">│   │   ├── sys_dict.js</span><br><span class="line">│   │   ├── sys_log.js</span><br><span class="line">│   │   ├── sys_menu.js</span><br><span class="line">│   │   ├── sys_office.js</span><br><span class="line">│   │   ├── sys_role.js</span><br><span class="line">│   │   ├── sys_role_menu.js</span><br><span class="line">│   │   ├── sys_role_office.js</span><br><span class="line">│   │   ├── sys_system.js</span><br><span class="line">│   │   ├── sys_user.js</span><br><span class="line">│   │   └── sys_user_role.js</span><br><span class="line">│   ├── proto</span><br><span class="line">│   │   ├── common.js</span><br><span class="line">│   │   ├── common.proto</span><br><span class="line">│   │   ├── helloworld.js</span><br><span class="line">│   │   ├── helloworld.proto</span><br><span class="line">│   │   ├── jwtAuthorizing.js</span><br><span class="line">│   │   ├── jwtAuthorizing.proto</span><br><span class="line">│   │   ├── sms.js</span><br><span class="line">│   │   ├── sms.proto</span><br><span class="line">│   │   ├── sys_log.js</span><br><span class="line">│   │   ├── sys_log.proto</span><br><span class="line">│   │   ├── sys_system.js</span><br><span class="line">│   │   ├── sys_system.proto</span><br><span class="line">│   │   ├── sys_user.js</span><br><span class="line">│   │   └── sys_user.proto</span><br><span class="line">│   └── service                           <span class="comment"># 逻辑操作</span></span><br><span class="line">│       ├── base.js                       <span class="comment"># 调用 model 结果</span></span><br><span class="line">│       ├── common                        <span class="comment"># 返回给 controller</span></span><br><span class="line">│       │   ├── dataAuth.js</span><br><span class="line">│       │   ├── iotChinaMobileService.js</span><br><span class="line">│       │   ├── iotSmsService.js</span><br><span class="line">│       │   ├── jwtAuthorizingService.js</span><br><span class="line">│       │   ├── jwtService.js</span><br><span class="line">│       │   └── smsService.js</span><br><span class="line">│       ├── rpc_service</span><br><span class="line">│       │   ├── rpcclient.js</span><br><span class="line">│       │   └── rpcserver.js</span><br><span class="line">│       ├── sms_record.js</span><br><span class="line">│       ├── sys_application.js</span><br><span class="line">│       ├── sys_area.js</span><br><span class="line">│       ├── sys_dict.js</span><br><span class="line">│       ├── sys_log.js</span><br><span class="line">│       ├── sys_menu.js</span><br><span class="line">│       ├── sys_office.js</span><br><span class="line">│       ├── sys_role.js</span><br><span class="line">│       ├── sys_system.js</span><br><span class="line">│       ├── sys_user.js</span><br><span class="line">│       └── sys_user_role.js</span><br><span class="line">├── view</span><br><span class="line">│   └── index_index.html</span><br><span class="line">└── www</span><br><span class="line">    └── static</span><br><span class="line">        ├── css</span><br><span class="line">        ├── img</span><br><span class="line">        └── js</span><br></pre></td></tr></table></figure><p><strong>thinkjs 将框架需要的配置和项目自定义的配置统一管理放在了 <code>src/config</code> 目录下</strong></p><ul><li><p><code>config.js</code> 通用的一些配置</p></li><li><p><code>adapter.js</code> 适配器的配置</p></li><li><p><code>router.js</code> 自定义路由配置</p></li><li><p><code>middleware.js</code> 中间件配置</p></li><li><p><code>validator.js</code> 数据校验配置,配合 logic</p></li><li><p><code>extend.js</code> extends 配置</p></li></ul><p><strong>系统启动时会合并 config.js 和 adapter.js</strong></p><h3 id="config-js"><a href="#config-js" class="headerlink" title="config.js"></a>config.js</h3><p>通用的配置文件,也可以根据运行环境创建对应的配置文件 <code>config.development.js</code><br>系统默认配置:</p><figure class="highlight javascript"><figcaption><span>src/config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  port: <span class="number">8360</span>, <span class="comment">// server port</span></span><br><span class="line">  <span class="comment">// host: '127.0.0.1', // server host, removed from 3.1.0</span></span><br><span class="line">  workers: <span class="number">0</span>, <span class="comment">// server workers num, if value is 0 then get cpus num</span></span><br><span class="line">  createServer: <span class="literal">undefined</span>, <span class="comment">// create server function</span></span><br><span class="line">  startServerTimeout: <span class="number">3000</span>, <span class="comment">// before start server time</span></span><br><span class="line">  reloadSignal: <span class="string">"SIGUSR2"</span>, <span class="comment">// reload process signal</span></span><br><span class="line">  stickyCluster: <span class="literal">false</span>, <span class="comment">// sticky cluster, add from 3.1.0</span></span><br><span class="line">  onUnhandledRejection: <span class="function"><span class="params">err</span> =&gt;</span> think.logger.error(err), <span class="comment">// unhandledRejection handle</span></span><br><span class="line">  onUncaughtException: <span class="function"><span class="params">err</span> =&gt;</span> think.logger.error(err), <span class="comment">// uncaughtException handle</span></span><br><span class="line">  processKillTimeout: <span class="number">10</span> * <span class="number">1000</span>, <span class="comment">// process kill timeout, default is 10s</span></span><br><span class="line">  jsonpCallbackField: <span class="string">"callback"</span>, <span class="comment">// jsonp callback field</span></span><br><span class="line">  jsonContentType: <span class="string">"application/json"</span>, <span class="comment">// json content type</span></span><br><span class="line">  errnoField: <span class="string">"errno"</span>, <span class="comment">// errno field</span></span><br><span class="line">  errmsgField: <span class="string">"errmsg"</span>, <span class="comment">// errmsg field</span></span><br><span class="line">  defaultErrno: <span class="number">1000</span>, <span class="comment">// default errno</span></span><br><span class="line">  validateDefaultErrno: <span class="number">1001</span> <span class="comment">// validate default errno</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p><code>Adapter</code> 是用来解决一类功能的多种实现，这些实现提供一套相同的接口，类似设计模式里的工厂模式。如：支持多种数据库，支持多种模版引擎等。通过这种方式，可以很方便的在不同的类型中进行切换。<code>Adapter</code> 一般配合 <code>Extend</code> 一起使用。<br><code>Adapter</code> 都是一类功能的不同实现，一般是不能独立使用的，而是配合对应的扩展(extend)一起使用。如：view Adapter（<code>think-view-nunjucks</code>、<code>think-view-ejs</code>）配合 <code>think-view</code>扩展进行使用。<code>Adapter</code> 也支持不同环境的配置文件 <code>Adapter.development.js</code></p><p>配置格式:</p><figure class="highlight javascript"><figcaption><span>src/config/adapter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nunjucks = <span class="built_in">require</span>(<span class="string">'think-view-nunjucks'</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'think-view-ejs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">exports.view = &#123;</span><br><span class="line">  type: <span class="string">'nunjucks'</span>, <span class="comment">// 默认的模板引擎为 nunjucks</span></span><br><span class="line">  common: &#123; <span class="comment">//通用配置</span></span><br><span class="line">    viewPath: path.join(think.ROOT_PATH, <span class="string">'view'</span>),</span><br><span class="line">    sep: <span class="string">'_'</span>,</span><br><span class="line">    extname: <span class="string">'.html'</span></span><br><span class="line">  nunjucks: &#123; <span class="comment">// nunjucks 的具体配置</span></span><br><span class="line">    handle: nunjucks</span><br><span class="line">  &#125;,</span><br><span class="line">  ejs: &#123; <span class="comment">// ejs 的具体配置</span></span><br><span class="line">    handle: ejs,</span><br><span class="line">    viewPath: path.join(think.ROOT_PATH, <span class="string">'view/ejs/'</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>type</code> 默认使用的类型,具体调用时可以传递参数改写<code>display/render方法都可以</code></li><li><code>common</code> 配置通用的一些参数，项目启动时会跟具体的 adapter 参数作合并</li><li><code>nunjucks ejs</code> 配置特定类型的 Adapter 参数最终获取到的参数是 common 参数与该参数进行合并</li><li><code>handle</code> 对应类型的处理函数，一般为一个类</li></ul><p><strong>因为最后 <code>conifg.js</code>会和 <code>adapter.js</code>合并,所以俩个文件的<code>key</code>不能重复</strong></p><h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h3><p>项目扩展配置,配置文件放在 <code>src/config/extend.js</code></p><p>配置格式:</p><figure class="highlight javascript"><figcaption><span>src/config/extends.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> view = <span class="built_in">require</span>(<span class="string">"think-view"</span>);</span><br><span class="line"><span class="keyword">const</span> model = <span class="built_in">require</span>(<span class="string">"think-model"</span>);</span><br><span class="line"><span class="keyword">const</span> cache = <span class="built_in">require</span>(<span class="string">"think-cache"</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">"think-session"</span>);</span><br><span class="line"><span class="keyword">const</span> email = <span class="built_in">require</span>(<span class="string">"think-email"</span>);</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">"think-fetch"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  view, <span class="comment">// make application support view</span></span><br><span class="line">  model(think.app),</span><br><span class="line">  cache,</span><br><span class="line">  session,</span><br><span class="line">  email,</span><br><span class="line">  fetch <span class="comment">// HTTP request client.</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>如果在项目中需要对<code>think</code>等对象进行扩展可以放在<code>src/extend/</code>目录下</p><ul><li><code>src/extend/think.js</code>扩展 think 对象 <code>think.xxx</code></li><li><code>src/extend/application.js</code>扩展 Koa 里的 app 对象( <code>think.app</code>)</li><li><code>src/extend/controller.js</code>扩展 controller 类 ( <code>think.Controller</code>)</li><li><code>src/extend/request.js</code>扩展 koa 里的 request 对象 ( <code>think.app.request</code>)</li><li><code>src/extend/response.js</code>扩展 koa 里的 response 对象 ( <code>think.app.response</code>)</li><li><code>src/extend/context.js</code>扩展 ctx 对象 ( <code>think.app.context</code>)</li><li><code>src/extend/logic.js</code>扩展 logic 类 ( <code>think.Logic</code>) logic 继承 controller 类,所以 logic 包含 controller 类所有方法</li><li><code>src/extend/services.js</code>扩展 servic 类 ( <code>think.Services</code>)</li></ul><h3 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h3><ul><li>中间件的执行顺序是按照 <code>src/config/middleware.js</code> 里配置的顺序来执行的</li></ul><figure class="highlight javascript"><figcaption><span>middleware.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDev = (think.env = <span class="string">"develpoment"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"meta"</span>, <span class="comment">//中间件的处理函数</span></span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="comment">// 当前中间件需要的配置</span></span><br><span class="line">      logRequest: isDev</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"resource"</span>,</span><br><span class="line">    enable: isDev, <span class="comment">//是否开启当前中间件</span></span><br><span class="line">    options: &#123;</span><br><span class="line">      root: path.join(think.ROOT_PATH, <span class="string">"www"</span>),</span><br><span class="line">      publicPath: <span class="regexp">/^\/(static|favicon)\.ico/</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>也可以自定义中间件,放在<code>src/middleware/</code>文件下</li></ul><figure class="highlight javascript"><figcaption><span>jwt.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">options, app</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这里的 app 为 think.app 对象</span></span><br><span class="line">    reutrn (ctx,next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后将自定义的中间件引入<code>src/config/middleware.js</code>中,注意放置顺序</li></ul><figure class="highlight javascript"><figcaption><span>middleware.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">"../middleware/jwt.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"meta"</span>, <span class="comment">//中间件的处理函数</span></span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="comment">// 当前中间件需要的配置</span></span><br><span class="line">      logRequest: isDev</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"resource"</span>,</span><br><span class="line">    enable: isDev, <span class="comment">//是否开启当前中间件</span></span><br><span class="line">    options: &#123;</span><br><span class="line">      root: path.join(think.ROOT_PATH, <span class="string">"www"</span>),</span><br><span class="line">      publicPath: <span class="regexp">/^\/(static|favicon)\.ico/</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"jwt"</span>,</span><br><span class="line">    options: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>一个示例的 middleware.js</li></ul><figure class="highlight javascript"><figcaption><span>middleware.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> isDev = think.env === <span class="string">"development"</span>;</span><br><span class="line"><span class="keyword">const</span> jwtAuthentication = <span class="built_in">require</span>(<span class="string">"../middleware/jwtAuthentication.js"</span>);</span><br><span class="line"><span class="keyword">const</span> koa_cors = <span class="built_in">require</span>(<span class="string">"koa2-cors"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"meta"</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      logRequest: isDev,</span><br><span class="line">      sendResponseTime: isDev</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: koa_cors,</span><br><span class="line">    options: &#123;</span><br><span class="line">      origin: <span class="string">"*"</span>,</span><br><span class="line">      exposeHeaders: [<span class="string">"Content-Disposition"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"resource"</span>,</span><br><span class="line">    enable: isDev,</span><br><span class="line">    options: &#123;</span><br><span class="line">      root: path.join(think.ROOT_PATH, <span class="string">"www"</span>),</span><br><span class="line">      publicPath: <span class="regexp">/^\/(static|favicon\.ico)/</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"trace"</span>,</span><br><span class="line">    enable: !think.isCli,</span><br><span class="line">    options: &#123;</span><br><span class="line">      debug: isDev,</span><br><span class="line">      error: <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//错误处理</span></span><br><span class="line">        <span class="keyword">return</span> think.logger.error(err);</span><br><span class="line">      &#125;,</span><br><span class="line">      debug: isDev,</span><br><span class="line">      contentType(ctx) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"json"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"payload"</span>,</span><br><span class="line">    options: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"router"</span>,</span><br><span class="line">    options: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"jwtAuthentication"</span>,</span><br><span class="line">    options: think.config(<span class="string">"authOption"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"logic"</span>,</span><br><span class="line">  <span class="string">"controller"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>总结:</p><ul><li>middleware.js 中间件按照从上到下的顺序执行的</li><li>一些 think 框架内置的中间就可以直接使用不需要引入,例如:<ul><li><code>meta:</code> 显示一些信息,如:发送 ThinkJs 版本号,接口的处理时间</li><li><code>resource:</code> 处理静态资源,生产环境建议关闭</li><li><code>payload:</code> 处理表单提交的数据</li><li><code>router:</code> 路由解析</li><li><code>logic:</code> logic 调用,数据校验</li><li><code>controller:</code> controller 和 action 调用</li></ul></li></ul><h3 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h3><p>当在 <code>Action</code> 里处理用户的请求时，经常要先获取用户提交过来的数据，然后对其校验，如果校验没问题后才能进行后续的操作；当参数校验完成后，有时候还要进行权限判断等，这些都判断无误后才能进行真正的逻辑处理。如果将这些代码都放在一个 <code>Action</code> 里，势必让 Action 的代码非常复杂且冗长。<br>为了解决这个问题， ThinkJS 在控制器前面增加了一层 <code>Logic</code>，Logic 文件名和 Controller 文件名要相同,Logic 里的 Action 和控制器里的 Action 一一对应，系统在调用控制器里的 Action 之前会自动调用 Logic 里的 Action。</p><p>Logic 对应的配置文件是 <code>src/config/validator.js</code>文件</p><p>一个完整的 logic 校验格式文件:</p><figure class="highlight javascript"><figcaption><span>src/logic/sys_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sys_test logic</span></span><br><span class="line"><span class="comment"> * create by tiankai[lenovo]  2018-06-05 15:07</span></span><br><span class="line"><span class="comment"> * @type &#123;module.exports&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">Logic</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 新增验证</span></span><br><span class="line"><span class="comment">   * create by tiankai[lenovo]  2018-06-05 15:07</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  insertAction() &#123;</span><br><span class="line">    <span class="keyword">this</span>.allowMethods = <span class="string">"POST"</span>; <span class="comment">//  只允许 POST 请求类型</span></span><br><span class="line">    <span class="keyword">this</span>.rules = &#123;</span><br><span class="line">      <span class="comment">// aliasName 起别名,显示 用户名不能为空</span></span><br><span class="line">      uname: &#123; <span class="attr">string</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span>, <span class="attr">aliasName</span>: <span class="string">"用户名"</span> &#125;,</span><br><span class="line">      password: &#123; <span class="attr">string</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      type: &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">in</span>: [<span class="string">"1"</span>, <span class="string">"2"</span>], <span class="attr">trim</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      mobile: &#123; <span class="attr">mobile</span>: <span class="string">"zh-CN"</span>, <span class="attr">trim</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 编辑验证</span></span><br><span class="line"><span class="comment">   * create by tiankai[lenovo]  2018-06-05 15:07</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  editAction() &#123;</span><br><span class="line">    <span class="keyword">this</span>.allowMethods = <span class="string">"put"</span>;</span><br><span class="line">    <span class="keyword">this</span>.rules = &#123;</span><br><span class="line">      id: &#123; <span class="attr">uuid</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      uname: &#123; <span class="attr">string</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span>, <span class="attr">aliasName</span>: <span class="string">"用户名"</span> &#125;,</span><br><span class="line">      password: &#123; <span class="attr">string</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      mobile: &#123; <span class="attr">mobile</span>: <span class="string">"zh-CN"</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      type: &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">in</span>: [<span class="string">"1"</span>, <span class="string">"2"</span>], <span class="attr">trim</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除验证</span></span><br><span class="line"><span class="comment">   * create by tiankai[lenovo]  2018-06-05 15:07</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  removeAction() &#123;</span><br><span class="line">    <span class="keyword">this</span>.allowMethods = <span class="string">"delete"</span>;</span><br><span class="line">    <span class="keyword">this</span>.rules = &#123;</span><br><span class="line">      id: &#123; <span class="attr">uuid</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span>, <span class="attr">method</span>: <span class="string">"GET"</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取单条验证</span></span><br><span class="line"><span class="comment">   * create by tiankai[lenovo]  2018-06-05 15:07</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getAction() &#123;</span><br><span class="line">    <span class="keyword">this</span>.allowMethods = <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">this</span>.rules = &#123;</span><br><span class="line">      id: &#123; <span class="attr">uuid</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取多条验证</span></span><br><span class="line"><span class="comment">   * create by tiankai[lenovo]  2018-06-05 15:07</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getsAction() &#123;</span><br><span class="line">    <span class="keyword">this</span>.allowMethods = <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">this</span>.rules = &#123;</span><br><span class="line">      <span class="comment">//parent_id: &#123;trim: true, uuid: true,&#125;,</span></span><br><span class="line">      <span class="comment">//name: &#123;string: true, required: true, trim: true&#125;,</span></span><br><span class="line">      <span class="comment">//type: &#123;int: &#123;min: 0, max: 1&#125;, trim: true, required: true,&#125;,</span></span><br><span class="line">      remarks: &#123; <span class="attr">string</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如代码所示,<code>logic</code>应该和 <code>controller</code>相对应,不仅文件名对应,相对应的 Action 也该对应</p><h3 id="自定义的校验规则"><a href="#自定义的校验规则" class="headerlink" title="自定义的校验规则"></a>自定义的校验规则</h3><p>代码中有框架默认的校验规则,也有自己定义的校验规则<br>自己定义的校验规则放到<code>src/config/validator.js</code>文件中</p><figure class="highlight javascript"><figcaption><span>src/config/validator.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  messages: &#123;</span><br><span class="line">    ACTION_NON_EXIST: [<span class="number">404</span>, <span class="string">"action 函数不存在."</span>],</span><br><span class="line">    PARENT_DATA_NOT_EXIST: [<span class="number">10001</span>, <span class="string">"父级数据不存在."</span>],</span><br><span class="line">    OPTIONS_REQUEST: [<span class="number">9999</span>, <span class="string">"option 请求。"</span>],</span><br><span class="line">    SUCCESS: [<span class="number">10000</span>, <span class="string">"操作成功。"</span>],</span><br><span class="line">    SERVER_INVALID: [<span class="number">10100</span>, <span class="string">"服务器错误，请重新尝试。"</span>],</span><br><span class="line">    TOKEN_INVALID: [<span class="number">10200</span>, <span class="string">"请核对您的登录信息后重新登录。"</span>],</span><br><span class="line">    NEED_LOGIN: [<span class="number">10201</span>, <span class="string">"您没有权限，请重新登录"</span>],</span><br><span class="line">    TOKEN_EXPIRED: [<span class="number">10202</span>, <span class="string">"TOKEN 过期，请重新登录"</span>],</span><br><span class="line">    NEED_AUTHOR: [<span class="number">10203</span>, <span class="string">"访问资源未授权"</span>],</span><br><span class="line">    DATA_NULL: [<span class="number">10004</span>, <span class="string">"查询不到相关数据"</span>],</span><br><span class="line">    DATA_REPEAT: [<span class="number">10006</span>, <span class="string">"数据重复，请核对数据。"</span>],</span><br><span class="line">    USER_NULL: [<span class="number">10300</span>, <span class="string">"用户不存在"</span>],</span><br><span class="line">    LOGIN_NAME_EXIST: [<span class="number">10301</span>, <span class="string">"登录名已存在."</span>],</span><br><span class="line">    PASSWORD_REPEAT: [<span class="number">10302</span>, <span class="string">"密码与原始密码相同"</span>],</span><br><span class="line">    PASSWORD_ERROR: [<span class="number">10303</span>, <span class="string">"密码错误，请重新登录。"</span>],</span><br><span class="line">    ROLE_NAME_REPEAT: [<span class="number">10330</span>, <span class="string">"角色名称已存在"</span>],</span><br><span class="line">    CAN_NOT_DEL_SELF_ROLE: [<span class="number">10331</span>, <span class="string">"不能删除自己所拥有的角色"</span>],</span><br><span class="line">    CAN_NOT_DEL_ONLY_ROLE: [<span class="number">10332</span>, <span class="string">"该用户的唯一角色，不能移除"</span>],</span><br><span class="line">    NOT_FOUND_ROLE: [<span class="number">10333</span>, <span class="string">"当前用户无角色"</span>],</span><br><span class="line">    NOT_FOUND_PARENT_MENU: [<span class="number">10320</span>, <span class="string">"父菜单不存在"</span>],</span><br><span class="line">    NOT_FOUND_PARENT_OFFICE: [<span class="number">10340</span>, <span class="string">"父机构不存在"</span>],</span><br><span class="line">    LABEL_NAMES_EXIST: [<span class="number">10311</span>, <span class="string">"字典名称已存在"</span>],</span><br><span class="line">    TAG_NAME_EXIST: [<span class="number">10312</span>, <span class="string">"Tag 名称已存在"</span>],</span><br><span class="line">    OFFICE_NAME_EXIST: [<span class="number">10313</span>, <span class="string">"组织机构名称已存在"</span>],</span><br><span class="line">    ADMIN_NOT_ALLOW_DELETE: [<span class="number">10314</span>, <span class="string">"不允许删除管理员"</span>],</span><br><span class="line">    ADMIN_NOT_ALLOW_CHANGEPWD: [<span class="number">10315</span>, <span class="string">"非管理员账户不允许初始化管理员密码"</span>],</span><br><span class="line">    ADMIN_NOT_ALLOW_CHANGEINFO: [<span class="number">10316</span>, <span class="string">"非管理员账户不允许修改管理员资料"</span>],</span><br><span class="line">    NOT_ADMIN_ALLOW_DEL_ADMIN_INFO: [<span class="number">10317</span>, <span class="string">"非管理员账户不允许删除管理员角色"</span>],</span><br><span class="line">    NOT_ADMIN_ALLOW_CHANGE_ADMIN_INFO: [</span><br><span class="line">      <span class="number">10318</span>,</span><br><span class="line">      <span class="string">"非管理员账户不允许修改管理员角色"</span></span><br><span class="line">    ],</span><br><span class="line">    AREA_DATA_NULL: [<span class="number">10319</span>, <span class="string">"所选区域数据不存在"</span>],</span><br><span class="line">    USER_NOT_EXIST_OR_HASE_PWD: [<span class="number">10320</span>, <span class="string">"用户不存在或已设置密码"</span>],</span><br><span class="line">    SET_PWD_FAIL: [<span class="number">10321</span>, <span class="string">"设置密码失败"</span>],</span><br><span class="line">    CAN_NOT_DELETE_THIS_ROLE: [<span class="number">10322</span>, <span class="string">"已存在该角色的用户，不能删除"</span>],</span><br><span class="line">    CAN_NOT_DELETE_THIS_OFFICE: [<span class="number">10323</span>, <span class="string">"已存在该组织机构的用户，不能删除"</span>],</span><br><span class="line">    NOT_ALLOW_DEL_OWNER_INFO: [<span class="number">10324</span>, <span class="string">"不允许删除自己的信息"</span>],</span><br><span class="line">    <span class="string">"searchObj is not object"</span>: [<span class="number">10325</span>, <span class="string">"查询失败，缺少 searchObj 参数"</span>],</span><br><span class="line">    FILE_NOT_EXIST: [<span class="number">10401</span>, <span class="string">"附件不存在或上传失败"</span>],</span><br><span class="line">    MOBILE_EXIST: [<span class="number">10407</span>, <span class="string">"手机号已存在"</span>],</span><br><span class="line">    METHED_ERROR: [<span class="number">403</span>, <span class="string">"methed 错误。"</span>],</span><br><span class="line"></span><br><span class="line">    SEND_SMSCODE_BUSY: [<span class="number">10501</span>, <span class="string">"发送验证码操作太频繁，请稍后再试"</span>],</span><br><span class="line">    SMSCODE_EXP: [<span class="number">10502</span>, <span class="string">"验证码已过期，请重新获取验证码"</span>],</span><br><span class="line">    SMSCODE_ERR: [<span class="number">10503</span>, <span class="string">"验证码错误"</span>],</span><br><span class="line">    DAYSENDTOTLE: [<span class="number">10504</span>, <span class="string">"验证码发送量已超过单日最大量"</span>],</span><br><span class="line">    SINGLEPHONESENDTOTLE: [<span class="number">10505</span>, <span class="string">"当前号码发送验证码数量已超出系统限制"</span>],</span><br><span class="line">    SINGLEIPSENDTOTLE: [<span class="number">10506</span>, <span class="string">"当前ip地址发送验证码数量已超出系统限制"</span>],</span><br><span class="line">    <span class="comment">// 重写系统错误消息的返回</span></span><br><span class="line">    required: <span class="string">"&#123;name&#125; 不能为空"</span>,</span><br><span class="line">    contains: <span class="string">"&#123;name&#125; 必须包含 &#123;args&#125;"</span>,</span><br><span class="line">    mobile: <span class="string">"手机号码格式错误"</span>,</span><br><span class="line">    equals: <span class="string">"&#123;name&#125; 的值应该和 &#123;args&#125; 相等"</span>,</span><br><span class="line">    different: <span class="string">"&#123;name&#125; 的值应该和 &#123;args&#125; 不相等"</span>,</span><br><span class="line">    before: <span class="string">"&#123;name&#125; 应该在 &#123;args&#125; 之前"</span>,</span><br><span class="line">    after: <span class="string">"&#123;name&#125; 应该在 &#123;args&#125; 之后"</span>,</span><br><span class="line">    alpha: <span class="string">"&#123;name&#125; 的值只能是 [a-zA-Z] 组成"</span>,</span><br><span class="line">    alphaDashr: <span class="string">"&#123;name&#125; 的值只能是 [a-zA-Z] 组成"</span>,</span><br><span class="line">    alphaNumeric: <span class="string">"&#123;name&#125; 的值只能是 [a-zA-Z0-9] 组成"</span>,</span><br><span class="line">    alphaNumericDash: <span class="string">"&#123;name&#125; 的值只能是 [a-zA-Z0-9] 组成"</span>,</span><br><span class="line">    ascli: <span class="string">"&#123;name&#125; 的值只能由 ASCII 组成"</span>,</span><br><span class="line">    base64: <span class="string">"&#123;name&#125; 的值必须是 base64 编码"</span>,</span><br><span class="line">    byteLength: <span class="string">"&#123;name&#125; 的字节长度错误"</span>,</span><br><span class="line">    creditcard: <span class="string">"&#123;name&#125; 需要是信用卡数字"</span>,</span><br><span class="line">    currency: <span class="string">"&#123;name&#125; 应该是货币格式"</span>,</span><br><span class="line">    date: <span class="string">"&#123;name&#125; 应该是日期格式"</span>,</span><br><span class="line">    decimal: <span class="string">"&#123;name&#125; 应该是小数格式"</span>,</span><br><span class="line">    divisibleBy: <span class="string">"&#123;name&#125; 需要被 &#123;args&#125; 整除"</span>,</span><br><span class="line">    email: <span class="string">"&#123;name&#125; 需要是个 email 格式"</span>,</span><br><span class="line">    fqdn: <span class="string">"&#123;name&#125; 需要是个合格的域名"</span>,</span><br><span class="line">    float: <span class="string">"&#123;name&#125; 浮点数格式错误 &#123;args&#125;"</span>,</span><br><span class="line">    fullWidth: <span class="string">"&#123;name&#125; 应该包含宽字节字符"</span>,</span><br><span class="line">    halfWidth: <span class="string">"&#123;name&#125; 应该包含半字节字符"</span>,</span><br><span class="line">    hexColor: <span class="string">"&#123;name&#125; 需要是个十六进制颜色值"</span>,</span><br><span class="line">    hex: <span class="string">"&#123;name&#125; 需要是十六进制"</span>,</span><br><span class="line">    ip: <span class="string">"&#123;name&#125; 需要是 ip 格式"</span>,</span><br><span class="line">    ip4: <span class="string">"&#123;name&#125; 需要是 ip4 格式"</span>,</span><br><span class="line">    ip6: <span class="string">"&#123;name&#125; 需要是 ip6 格式"</span>,</span><br><span class="line">    isbn: <span class="string">"&#123;name&#125; 需要是图书编码"</span>,</span><br><span class="line">    isin: <span class="string">"&#123;name&#125; 需要是证券识别编码"</span>,</span><br><span class="line">    iso8601: <span class="string">"&#123;name&#125; 需要是 iso8601 日期格式"</span>,</span><br><span class="line">    <span class="keyword">in</span>: <span class="string">"&#123;name&#125; 应该在这些值中：&#123;args&#125;"</span>,</span><br><span class="line">    noin: <span class="string">"&#123;name&#125; 不应该在这些值中：&#123;args&#125;"</span>,</span><br><span class="line">    int: <span class="string">"&#123;name&#125; 整数格式错误：&#123;args&#125;"</span>,</span><br><span class="line">    min: <span class="string">"&#123;name&#125; 不能小于 &#123;args&#125;"</span>,</span><br><span class="line">    max: <span class="string">"&#123;name&#125; 不能大于 &#123;args&#125;"</span>,</span><br><span class="line">    length: <span class="string">"&#123;name&#125; 字符长度错误：&#123;args&#125;"</span>,</span><br><span class="line">    minLength: <span class="string">"&#123;name&#125; 长度不能小于 &#123;args&#125;"</span>,</span><br><span class="line">    maxLength: <span class="string">"&#123;name&#125; 长度不能大于 &#123;args&#125;"</span>,</span><br><span class="line">    lowercase: <span class="string">"&#123;name&#125; 需要都是小写字母"</span>,</span><br><span class="line">    uppercase: <span class="string">"&#123;name&#125; 需要都是大写字母"</span>,</span><br><span class="line">    mongoId: <span class="string">"&#123;name&#125; 应该是 MongoDB 的 ObjectID"</span>,</span><br><span class="line">    multibyte: <span class="string">"&#123;name&#125; 应该包含多字节字符"</span>,</span><br><span class="line">    url: <span class="string">"&#123;name&#125; 应该是个 url"</span>,</span><br><span class="line">    order: <span class="string">"&#123;name&#125; 数据库查询 order 格式错误"</span>,</span><br><span class="line">    field: <span class="string">"&#123;name&#125; 数据库查询 field 格式错误"</span>,</span><br><span class="line">    image: <span class="string">"&#123;name&#125; 上传的文件应该是个图片"</span>,</span><br><span class="line">    startWith: <span class="string">"&#123;name&#125; 应该以 &#123;args&#125; 打头"</span>,</span><br><span class="line">    endWith: <span class="string">"&#123;name&#125; 应该以 &#123;args&#125; 结尾"</span>,</span><br><span class="line">    string: <span class="string">"&#123;name&#125; 值为字符串"</span>,</span><br><span class="line">    array: <span class="string">"&#123;name&#125; 值为数组"</span>,</span><br><span class="line">    boolean: <span class="string">"&#123;name&#125; 值为布尔类型"</span>,</span><br><span class="line">    object: <span class="string">"&#123;name&#125; 值为对象"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置好后,可以在代码中 使用 来返回错误消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.fail(<span class="string">"MOBILE_EXIST"</span>); <span class="comment">//手机号已存在</span></span><br></pre></td></tr></table></figure><p>具体其他的校验规则可以查看 <a href="https://thinkjs.org/zh-cn/doc/3.0/logic.html" target="_blank" rel="noopener">Thinkjs 的官网</a></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>控制器是处理用户请求逻辑的部分,比如将用户相关的操作都放在 <code>user.js</code> 中 ,每一个用户操作就是一个 Action,请求用户首页就是 indexAction 项目中的 controller 继承 <code>think.Controller</code>类,也可以创建一个基类,然后其他 controller 继承该类</p><figure class="highlight javascript"><figcaption><span>src/controller/user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Base = <span class="built_in">require</span>(<span class="string">"./base.js"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  indexAction() &#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="string">"hello world!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建完成后,框架会监听文件变化然后重启服务.这时访问 <code>http:/.127.0.0.1:8360/user/index</code>就可以看到输出的 <code>hello world</code></p><h4 id="Action-的执行"><a href="#Action-的执行" class="headerlink" title="Action 的执行"></a>Action 的执行</h4><p>Action 的执行是通过 <code>think.controller</code>来完成的,执行顺序为:</p><ul><li>实例化 <code>Controller</code>类,传入 <code>ctx</code>对象</li><li>如果方法 <code>__before</code>存在则调用,如果返回 <code>false</code>,则停止继续执行</li><li>如果方法 <code>xxxAction</code>存在则执行,如果返回值为 <code>false</code> 则停止继续执行</li><li>如果方法 <code>xxxAction</code>不存在但 <code>__call</code>方法存在,则调用 <code>__call</code> 如果返回值为 <code>false</code>则停止继续执行</li><li>如果方法<code>__after</code>存在则执行</li></ul><p>下面是一个完整的 controller 示例, 列举了一般开发中所需要的功能</p><figure class="highlight javascript"><figcaption><span>src/controller/user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制器是一类操作的集合, 用来响应用户同一类的请求</span></span><br><span class="line"><span class="keyword">const</span> BaseRest = <span class="built_in">require</span>(<span class="string">"./rest.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">BaseRest</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Controller 实例化时会传入 ctx 对象，</span></span><br><span class="line">  <span class="comment">//在 Controller 里可以通过 this.ctx 来获取 ctx 对象</span></span><br><span class="line">  <span class="keyword">constructor</span>(ctx) &#123;</span><br><span class="line">    <span class="keyword">super</span>(ctx); <span class="comment">// 调用父级的 constructor 方法，并把 ctx 传递进去</span></span><br><span class="line">    <span class="comment">// 其他额外操作 可以重写 controller 方法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 前置操作: 在 action 调用之前自动调用</span></span><br><span class="line">  <span class="comment">// 推荐放在一个 base controller 类中, 其他 controller 继承 base controller</span></span><br><span class="line">  <span class="keyword">async</span> __before() &#123;</span><br><span class="line">    <span class="comment">// 判断是否已经登录，如果没有登录就不能继续后面行为。</span></span><br><span class="line">    <span class="comment">//此种情况下，可以通过内置的 __before 来实现</span></span><br><span class="line">    <span class="keyword">const</span> userInfo = <span class="keyword">await</span> <span class="keyword">this</span>.session(<span class="string">"userInfo"</span>);</span><br><span class="line">    <span class="comment">//获取用户的 session 信息，如果为空，返回 false 阻止后续的行为继续执行</span></span><br><span class="line">    <span class="keyword">if</span> (think.isEmpty(userInfo)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 后置操作: 在 action 调用之后自动调用</span></span><br><span class="line">  __after() &#123;</span><br><span class="line">    <span class="comment">// 如果 action 里阻止了后续的代码继续执行(return false), 则后置操作不会调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"controller __after"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 空操作: 当解析后的 URL 对应的控制器存在, 但 action 不存在时调用</span></span><br><span class="line">  <span class="comment">// 一般不需要使用</span></span><br><span class="line">  __call() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"controller __call"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.end(<span class="string">"404"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不指定 action 时默认用 indexAction 来处理这个请求</span></span><br><span class="line">  indexAction() &#123;</span><br><span class="line">    <span class="comment">// 获取 URL</span></span><br><span class="line">    <span class="comment">// 获取请求参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"GET param"</span>, <span class="keyword">this</span>.get()); <span class="comment">// 相当于  this.ctx.param</span></span><br><span class="line">    <span class="comment">// 当上传文件时, 包含 form 表单中除开 file 类型的其他字段的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"POST param"</span>, <span class="keyword">this</span>.post());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"GET param"</span>, <span class="keyword">this</span>.param());</span><br><span class="line">    <span class="comment">// 上传的文件保存在临时目录(runtime/upload)中, 可以通过 path 属性看到</span></span><br><span class="line">    <span class="comment">// 使用时需要将其移动到项目里的目录, 否则请求结束时会被删除</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"file"</span>, <span class="keyword">this</span>.file());</span><br><span class="line">    <span class="comment">// 获取模型数据</span></span><br><span class="line">    <span class="comment">// 一般放到 Model 文件夹下操作</span></span><br><span class="line">    <span class="comment">// 项目开发中, 经常要操作数据库, 如: 增删改查等操作.</span></span><br><span class="line">    <span class="comment">// 模型就是为了方便操作数据库进行的封装, 一个模型对应数据库中的一个数据表.</span></span><br><span class="line">    <span class="comment">// 模型文件不是必须存在, 如果没有自定义方法可以不创建模型文件,</span></span><br><span class="line">    <span class="comment">// 实例化时会取模型基类的实例</span></span><br><span class="line">    <span class="keyword">let</span> model = <span class="keyword">this</span>.model(<span class="string">"city"</span>);</span><br><span class="line">    <span class="comment">// 操作模型</span></span><br><span class="line">    model</span><br><span class="line">      .where(&#123; <span class="attr">name</span>: <span class="string">"Kabul"</span> &#125;)</span><br><span class="line">      .select()</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">rs</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"model"</span>, model.name, model.schema, rs);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">// 指定 SQL 语句执行查询</span></span><br><span class="line">    <span class="keyword">this</span>.model()</span><br><span class="line">      .query(<span class="string">"SELECT * FROM city WHERE name = '%s'"</span>, <span class="string">"Kabul"</span>)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">rs</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(rs);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">// View 模板赋值</span></span><br><span class="line">    <span class="keyword">this</span>.assign(&#123;</span><br><span class="line">      title: <span class="string">"我们一起来学习 ThinkJS"</span>,</span><br><span class="line">      author: <span class="string">"Sun"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 渲染模板</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.display();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 JSON/JSONP</span></span><br><span class="line">    <span class="comment">// return this.json(&#123;a: 1&#125;);</span></span><br><span class="line">    <span class="comment">// return this.jsonp(&#123;a: 1&#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回格式化的正常数据, 一般是操作成功后输出</span></span><br><span class="line">    <span class="comment">// return this.success(&#123;a: 1&#125;);</span></span><br><span class="line">    <span class="comment">// 返回格式化的异常数据, 一般是操作失败后输出</span></span><br><span class="line">    <span class="comment">// return this.fail(1000, 'error...', &#123;e: 1&#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转页面</span></span><br><span class="line">    <span class="comment">// return this.redirect('https://thinkjs.org');</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 多模块的</span></span><br><span class="line">  <span class="comment">// http://127.0.0.1:8360/模块/控制器/操作</span></span><br><span class="line">  <span class="comment">// 单模块的</span></span><br><span class="line">  <span class="comment">// http://127.0.0.1:8360/user/insert?callback=abc</span></span><br><span class="line">  <span class="comment">// http://127.0.0.1:8360/控制器/操作</span></span><br><span class="line">  <span class="keyword">async</span> insertAction() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> now = think.datetime(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">      <span class="keyword">let</span> data = <span class="keyword">this</span>.post(); <span class="comment">//post数据json格式化</span></span><br><span class="line">      <span class="comment">// 项目中处理 data 数据的函数,不用理会</span></span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">this</span>.convertToEntity(data);</span><br><span class="line">      result.id = think.uuid(); <span class="comment">// undefined的数据添加</span></span><br><span class="line">      result.create_date = now;</span><br><span class="line">      <span class="comment">// serviceinstance 是 service 文件夹下同名的文件</span></span><br><span class="line">      <span class="comment">// 调用对应的 model 操作数据库</span></span><br><span class="line">      <span class="comment">// 把结果返回给 controller</span></span><br><span class="line">      <span class="comment">//调用service对应的insert方法</span></span><br><span class="line">      <span class="keyword">let</span> id = <span class="keyword">await</span> <span class="keyword">this</span>.serviceInstance.insert(result).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 生成日志记录插入数据库</span></span><br><span class="line">      <span class="keyword">this</span>.dbLogInfo(<span class="string">"sys_test管理"</span>, <span class="string">`【成功】新增单条sys_test:<span class="subst">$&#123;result.id&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.success(result.id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.fail(error.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>thinkjs 框架并没有内置 view/视图功能,如果需要在 <code>src/config/extend.js</code>,添加如下的配置:</p><figure class="highlight javascript"><figcaption><span>src/config/extend.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> view = <span class="built_in">require</span>(<span class="string">"think-view"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = [view];</span><br></pre></td></tr></table></figure><p>添加视图扩展,让项目有渲染模板文件的能力,视图扩展是通过模块 <code>think-view</code>实现的. 配置好 extend 后还需要配置 adapter ,在 <code>src/config/adapter.js</code>中添加如下的配置:</p><figure class="highlight javascript"><figcaption><span>src/config/adapter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nunjucks = <span class="built_in">require</span>(<span class="string">"think-view-nunjucks"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图的 adapter 名称为 view</span></span><br><span class="line">exports.view = &#123;</span><br><span class="line">  type: <span class="string">"nunjucks"</span>, <span class="comment">// 这里指定默认的模板引擎是 nunjucks</span></span><br><span class="line">  common: &#123;</span><br><span class="line">    viewPath: path.join(think.ROOT * PATH, <span class="string">"view"</span>), <span class="comment">//模板文件的根目录</span></span><br><span class="line">    sep: <span class="string">"*"</span>, <span class="comment">//Controller 与 Action 之间的连接符</span></span><br><span class="line">    extname: <span class="string">".html"</span> <span class="comment">//模板文件扩展名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  nunjucks: &#123;</span><br><span class="line">    handle: nunjucks,</span><br><span class="line">    beforeRender: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, <span class="comment">// 模板渲染预处理</span></span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="comment">// 模板引擎额外的配置参数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里用的模板引擎是 nunjucks，项目中可以根据需要修改。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>配置好 Extend 和 Adapter 后就可以在 Controller 中使用了.如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">moduel.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">Controller</span> </span>&#123;</span><br><span class="line">  indexAction() &#123;</span><br><span class="line">    <span class="keyword">this</span>.assign(<span class="string">"title"</span>, <span class="string">"thinkjs"</span>); <span class="comment">//给模板赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.display(); <span class="comment">// 渲染模板</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p><strong>assign: </strong>给模板赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单条赋值</span></span><br><span class="line"><span class="keyword">this</span>.assign(<span class="string">"title"</span>, <span class="string">"thinkjs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条赋值</span></span><br><span class="line"><span class="keyword">this</span>.assign(&#123;</span><br><span class="line">  title: <span class="string">"thinkjs"</span>,</span><br><span class="line">  name: <span class="string">"test"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取之前赋过的值，如果不存在则为 undefined</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="keyword">this</span>.assign(<span class="string">"title"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有赋的值</span></span><br><span class="line"><span class="keyword">const</span> assignData = <span class="keyword">this</span>.assign();</span><br></pre></td></tr></table></figure><p><strong>display &amp;&amp; render: </strong>渲染模板/切换模板类型<br><code>render:</code> 获取渲染后的内容,该方法为异步方法,需要通过 async/await 处理<br><code>display:</code> 调用的是 <code>render</code>方法获取 模板内容后 再把内容加到 <code>ctx.body</code>内容上<br>项目中如果使用 display 话,前面要记得加上 <code>await</code>或者是 <code>return</code></p><figure class="highlight javascript"><figcaption><span>render.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//render</span></span><br><span class="line"><span class="comment">//根据当前请求解析的 controller 和 action 自动匹配模板文件</span></span><br><span class="line"><span class="keyword">const</span> content1 = <span class="keyword">await</span> <span class="keyword">this</span>.render();</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定文件名</span></span><br><span class="line"><span class="keyword">const</span> content2 = <span class="keyword">await</span> <span class="keyword">this</span>.render(<span class="string">"doc"</span>);</span><br><span class="line"><span class="keyword">const</span> content3 = <span class="keyword">await</span> <span class="keyword">this</span>.render(<span class="string">"doc/detail"</span>);</span><br><span class="line"><span class="keyword">const</span> content4 = <span class="keyword">await</span> <span class="keyword">this</span>.render(<span class="string">"doc_detail"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不指定文件名但切换模板类型</span></span><br><span class="line"><span class="keyword">const</span> content5 = <span class="keyword">await</span> <span class="keyword">this</span>.render(<span class="literal">undefined</span>, <span class="string">"ejs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定文件名且切换模板类型</span></span><br><span class="line"><span class="keyword">const</span> content6 = <span class="keyword">await</span> <span class="keyword">this</span>.render(<span class="string">"doc"</span>, <span class="string">"ejs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//切换模板类型，并配置额外的参数</span></span><br><span class="line"><span class="comment">//切换模板类型时，需要在 adapter 配置里配置对应的类型</span></span><br><span class="line"><span class="keyword">const</span> content7 = <span class="keyword">await</span> <span class="keyword">this</span>.render(<span class="string">"doc"</span>, &#123;</span><br><span class="line">  type: <span class="string">"ejs"</span>,</span><br><span class="line">  xxx: <span class="string">"yyy"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>display.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据当前请求解析的 controller 和 action 自动匹配模板文件</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.display();</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定文件名</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.display(<span class="string">"doc"</span>);</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.display(<span class="string">"doc/detail"</span>);</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.display(<span class="string">"doc_detail"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不指定文件名切换模板类型</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.display(<span class="literal">undefined</span>, <span class="string">"ejs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定文件名且切换模板类型</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.display(<span class="string">"doc"</span>, <span class="string">"ejs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//切换模板类型，并配置额外的参数</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.display(<span class="string">"doc"</span>, &#123;</span><br><span class="line">  type: <span class="string">"ejs"</span>,</span><br><span class="line">  xxx: <span class="string">"yyy"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="默认注入的参数"><a href="#默认注入的参数" class="headerlink" title="默认注入的参数"></a>默认注入的参数</h4><p>框架在渲染模板的时候,自动注入了 <code>controller</code>/<code>config</code>/<code>ctx</code>变量,可以直接在模板里调用方法,获取配置<br><code>controller</code><br>当前控制器实例,在模板里可以直接调用控制器上的属性和方法.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; if controller.type === 'xxx'&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>当前 type 为 xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; endif &#125;&#125;</span><br></pre></td></tr></table></figure><p><code>config</code><br>所有的配置，在模板里可以直接通过 <code>config.xxx</code>来获取配置，如果属性不存在，那么值为 <code>undefined</code>。<br><code>ctx</code><br>当前请求的 Context 对象，在模板里可以直接通过 <code>ctx.xxx</code>调用其属性或者 <code>ctx.yyy()</code>调用其方法。<br>如果是调用其方法，那么方法必须为一个 <code>同步方法</code>。</p><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><p>在 ThinkJS 中，当用户访问一个 URL 时，最后是通过 <code>controller</code>里具体的 <code>action</code>来响应的。所以就需要解析出 URL 对应的<code>controller</code> 和<code>action</code>，这个解析工作是通过 <code>think-router</code>模块实现的。</p><h4 id="think-router-配置"><a href="#think-router-配置" class="headerlink" title="think-router 配置"></a>think-router 配置</h4><p>think-router 是一个 middleware，项目创建时默认已经加到配置文件 <code>src/config/middleware.js</code>里了，其中 options 支持如下的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  &#123;</span><br><span class="line">    handle: <span class="string">"router"</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="comment">//多模块项目下，默认的模块名。默认值为 home</span></span><br><span class="line">      defaultModule: <span class="string">"home"</span>,</span><br><span class="line">      <span class="comment">//默认的控制器名，默认值为 index</span></span><br><span class="line">      defaultController: <span class="string">"index"</span>,</span><br><span class="line">      <span class="comment">//默认的操作名，默认值为 index</span></span><br><span class="line">      defaultAction: <span class="string">"index"</span>,</span><br><span class="line">      <span class="comment">//默认去除的 pathname 前缀，默认值为 []</span></span><br><span class="line">      prefix: [],</span><br><span class="line">      <span class="comment">//默认去除的 pathname 后缀，默认值为</span></span><br><span class="line">      suffix: [<span class="string">".html"</span>],</span><br><span class="line">      <span class="comment">//在不匹配情况下是否使用默认路由解析，默认值为 true</span></span><br><span class="line">      enableDefaultRouter: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//子域名映射下的偏移量，默认值为 2</span></span><br><span class="line">      subdomainOffset: <span class="number">2</span>,</span><br><span class="line">      <span class="comment">//子域名映射列表，默认为 &#123;&#125;</span></span><br><span class="line">      subdomain: &#123;&#125;,</span><br><span class="line">      <span class="comment">//多模块项目下，禁止访问的模块列表，默认为 []</span></span><br><span class="line">      denyModules: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="路由对路径的处理"><a href="#路由对路径的处理" class="headerlink" title="路由对路径的处理"></a>路由对路径的处理</h4><p>当用户访问一个 URL 时,最终执行那个模块下那个控制器的那个操作,这是由路由解析后来决定的.具体的流程为:</p><ol><li>首先路由会将 URL 解析为 pathname<br>例如: <code>http://127.0.0.1:8360/test/index.html</code>, 将 URL 进行解析(去除 host 信息)得到的 pathname 为 <code>/test/index.html</code></li><li>然后会对 pathname 过滤<br>因为有时候为了搜索引擎优化或者一些其他的原因, URL 上会多加一些东西. 比如: 当前页面是一个动态页面, 但 URL 最后加了 <code>.html</code>, 这样对搜索引擎更加友好. 但这些在后续的路由解析中是无用的, 需要去除.<br>默认会去除配置的 pathname 前缀和后缀内容, 以及自动去除左右的 <code>/</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pathname_prefix: <span class="string">""</span>,</span><br><span class="line">pathname_suffix: <span class="string">".html"</span></span><br></pre></td></tr></table></figure><p>因此经过路由处理后, 会拿到干净的 pathname, 我们就可以根据这个 pathname 来判断执行哪个模块下哪个控制器的哪个操作了.</p><p>例如:</p><ul><li><code>http://127.0.0.1:8360/test/index.html</code> URL</li><li><code>/test/index.html</code> 解析</li><li><code>test/index</code> 过滤</li><li>路由识别默认根据 <code>模块/控制器/操作/参数1/参数1值/参数2/参数2值</code> 来识别过滤后的 pathname</li><li>当解析 pathname 没有对应的值时, 便使用对应的默认值<ul><li>其中<code>模块</code>默认值为 <code>home</code>, <code>controller</code> 默认值为 <code>index</code>, <code>action</code> 默认值为 <code>index</code></li><li>大小写转换</li><li>路由识别后, module、controller 和 action 值都会自动转为小写, 如果 action 值里有 <code>_</code>, 会作一些转化, 如: 假设识别后的 controller 值为 <code>index</code>, action 值为 <code>user_add</code>, 那么对应的 action 方法名为 <code>userAddAction</code>, 但模版名还是 <code>index_user_add.html</code></li></ul></li><li>这里要分项目是单模块还是多模块的<ul><li>如果是单模块项目的话,上面的 URL 会调用 <code>home</code> 模块(module)的 <code>test</code> 控制器(controller)的 <code>index</code> 操作(action)<ul><li>即: <code>src/controller/index.js#indexAction</code></li></ul></li><li>如果是多模块项目的话,上面的 URL 会调用 <code>test</code> 模块(module)的 <code>index</code> 控制器(controller)的 <code>index</code> 操作(action)<ul><li>即: <code>src/test/controller/index.js#indexAction</code></li></ul></li></ul></li><li>默认的视图文件路径为 <code>view/[module]/[controller]_[action].html</code> 即 <code>模块/控制器_操作.html</code></li><li>因此 <code>display()</code> 时对应的视图为: <code>view/home/index_index.html</code>或者是<code>view/test/index_index.html</code></li></ul><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>项目中，有时候除了查询数据库等操作外，也需要调用远程的一些接口，如：调用 GitHub 的接口、调用发送短信的接口等等。</p><p>这种功能放在 Model 下是不太合适的，为此，框架提供了 Service 来解决此类问题。</p><p>Service 文件存放在 <code>src/service/</code>（多模块在 <code>src/common/service/</code>）目录下，文件内容格式如下：</p><figure class="highlight javascript"><figcaption><span>src/service/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  xxx() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Service 都继承 think.Service 基类，但该基类不提供任何方法，可以通过 Extend 进行扩展。</p><p>可以在项目根目录下通过<code>thinkjs service xxx</code>命令创建 service 文件，支持多级目录。<br>项目启动时,会扫描项目下所有的 services 文件,并存放到 <code>think.app.services</code>对象下,实例化 Services 类时,会从该对象上查找对应的文件,可以通过<code>think.service</code> <code>ctx.service</code> <code>controller.service</code> 获取到 Services 的实例,然后使用该实例上定义的方法,具体的获得方法类似于下面 Model 实例的获取.</p><h4 id="无参数类的实例化"><a href="#无参数类的实例化" class="headerlink" title="无参数类的实例化"></a>无参数类的实例化</h4><figure class="highlight javascript"><figcaption><span>src/service/sms.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">Service</span> </span>&#123;</span><br><span class="line">  xxx() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化，没有任何参数</span></span><br><span class="line"><span class="keyword">const</span> sms = think.service(<span class="string">"sms"</span>);</span><br><span class="line">sms.xxx();</span><br><span class="line"><span class="comment">// 多模块项目的实例化</span></span><br><span class="line"><span class="comment">// const sms = think.service('sms', 'home');</span></span><br></pre></td></tr></table></figure><h4 id="有参数类的实例化"><a href="#有参数类的实例化" class="headerlink" title="有参数类的实例化"></a>有参数类的实例化</h4><figure class="highlight javascript"><figcaption><span>src/service/sms.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(key, secret) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.secret = secret;</span><br><span class="line">  &#125;</span><br><span class="line">  xxx() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的实例化</span></span><br><span class="line"><span class="keyword">const</span> sms = think.service(<span class="string">"sms"</span>, key, secret);</span><br><span class="line">sms.xxx();</span><br><span class="line"><span class="comment">// 多模块项目的实例化</span></span><br><span class="line"><span class="comment">// 指定从 home 下查找 sms 的 service 类</span></span><br><span class="line"><span class="comment">// const sms = think.service('sms', 'home', key, secret)</span></span><br></pre></td></tr></table></figure><h4 id="扩展-Services-类"><a href="#扩展-Services-类" class="headerlink" title="扩展 Services 类"></a>扩展 Services 类</h4><p><code>think.service</code>基类没有提供任何方法,如果需要可以在<code>src/extend/service.js</code>中定义,然后就可以在项目中直接使用这个方法</p><figure class="highlight javascript"><figcaption><span>src/extend/service.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getDataFromApi() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>src/service/sms.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> xxx() &#123;</span><br><span class="line">    <span class="comment">// 这个访问 extend/service.js 扩展的方法</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.getDatafromApi();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>service 类中,调用 model 数据库操作,或者调用其他接口,然后把得到的数据再返回给 Controller,起到一个承上启下的作用</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>thinkjs 默认没有提供模型的功能,需要添加相应的扩展来支持,对应的扩展为 <code>think-model</code>.修改的配置文件<code>src/config/extend.js</code> 和 <code>src/config/adapter.js</code></p><figure class="highlight javascript"><figcaption><span>src/config/extend.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> model = <span class="built_in">require</span>(<span class="string">"think-model"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  model(think.app) <span class="comment">// 让框架支持模型的功能</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>添加模型的扩展后,会添加 <code>think.Model</code>/<code>think.model</code>/<code>ctx.model</code>/<code>controller.model</code>/<code>service.model</code>可以在文件中通过对应的方法获得 model 的实例.</p><figure class="highlight javascript"><figcaption><span>src/config/adapter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'think-model-mysql'</span>);</span><br><span class="line"></span><br><span class="line">exports.model = &#123;</span><br><span class="line">    type: <span class="string">'mysql'</span>, <span class="comment">// 默认使用的类型，调用时可以指定参数切换</span></span><br><span class="line">    common: &#123; <span class="comment">// 通用配置</span></span><br><span class="line">        logConnect: <span class="literal">true</span>, <span class="comment">// 是否打印数据库连接信息</span></span><br><span class="line">        logSql: <span class="literal">true</span>, <span class="comment">// 是否打印 SQL 语句</span></span><br><span class="line">        logger: <span class="function"><span class="params">msg</span> =&gt;</span> think.logger.info(msg) <span class="comment">// 打印信息的 logger</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mysql: &#123; <span class="comment">// mysql 配置</span></span><br><span class="line">        handle: mysql</span><br><span class="line">        user: <span class="string">'root'</span>, <span class="comment">// 用户名</span></span><br><span class="line">        password: <span class="string">''</span>, <span class="comment">// 密码</span></span><br><span class="line">        database: <span class="string">''</span>, <span class="comment">// 数据库</span></span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>, <span class="comment">// host</span></span><br><span class="line">        port: <span class="number">3306</span>, <span class="comment">// 端口</span></span><br><span class="line">        connectionLimit: <span class="number">1</span>, <span class="comment">// 连接池的连接个数，默认为 1</span></span><br><span class="line">        <span class="comment">// 数据表前缀，</span></span><br><span class="line">        <span class="comment">//如果一个数据库里有多个项目，那项目之间的数据表可以通过前缀来区分</span></span><br><span class="line">        prefix: <span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mysql2: &#123; <span class="comment">// 另一个 mysql 的配置</span></span><br><span class="line">        handle: mysql</span><br><span class="line">    &#125;,</span><br><span class="line">    sqlite: &#123; <span class="comment">// sqlite 配置</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    postgresql: &#123; <span class="comment">// postgresql 配置</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中如果需要切换 Model 的类型,可以在调用 model 时通过不同的 type 区分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用默认的数据库配置，默认的 type 为 mysql，那么就是使用 mysql 的配置</span></span><br><span class="line"><span class="keyword">const</span> user1 = think.model(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">// 使用 mysql2 的配置</span></span><br><span class="line"><span class="keyword">const</span> user2 = think.model(<span class="string">"user"</span>, <span class="string">"mysql2"</span>);</span><br><span class="line"><span class="comment">// 使用 sqlite 的配置</span></span><br><span class="line"><span class="keyword">const</span> user3 = think.model(<span class="string">"user"</span>, <span class="string">"sqlite"</span>);</span><br><span class="line"><span class="comment">// 使用 postgresql 的配置</span></span><br><span class="line"><span class="keyword">const</span> user4 = think.model(<span class="string">"user"</span>, <span class="string">"postgresql"</span>);</span><br></pre></td></tr></table></figure><p>thinkjs 框架有个方便的地方就是 你可以在项目的任何地方获得 Model 的实例,然后使用该实例上定义的方法,这一点和 Service 一样</p><h4 id="实例化模型"><a href="#实例化模型" class="headerlink" title="实例化模型"></a>实例化模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">think.model(<span class="string">"user"</span>); <span class="comment">// 获取模型的实例</span></span><br><span class="line">think.model(<span class="string">"user"</span>, <span class="string">"sqlite"</span>); <span class="comment">// 获取模型的实例，修改数据库的类型</span></span><br><span class="line">think.model(<span class="string">"user"</span>, &#123;</span><br><span class="line">  <span class="comment">// 获取模型的实例，修改类型并添加其他的参数</span></span><br><span class="line">  type: <span class="string">"sqlite"</span>,</span><br><span class="line">  aaa: <span class="string">"bbb"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获取模型的实例，指定为 admin 模块（多模块项目下有效）</span></span><br><span class="line">think.model(<span class="string">"user"</span>, &#123;&#125;, <span class="string">"admin"</span>);</span><br></pre></td></tr></table></figure><h4 id="ctx-model"><a href="#ctx-model" class="headerlink" title="ctx.model"></a>ctx.model</h4><p>实例化模型类，获取配置后调用 think.model 方法，多模块项目下会获取当前模块下的配置.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cosnt user = ctx.model(<span class="string">'user'</span>);</span><br></pre></td></tr></table></figure><h4 id="controller-model"><a href="#controller-model" class="headerlink" title="controller.model"></a>controller.model</h4><p>实例化模型类，获取配置后调用 think.model 方法，多模块项目下会获取当前模块下的配置.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> indexAction() &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">this</span>.model(<span class="string">"user"</span>); <span class="comment">// controller 里实例化模型</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> user.select();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.success(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Service-model"><a href="#Service-model" class="headerlink" title="Service.model"></a>Service.model</h4><p>实例化模型类,等同于<code>think.model</code></p><p>thinkjs 对数据库的增删改查的操作封装具体请查看 think.js 的官网</p><h3 id="Cookie-amp-amp-Session"><a href="#Cookie-amp-amp-Session" class="headerlink" title="Cookie &amp;&amp; Session"></a>Cookie &amp;&amp; Session</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>thinkjs 中对 cookie 的配置代码在<code>src/config/config.js</code>中修改,支持如下的配置:</p><ul><li><code>maxAge:</code> cookie 的超时时间，表示当前时间（Date.now()）之后的毫秒数。</li><li><code>expires:</code> Date 对象，表示 cookie 的到期时间（不指定的话，默认是在会话结束时过期）。</li><li><code>path:</code> 字符串，表示 cookie 的路径（默认是/）。</li><li><code>domain:</code> 字符串，表示 cookie 的域（没有默认值）。</li><li><code>secure:</code> 布尔值，表示是否只通过 HTTPS 发送该 cookie（false 时默认通过 HTTP 发送，true 时默认通过 HTTPS 发送）。</li><li><code>httpOnly:</code> 布尔值，表示是否只通过 HTTP(S)发送该 cookie，而不能被客户端的 JavaScript 访问到（默认是 true）。</li><li><code>sameSite:</code> 布尔值或字符串，表示是否该 cookie 是一个“同源” cookie（默认是 false）。可以将其设置为<code>&#39;strict&#39;</code>，<code>&#39;lax&#39;</code>，或<code>true</code> （等价于 strict）。</li><li><code>overwrite:</code> 布尔值，表示是否覆盖以前设置的同名 cookie（默认为 false）。如果设为 true，在同一个请求中设置的相同名称（不管路径或域）的所有 cookie 将在设置此 cookie 时从 Set-Cookie 头中过滤掉</li><li><code>signed:</code> 布尔值，表示是否要将该 cookie 签名（默认是 false）。如果设为 true，还会发送另一个带有.sig 后缀的同名 cookie，值为一个 27 字节的 url-safe base64 SHA1 值，表示<em>cookie-name </em> = <em> cookie-value</em>的散列值，相对于第一个 Keygrip 键。 此签名密钥用于在下次接收到 cookie 时检测篡改。</li></ul><p>一般配置:</p><figure class="highlight javascript"><figcaption><span>src/config/config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    cookie: &#123;</span><br><span class="line">        domain: <span class="string">''</span>,<span class="comment">//cookie 的域</span></span><br><span class="line">        path: <span class="string">'/'</span>,<span class="comment">//cookie 的路径</span></span><br><span class="line">        maxAge: <span class="number">10</span> _ <span class="number">3600</span> _ <span class="number">1000</span>, <span class="comment">// 10 个小时过期时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>thinkjs 支持 cookie 的操作,具体代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 cookie</span></span><br><span class="line"><span class="keyword">const</span> theme = <span class="keyword">this</span>.cookie(<span class="string">"theme"</span>);</span><br><span class="line"><span class="comment">// 设置 cookie</span></span><br><span class="line"><span class="keyword">this</span>.cookie(<span class="string">"theme"</span>, <span class="string">"gray"</span>);</span><br><span class="line"><span class="comment">// 设定 cookie 时指定额外的配置</span></span><br><span class="line"><span class="keyword">this</span>.cookie(<span class="string">"theme"</span>, <span class="string">"yellow"</span>, &#123;</span><br><span class="line">  maxAge: <span class="number">10</span> * <span class="number">1000</span>,</span><br><span class="line">  path: <span class="string">"/theme"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//删除 cookie</span></span><br><span class="line"><span class="keyword">this</span>.cookie(<span class="string">"theme"</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//如果设置的时候有 domain 和 path 的操作</span></span><br><span class="line"><span class="comment">//删除的时候同样也要清空,否则会因为不匹配导致操作失败</span></span><br><span class="line"><span class="keyword">this</span>.cookie(<span class="string">"theme"</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">  domain: <span class="string">""</span>,</span><br><span class="line">  path: <span class="string">""</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>框架通过<code>think-session</code>来扩展支持,需要配置的文件:</p><figure class="highlight javascript"><figcaption><span>src/config/extend.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">"think-session"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = [session];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>src/config/adapter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileSession = <span class="built_in">require</span>(<span class="string">"think-session-file"</span>);</span><br><span class="line"></span><br><span class="line">exports.session = &#123;</span><br><span class="line">  type: <span class="string">"file"</span>,</span><br><span class="line">  common: &#123;</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      name: <span class="string">"thinkjs"</span></span><br><span class="line">      <span class="comment">// keys: ['werwer', 'werwer'],</span></span><br><span class="line">      <span class="comment">// signed: true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  file: &#123;</span><br><span class="line">    handle: fileSession,</span><br><span class="line">    sessionPath: path.join(think.ROOT_PATH, <span class="string">"runtime/session"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>cookie 选项为 session 设置 cookie 时的配置项，会和 think.config(‘cookie’) 值进行合并，name 字段值为 session 对应 cookie 的名字。</p><h4 id="session-操作"><a href="#session-操作" class="headerlink" title="session 操作"></a>session 操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> indexAction() &#123;</span><br><span class="line">    <span class="comment">//读取 session</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.session(<span class="string">"name"</span>);</span><br><span class="line">    <span class="comment">//设置 session</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.session(<span class="string">"name"</span>, <span class="string">"value"</span>);</span><br><span class="line">    <span class="comment">//删除整个 session</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.session(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><ul><li><a href="https://github.com/f2e-journey/xueqianban/issues/47" target="_blank" rel="noopener">我的 thinkjs 之旅</a></li><li><a href="https://thinkjs.org/zh-cn/doc/3.0/index.html" target="_blank" rel="noopener">thinkjs 官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;thinkjs 项目整合了 koa2.x,兼容了 koa 的所有功能, 同时封装了一些功能,MVC 的架构让开发变的更简单,条理&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.tiankai.party/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.tiankai.party/tags/nodejs/"/>
    
      <category term="thinkjs" scheme="http://www.tiankai.party/tags/thinkjs/"/>
    
  </entry>
  
</feed>
