<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiankai&#39;s Blog</title>
  
  <subtitle>或碌碌无为,或轰轰烈烈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tiankai.party/"/>
  <updated>2019-12-25T07:09:20.848Z</updated>
  <id>http://www.tiankai.party/</id>
  
  <author>
    <name>tiankai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对fetch请求进行响应拦截处理</title>
    <link href="http://www.tiankai.party/posts/62600/"/>
    <id>http://www.tiankai.party/posts/62600/</id>
    <published>2019-12-25T07:08:25.000Z</published>
    <updated>2019-12-25T07:09:20.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>占坑<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;占坑&lt;br&gt;
    
    </summary>
    
      <category term="http" scheme="http://www.tiankai.party/categories/http/"/>
    
    
      <category term="fetch" scheme="http://www.tiankai.party/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>基于antd封装的模态框新增编辑组件</title>
    <link href="http://www.tiankai.party/posts/54457/"/>
    <id>http://www.tiankai.party/posts/54457/</id>
    <published>2019-12-11T09:07:06.000Z</published>
    <updated>2019-12-25T07:06:27.290Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在项目中有很多类似的功能，比如说新增的时候弹出一个模态框，填写表单后提交完成新增，或者是编辑的时候弹出模态框，填写表单后提交完成编辑。所以我基于<code>antd</code>做了一个封装,可以根据<code>JSON</code>数据来生成一个，表单提交模态框。<br><a id="more"></a><br>先上截图：<br><img src="/images/antModal-1.png" alt="tpms-select"><br><img src="/images/antModal-2.png" alt="tpms-treeselect"></p><p>从截图可以看出生成的表单模态框中表单类型可以是下拉选择、树形选择也可以是单选框、多选框或者是文件上传，而生成这些只需要我们写一个<code>JSON</code>对象就可以。</p><h2 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formProps = &#123;</span><br><span class="line">  modalTitle: <span class="string">"添加需求意向"</span>,</span><br><span class="line">  record: [],</span><br><span class="line">  title: &#123;</span><br><span class="line">    name: <span class="string">"标题"</span>,</span><br><span class="line">    actual: <span class="string">"title"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  desc: &#123;</span><br><span class="line">    name: <span class="string">"描述"</span>,</span><br><span class="line">    actual: <span class="string">"desc"</span>,</span><br><span class="line">    rules: [&#123; <span class="attr">required</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">"请填写描述信息"</span> &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  projNo: &#123;</span><br><span class="line">    name: <span class="string">"项目编号"</span>,</span><br><span class="line">    actual: <span class="string">"proj_no"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  pmUserNo: &#123;</span><br><span class="line">    name: <span class="string">"项目经理工号"</span>,</span><br><span class="line">    actual: <span class="string">"pm_user_no"</span>,</span><br><span class="line">    inputProps: &#123;</span><br><span class="line">      type: <span class="string">"treeSelect"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: [&#123; <span class="attr">required</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">"请选择项目经理工号"</span> &#125;],</span><br><span class="line">    options: <span class="keyword">this</span>.state.proGroup</span><br><span class="line">  &#125;,</span><br><span class="line">  acptUserNo: &#123;</span><br><span class="line">    name: <span class="string">"受理人员工编号"</span>,</span><br><span class="line">    actual: <span class="string">"acpt_user_no"</span>,</span><br><span class="line">    inputProps: &#123;</span><br><span class="line">      type: <span class="string">"treeSelect"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: [&#123; <span class="attr">required</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">"请选择受理人员工编号"</span> &#125;],</span><br><span class="line">    options: <span class="keyword">this</span>.state.proGroup</span><br><span class="line">  &#125;,</span><br><span class="line">  dept_no: &#123;</span><br><span class="line">    name: <span class="string">"提出部门"</span>,</span><br><span class="line">    actual: <span class="string">"dept_no"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  attach: &#123;</span><br><span class="line">      name: <span class="string">"附件"</span>,</span><br><span class="line">      actual: <span class="string">"attach"</span>,</span><br><span class="line">      inputProps: &#123;</span><br><span class="line">        type: <span class="string">"upload"</span>,</span><br><span class="line">        uploadProps: &#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  status: &#123;</span><br><span class="line">    name: <span class="string">"状态"</span>,</span><br><span class="line">    actual: <span class="string">"status"</span>,</span><br><span class="line">    inputProps: &#123;</span><br><span class="line">      type: <span class="string">"select"</span>,</span><br><span class="line">      selectProps: &#123; <span class="attr">selName</span>: <span class="string">"arg_name"</span>, <span class="attr">selVal</span>: <span class="string">"arg_value"</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: [&#123; <span class="attr">required</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">"请选择状态"</span> &#125;],</span><br><span class="line">    options: status</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们来解释一下每个字段的意思：</p><ul><li><code>modalTitle</code>: 这个是展示模态框标题的</li><li><code>record</code>: 如果是新增那么<code>record</code>值为空对象或者数组，如果为编辑，那值为对象，对象的<code>key</code>为每个表单对象的<code>actual</code>字段</li><li><p>针对每个表单对象来说，以上面的<code>status</code>举例:</p><ul><li>表单对象的Key(<code>status</code>)可以随意，真实取值的是<code>actual</code>字段的值（这里建议写成一样的）</li><li><code>name</code> <code>FormItem</code>组件的<code>label</code></li><li><code>actual</code>表单提交到后端时的字段名称</li><li><p><code>inputProps</code>标识表单类型和其他表单属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">areaID: &#123;</span><br><span class="line">  name: <span class="string">'区域编号'</span>,</span><br><span class="line">  rules: [&#123; <span class="attr">required</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">  inputProps: &#123; <span class="attr">disabled</span>: <span class="literal">true</span>, <span class="attr">type</span>: <span class="string">'number'</span> &#125;,</span><br><span class="line">  actual: <span class="string">'area_id'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>  要注意的是，如果表单为下拉选，可以在这里标明<code>options</code>的<code>key</code>和<code>value</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputProps: &#123;</span><br><span class="line">    type: <span class="string">"select"</span>,</span><br><span class="line">    selectProps: &#123; <span class="attr">selName</span>: <span class="string">"arg_name"</span>, <span class="attr">selVal</span>: <span class="string">"arg_value"</span> &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>rules</code>表单的规则</p></li><li><p><code>options</code>如果表单为下拉选的时候需要，对于<code>status</code>表单对象来说，他的<code>options</code>应该是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> status = [</span><br><span class="line">  &#123; <span class="attr">arg_value</span>: <span class="string">"1"</span>, <span class="attr">arg_name</span>: <span class="string">"提交"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">arg_value</span>: <span class="string">"2"</span>, <span class="attr">arg_name</span>: <span class="string">"受理"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">arg_value</span>: <span class="string">"3"</span>, <span class="attr">arg_name</span>: <span class="string">"分配"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">arg_value</span>: <span class="string">"9"</span>, <span class="attr">arg_name</span>: <span class="string">"拒绝"</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>  它的<code>key</code>,<code>value</code>正好对应<code>inputProps</code>重点<code>selName</code>,<code>selVal</code></p></li><li><p>如果多个表单对象是展示在一行的那么这几个表单对象应该这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line"> groups3: &#123;</span><br><span class="line">    revenuesV0: &#123;</span><br><span class="line">      name: <span class="string">`<span class="subst">$&#123;moment().format(<span class="string">'YYYY'</span>)&#125;</span>年财政总收入`</span>,</span><br><span class="line">      actual: <span class="string">'revenues_v0'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    revenuesV1: &#123;</span><br><span class="line">      name: <span class="string">`<span class="subst">$&#123;moment()</span></span></span><br><span class="line"><span class="string"><span class="subst">        .subtract(<span class="number">1</span>, <span class="string">'y'</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">        .format(<span class="string">'YYYY'</span>)&#125;</span>年财政总收入`</span>,</span><br><span class="line">      actual: <span class="string">'revenues_v1'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    revenuesV2: &#123;</span><br><span class="line">      name: <span class="string">`<span class="subst">$&#123;moment()</span></span></span><br><span class="line"><span class="string"><span class="subst">        .subtract(<span class="number">2</span>, <span class="string">'y'</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">        .format(<span class="string">'YYYY'</span>)&#125;</span>年财政总收入`</span>,</span><br><span class="line">      actual: <span class="string">'revenues_v2'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  重要的<code>groups</code>,至于后面的数字只是为了标明第几组。</p></li></ul></li></ul><h2 id="封装代码"><a href="#封装代码" class="headerlink" title="封装代码"></a>封装代码</h2><figure class="highlight javascript"><figcaption><span>ModalForm.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Form,</span><br><span class="line">  Modal,</span><br><span class="line">  Select,</span><br><span class="line">  Row,</span><br><span class="line">  Col,</span><br><span class="line">  Input,</span><br><span class="line">  DatePicker,</span><br><span class="line">  Upload,</span><br><span class="line">  Button,</span><br><span class="line">  Icon,</span><br><span class="line">  Spin,</span><br><span class="line">  InputNumber,</span><br><span class="line">  Radio,</span><br><span class="line">  TreeSelect</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">"./ModalForm.less"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; TextArea &#125; = Input;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> radioStyle = &#123;</span><br><span class="line">  display: <span class="string">"block"</span>,</span><br><span class="line">  height: <span class="string">"30px"</span>,</span><br><span class="line">  lineHeight: <span class="string">"30px"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeInputType</span>(<span class="params">inputProps, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (inputProps &amp;&amp; inputProps.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"treeSelect"</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;TreeSelect</span><br><span class="line">          treeData=&#123;options &amp;&amp; options.length &amp;&amp; options.length &gt; <span class="number">0</span> &amp;&amp; options&#125;</span><br><span class="line">        &gt;<span class="xml"><span class="tag">&lt;/<span class="name">TreeSelect</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"select"</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;Select&gt;</span><br><span class="line">          &#123;options.map(<span class="function">(<span class="params">val, idx</span>) =&gt;</span> (</span><br><span class="line">            &lt;Select.Option key=&#123;idx&#125; value=&#123;val[inputProps.selectProps.selVal]&#125;&gt;</span><br><span class="line">              &#123;val[inputProps.selectProps.selName]&#125;</span><br><span class="line">            &lt;<span class="regexp">/Select.Option&gt;</span></span><br><span class="line"><span class="regexp">          ))&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Select&gt;</span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"date"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">DatePicker</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> "<span class="attr">100</span>%" &#125;&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">    case "textarea":</span></span><br><span class="line">      return &lt;TextArea autosize /&gt;;</span><br><span class="line">    case "radio":</span><br><span class="line">      return (</span><br><span class="line">        &lt;Radio.Group style=&#123;&#123; marginLeft: "30px" &#125;&#125;&gt;</span><br><span class="line">          &#123;options.map((addr, idx) =&gt; &#123;</span><br><span class="line">            return (</span><br><span class="line">              &lt;Radio style=&#123;radioStyle&#125; value=&#123;addr.id&#125; key=&#123;addr.id || idx&#125;&gt;</span><br><span class="line">                选址-</span><br><span class="line">                &#123;idx + 1&#125;</span><br><span class="line">              &lt;/Radio&gt;</span><br><span class="line">            );</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">        &lt;/Radio.Group&gt;</span><br><span class="line">      );</span><br><span class="line">    case "upload":</span><br><span class="line">      return (</span><br><span class="line">        &lt;Upload &#123;...inputProps.upLoadProps&#125;&gt;</span><br><span class="line">          &lt;Button&gt;</span><br><span class="line">            &lt;Icon type="upload" /&gt; 点击上传</span><br><span class="line">          &lt;/Button&gt;</span><br><span class="line">        &lt;/Upload&gt;</span><br><span class="line">      );</span><br><span class="line">    case "number":</span><br><span class="line">      return &lt;InputNumber style=&#123;&#123; width: "200px" &#125;&#125; /&gt;;</span><br><span class="line">    default:</span><br><span class="line">      return &lt;Input &#123;...(inputProps &amp;&amp; inputProps)&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const WrapperModalFrom = Form.create()(</span><br><span class="line">  class ModalForm extends React.PureComponent &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      const &#123;</span><br><span class="line">        form: &#123; getFieldDecorator &#125;,</span><br><span class="line">        formData,</span><br><span class="line">        isLoading,</span><br><span class="line">        style,</span><br><span class="line">        width,</span><br><span class="line">        formItemLayout,</span><br><span class="line">        isSpinLoading = false</span><br><span class="line">      &#125; = this.props;</span><br><span class="line">      console.log("formData: ", formData);</span><br><span class="line">      const &#123; record, modalTitle, ...formOther &#125; = formData &amp;&amp; formData;</span><br><span class="line">      return (</span><br><span class="line">        &lt;Modal</span><br><span class="line">          title=&#123;modalTitle&#125;</span><br><span class="line">          visible=&#123;this.props.visible&#125;</span><br><span class="line">          onOk=&#123;this.props.onOk&#125;</span><br><span class="line">          onCancel=&#123;this.props.onCancel&#125;</span><br><span class="line">          width=&#123;width&#125;</span><br><span class="line">          confirmLoading=&#123;isLoading&#125;</span><br><span class="line">          style=&#123;style&#125;</span><br><span class="line">          className=&#123;styles.modalForm&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;Spin spinning=&#123;isSpinLoading&#125;&gt;</span><br><span class="line">            &lt;Form&gt;</span><br><span class="line">              &#123;formData &amp;&amp;</span><br><span class="line">                Object.keys(formOther).map((item, idx) =&gt; &#123;</span><br><span class="line">                  if (/groups/gi.test(item)) &#123;</span><br><span class="line">                    return (</span><br><span class="line">                      &lt;Row key=&#123;idx&#125; gutter=&#123;10&#125;&gt;</span><br><span class="line">                        &#123;Object.keys(formOther[item]).map((subItem, subIdx) =&gt; (</span><br><span class="line">                          &lt;Col</span><br><span class="line">                            span=&#123;24 / Object.keys(formOther[item]).length&#125;</span><br><span class="line">                            key=&#123;idx - subIdx&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            &lt;Form.Item</span><br><span class="line">                              label=&#123;formOther[item][subItem].name&#125;</span><br><span class="line">                              &#123;...formItemLayout&#125;</span><br><span class="line">                            &gt;</span><br><span class="line">                              &#123;getFieldDecorator(</span><br><span class="line">                                `$&#123;formOther[item][subItem].actual&#125;`,</span><br><span class="line">                                &#123;</span><br><span class="line">                                  rules: [</span><br><span class="line">                                    ...(formOther[item][subItem].rules || [])</span><br><span class="line">                                  ],</span><br><span class="line">                                  initialValue: record[subItem] || ""</span><br><span class="line">                                &#125;</span><br><span class="line">                              )(</span><br><span class="line">                                judgeInputType(</span><br><span class="line">                                  formOther[item][subItem].inputProps,</span><br><span class="line">                                  formOther[item][subItem].options</span><br><span class="line">                                )</span><br><span class="line">                              )&#125;</span><br><span class="line">                            &lt;/Form.Item&gt;</span><br><span class="line">                          &lt;/Col&gt;</span><br><span class="line">                        ))&#125;</span><br><span class="line">                      &lt;/Row&gt;</span><br><span class="line">                    );</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                    return (</span><br><span class="line">                      &lt;Form.Item</span><br><span class="line">                        label=&#123;formOther[item].name&#125;</span><br><span class="line">                        key=&#123;idx&#125;</span><br><span class="line">                        style=&#123;formOther[item].styles &amp;&amp; formOther[item].styles&#125;</span><br><span class="line">                        &#123;...formItemLayout&#125;</span><br><span class="line">                      &gt;</span><br><span class="line">                        &#123;getFieldDecorator(`$&#123;formOther[item].actual&#125;`, &#123;</span><br><span class="line">                          rules: [...(formOther[item].rules || [])],</span><br><span class="line">                          initialValue: record[item]</span><br><span class="line">                            ? formOther[item].inputProps &amp;&amp;</span><br><span class="line">                              formOther[item].inputProps.type === "select"</span><br><span class="line">                              ? String(record[item])</span><br><span class="line">                              : record[item]</span><br><span class="line">                            : ""</span><br><span class="line">                        &#125;)(</span><br><span class="line">                          judgeInputType(</span><br><span class="line">                            formOther[item].inputProps,</span><br><span class="line">                            formOther[item].options</span><br><span class="line">                          )</span><br><span class="line">                        )&#125;</span><br><span class="line">                      &lt;/Form.Item&gt;</span><br><span class="line">                    );</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)&#125;</span><br><span class="line">            &lt;/Form&gt;</span><br><span class="line">          &lt;/Spin&gt;</span><br><span class="line">        &lt;/Modal&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export default WrapperModalFrom;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;WrapModalFrom</span><br><span class="line">  ref=&#123;formProps&#125;</span><br><span class="line">  visible=&#123;modalShow&#125;</span><br><span class="line">  onOk=&#123;() =&gt; handleCreate()&#125;</span><br><span class="line">  onCancel=&#123;(e: any) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    setModalShow(<span class="literal">false</span>);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  formData=&#123;formData&#125;</span><br><span class="line">  isLoading=&#123;effects[<span class="string">'specialMerchant/add'</span>]&#125;</span><br><span class="line">  isSpinLoading=&#123;effects[<span class="string">'specialMerchant/getType'</span>] || <span class="literal">false</span>&#125;</span><br><span class="line">  width=&#123;<span class="string">'50%'</span>&#125;</span><br><span class="line">  formItemLayout=&#123;formItemLayout&#125;</span><br><span class="line">  style=&#123;&#123; <span class="attr">top</span>: <span class="string">'30px'</span>, <span class="attr">paddingBottom</span>: <span class="string">'0'</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li><code>formProps</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formProps = useRef(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 或者是React.createRef()</span></span><br><span class="line"><span class="comment">// 用来获取`modal`表单提交中的`form`相关属性</span></span><br></pre></td></tr></table></figure><p>例如： <code>handelCreate()</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">handleCreate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    formProps.current.validateFields(<span class="function">(<span class="params">err,values</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'接收到的值为： '</span>,values);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中有很多类似的功能，比如说新增的时候弹出一个模态框，填写表单后提交完成新增，或者是编辑的时候弹出模态框，填写表单后提交完成编辑。所以我基于&lt;code&gt;antd&lt;/code&gt;做了一个封装,可以根据&lt;code&gt;JSON&lt;/code&gt;数据来生成一个，表单提交模态框。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="antd" scheme="http://www.tiankai.party/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>试验一个npm包的生成</title>
    <link href="http://www.tiankai.party/posts/12567/"/>
    <id>http://www.tiankai.party/posts/12567/</id>
    <published>2019-12-05T01:21:16.000Z</published>
    <updated>2019-12-25T02:11:09.808Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前段时间看到了一个把有道词典做成命令行的项目<a href="https://github.com/kenshinji/yddict" target="_blank" rel="noopener">yddict</a>,个人感觉挺有意思的，然后就研究了一下他的代码，萌生了也写一个自己的命令行项目，就产生这个<a href="https://github.com/tiakia/one" target="_blank" rel="noopener">one</a>项目，试验了一把如何发布<code>npm</code>包。<br><a id="more"></a></p><h2 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h2><ul><li>注册npm<br>要发布一个<code>npm</code>包首先要在<a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">npmjs.com</a>注册账号。</li><li>初始化 <code>npm init</code></li><li>安装依赖包 <code>npm install &lt;package-name&gt;</code></li><li><p>编写自己的代码</p><ul><li>在根目录新建<code>index.js</code>（这个要和<code>package.json</code>中的<code>main</code>字段一致），最后要将代码导出到这里。<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    message: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'This is my first npm package'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>发布<code>npm</code>包</p><ul><li><code>npm login</code> 登录在官网注册过的账号</li><li><code>npm publish</code>发布（<code>package.json</code>的<code>name</code>字段为包名）</li></ul></li><li>更新版本<ul><li>更改<code>package.json</code>的<code>version</code>字段（1.0.0 =&gt; 1.0.1）</li><li><code>npm publish</code>更新成功</li></ul></li><li><p>测试</p><ul><li><p>安装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;<span class="keyword">package</span>-name&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'&lt;package-name&gt;'</span>;</span><br><span class="line">message(); <span class="comment">// This is my first npm package</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="tk-one包"><a href="#tk-one包" class="headerlink" title="tk-one包"></a>tk-one包</h2><p>如果是全局包的话有点不一样。需要在<code>package.json</code>中指定一个<code>bin</code>字段用于暴露全局使用的命令：<br><figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"one"</span>: <span class="string">"./index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>然后在<code>index.js</code>文件的头部要加上这句话<br><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br></pre></td></tr></table></figure></p><p>这样才能识别命令.<br>我已经发布为<code>npm</code>包了，可以试验一下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install -g tk-one</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">one</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">npm uninstall -g tk-one</span><br></pre></td></tr></table></figure></p><p>这个命令会将One当天的数据作为图片保存到D盘根目录。还参考了这个项目<a href="https://github.com/Vincedream/NodeMail" target="_blank" rel="noopener">NodeMail</a>用来爬取ONE网站的数据。有兴趣的可以去看看这俩个项目。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>这个用到的知识点有：</p><ul><li>nodejs爬取网站数据</li><li>nodejs将数据返回给前端，或者写入文件中。</li><li>使用canvas将数据绘制成图片转成base64码，通过nodejs保存在本地</li><li>puppeteer截图保存图片</li><li>ejs相关知识</li></ul><p>项目源码在这里可以自己下载下来研究：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tiakia/one.git</span><br><span class="line">npm install</span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间看到了一个把有道词典做成命令行的项目&lt;a href=&quot;https://github.com/kenshinji/yddict&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yddict&lt;/a&gt;,个人感觉挺有意思的，然后就研究了一下他的代码，萌生了也写一个自己的命令行项目，就产生这个&lt;a href=&quot;https://github.com/tiakia/one&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;one&lt;/a&gt;项目，试验了一把如何发布&lt;code&gt;npm&lt;/code&gt;包。&lt;br&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.tiankai.party/categories/nodejs/"/>
    
    
      <category term="npm" scheme="http://www.tiankai.party/tags/npm/"/>
    
      <category term="node" scheme="http://www.tiankai.party/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>postMessage实现跨域</title>
    <link href="http://www.tiankai.party/posts/10356/"/>
    <id>http://www.tiankai.party/posts/10356/</id>
    <published>2019-11-29T01:20:54.000Z</published>
    <updated>2019-12-20T11:36:27.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="跨域方式介绍"><a href="#跨域方式介绍" class="headerlink" title="跨域方式介绍"></a>跨域方式介绍</h2><ul><li><code>JSONP</code>跨域</li><li><code>iframe</code>+<code>domain</code>跨域</li><li><code>nginx</code>反向代理跨域</li><li><code>cors</code>跨域</li><li><code>postMessage</code>跨域</li></ul><a id="more"></a><p>  我们一般常用的<code>cors</code>跨域，通过后端设置<code>Access-Control-Allow-Origin</code>响应头来实现跨域,<code>JSONP</code>是利用<code>script</code>标签的<code>src</code>不受同源策略的约束来实现跨域。<code>JSONP</code> 主要由回调函数和数据两部分组成。回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的 <code>JSON</code> 数据。我们一般可以在全局定义一个回调函数，然后在<code>script</code>标签里传入回调函数即可：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.handleData = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.src = <span class="string">"https://xxxx.com/v0/search?q=xuxi&amp;callback=handleData"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</span><br></pre></td></tr></table></figure></p><p>但是<code>JSONP</code>的跨域方式只支持<code>GET</code>请求。</p><h2 id="postMessage跨域"><a href="#postMessage跨域" class="headerlink" title="postMessage跨域"></a>postMessage跨域</h2><p>使用<code>postMessage</code>跨域我们首先要获取页面的引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window.open方式获取引用</span></span><br><span class="line"><span class="comment">// const popup = window.open("http://localhost:8001/a.html");</span></span><br><span class="line"><span class="comment">// iframe 方式获取引用</span></span><br><span class="line"><span class="comment">// &lt;iframe id="pageA" src="http://localhost:8001/a.html"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="keyword">const</span> popup = <span class="built_in">document</span>.getElementById(<span class="string">"pageA"</span>).contentWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用postMessage发送数据，必须加上域名来指定哪些页面可以接收信息</span></span><br><span class="line">popup.postMessage(<span class="string">'hello world'</span>, <span class="string">'localhost:8001'</span>);</span><br></pre></td></tr></table></figure><p>然后监听<code>message</code>事件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> domin = <span class="string">"http://localhost:8001"</span>;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(</span><br><span class="line">    <span class="string">"message"</span>,</span><br><span class="line">    event =&gt; &#123;</span><br><span class="line">      <span class="comment">// 验证消息发送方是否合格</span></span><br><span class="line">      <span class="keyword">if</span> (event.origin === domin) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"received message: "</span>, event.data);</span><br><span class="line">         event.source.postMessage(<span class="string">'hello'</span>, event.origin);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>event</code>的几个核心属性：</p><ul><li><strong>data</strong>:跨域发送的数据</li><li><strong>origin</strong>:跨域发送数据的窗口</li><li><strong>source</strong>:对发送数据窗口的引用</li></ul><blockquote><p>注意： 必须要在<code>window.onload</code>事件完成后postMessage才能生效</p></blockquote><h2 id="chatRobot"><a href="#chatRobot" class="headerlink" title="chatRobot"></a>chatRobot</h2><p>为了试验<code>postMessage</code>跨域基于腾讯AI做了一个<a href="https://github.com/tiakia/chatRobot" target="_blank" rel="noopener">聊天机器人项目</a>;</p><p><img src="/images/chatRobot.png" alt="/images/chatRobot.png"></p><ol><li><p><strong>PageA</strong>通过<code>node</code>启动服务在<code>localhost:8001</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">"/a.html"</span>) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    <span class="keyword">let</span> data = fs.readFileSync(resolve(__dirname, <span class="string">"./a.html"</span>));</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8001</span>, <span class="string">"127.0.0.1"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"listening at port 127.0.0.1:8001"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>PageB</strong>通过<code>node</code>启动服务在<code>localhost:8000</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> data = fs.readFileSync(path.resolve(__dirname, <span class="string">"./b.html"</span>));</span><br><span class="line">  res.end(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8000</span>, <span class="string">"127.0.0.1"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"pageB listening at port 127.0.0.1:8000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>在浏览器访问<code>localhost:8000</code>就会看到上面的结果。</p><ol start="3"><li><p>然后在<code>PageB</code>中通过<code>postMessage</code>向<code>PageA</code>发送数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> domin = <span class="string">"http://localhost:8001"</span>;</span><br><span class="line">  <span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>);</span><br><span class="line">  <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"></span><br><span class="line">  btn.addEventListener(</span><br><span class="line">    <span class="string">"click"</span>,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (input.value) &#123;</span><br><span class="line">        <span class="comment">// 通过postMessage发送数据</span></span><br><span class="line">        popup.postMessage(input.value, domin);</span><br><span class="line">        input.value = <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">  <span class="comment">//绑定回车事件</span></span><br><span class="line">  <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">      btn.click();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// window.open方式获取引用</span></span><br><span class="line">  <span class="comment">// const popup = window.open("http://localhost:8000/a.html");</span></span><br><span class="line">  <span class="comment">// iframe 方式获取引用</span></span><br><span class="line">  <span class="keyword">const</span> popup = <span class="built_in">document</span>.getElementById(<span class="string">"pageA"</span>).contentWindow;</span><br><span class="line">  <span class="comment">// 发送初始消息</span></span><br><span class="line">  <span class="comment">// popup.postMessage("你好", domin);</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(</span><br><span class="line">    <span class="string">"message"</span>,</span><br><span class="line">    event =&gt; &#123;</span><br><span class="line">      <span class="comment">// 验证消息发送方是否合格</span></span><br><span class="line">      <span class="keyword">if</span> (event.origin === domin) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"received message: "</span>, event.data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>PageB</code>接受到数据后，展示在聊天界面上，然后请求腾讯AI，将返回的数据展示在聊天界面</p></li></ol><p>大体步骤就是这样，其他的关于细节展示方面的问题，有兴趣的可以去<a href="https://github.com/tiakia/chatRobot" target="_blank" rel="noopener">github查看源码</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;跨域方式介绍&quot;&gt;&lt;a href=&quot;#跨域方式介绍&quot; class=&quot;headerlink&quot; title=&quot;跨域方式介绍&quot;&gt;&lt;/a&gt;跨域方式介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSONP&lt;/code&gt;跨域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iframe&lt;/code&gt;+&lt;code&gt;domain&lt;/code&gt;跨域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt;反向代理跨域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cors&lt;/code&gt;跨域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postMessage&lt;/code&gt;跨域&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.tiankai.party/categories/nodejs/"/>
    
    
      <category term="postMessage" scheme="http://www.tiankai.party/tags/postMessage/"/>
    
  </entry>
  
  <entry>
    <title>code-split的几种方式</title>
    <link href="http://www.tiankai.party/posts/16200/"/>
    <id>http://www.tiankai.party/posts/16200/</id>
    <published>2019-11-20T04:06:58.000Z</published>
    <updated>2019-11-25T06:18:13.869Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们在打包项目的时候有时候会遇到打包后的体积过大的问题，这时候会提醒我们使用<br><code>code-split</code>来分割我们的代码，今天我们就来认识一下在react中常见的我们使用的代码分割的<br>方式。<br><a id="more"></a></p><h2 id="import"><a href="#import" class="headerlink" title="import()"></a>import()</h2><p><code>import()</code>允许我们按需的导入组件，只有在组件要加载的时候才会导入，配合<br><code>react-router</code>可以实现我们需要的<code>code-split</code>.</p><p>我们先来看一下，不使用代码分割的<code>react-router</code>代码是怎样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入组件</span></span><br><span class="line"><span class="keyword">import</span> Home form <span class="string">'./containers/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Posts <span class="keyword">from</span> <span class="string">'./containers/Posts'</span>;</span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">'./containers/NotFound'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; </span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/posts/:id"</span> component=&#123;Posts&#125; /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFound&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><p><code>react-router</code>的<code>Switch</code>是只有在路由匹配到后才会加载对应的组件,然而我们是在一开<br>始的时候就导入了所有的组件，当我们的项目很大的时候，这种加载方式会使我们的页面变<br>的很臃肿。所以我们需要使用代码分割，只有在组件要加载的时候才会导入它。</p><h3 id="create-an-Async-Component"><a href="#create-an-Async-Component" class="headerlink" title="create an Async Component"></a>create an Async Component</h3><ul><li><code>src/components/AsyncComponent.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">AsyncComponent</span>(<span class="params">importComponent</span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AsyncComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">default</span>: component &#125; = <span class="keyword">await</span> importComponent();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        component</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> C = <span class="keyword">this</span>.state.component;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> C ? <span class="xml"><span class="tag">&lt;<span class="name">C</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span> : null;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  return AsyncComponent;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>我们创建了一个高阶组件<code>AsyncComponent</code>，它做了这几件事：</p><ul><li>接受一个组件作为参数</li><li>在<code>componentDidMount</code>中，获得传入的组件，设置到<code>state</code>中</li><li><code>render</code>的时候，如果<code>state</code>已经被设置了，那么展示设置的组件，如果没有不展示。</li><li>这样简单的实现了一个按需加载组件</li></ul><p>然后我们使用我们封装的这个高阶组件来重新导入一下上面的组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Route, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> AsyncComponent <span class="keyword">from</span> <span class="string">'src/components/AsyncComponent'</span>;</span><br><span class="line">imoprt AppliedRoute <span class="keyword">from</span> <span class="string">'./components/AppliedRoute'</span>;</span><br><span class="line"><span class="keyword">import</span> AuthenticatedRoute <span class="keyword">from</span> <span class="string">'./components/AuthenticatedRoute'</span>;</span><br><span class="line"><span class="keyword">import</span> UnauthenticatedRoute <span class="keyword">from</span> <span class="string">'./components/UnauthenticatedRoute'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AsyncHome = AsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> imoprt(<span class="string">'./containers/Home'</span>));</span><br><span class="line"><span class="keyword">const</span> AsyncLogin = AsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./containers/Login'</span>));</span><br><span class="line"><span class="keyword">const</span> AsyncNotes = AsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./containers/Notes'</span>));</span><br><span class="line"><span class="keyword">const</span> AsyncSignup = AsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./containers/Signup'</span>));</span><br><span class="line"><span class="keyword">const</span> AsyncNewNote = AsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./containers/NewNote'</span>));</span><br><span class="line"><span class="keyword">const</span> AsyncNotFound = AsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./containers/NotFound'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; childProps &#125;) =&gt; </span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;AppliedRoute </span><br><span class="line">     path=<span class="string">"/"</span></span><br><span class="line">     exact</span><br><span class="line">     component=&#123;AsyncHome&#125;</span><br><span class="line">     props=&#123;childProps&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;UnauthenticatedRoute</span><br><span class="line">     path=<span class="string">"/login"</span></span><br><span class="line">     exact</span><br><span class="line">     component=&#123;AsyncLogin&#125;</span><br><span class="line">     props=&#123;childProps&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;UnauthenticatedRoute</span><br><span class="line">     path=<span class="string">"/signup"</span></span><br><span class="line">     exact</span><br><span class="line">     component=&#123;AsyncSignup&#125;</span><br><span class="line">     props=&#123;childProps&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;AuthenticatedRoute</span><br><span class="line">     path=<span class="string">"/notes/new"</span></span><br><span class="line">     exact</span><br><span class="line">     component=&#123;AsyncNewNote&#125;</span><br><span class="line">     props=&#123;childProps&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;AuthenticatedRoute</span><br><span class="line">     path=<span class="string">'/notes/:id'</span></span><br><span class="line">     exact</span><br><span class="line">     component=&#123;AsyncNotes&#125;</span><br><span class="line">     props=&#123;childProps&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFound&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><p>我们的代码只是在每次引入的时候用<code>AsyncComponent</code>包裹了一下，现在已经是实现了<br><code>code-split</code>了，只有在路由匹配到的时候才会加载对应的组件。</p><h2 id="react-loadable"><a href="#react-loadable" class="headerlink" title="react-loadable"></a>react-loadable</h2><p>实现组件按需加载，社区有成熟的架子，我们可以使用<code>react-loadable</code>来实现上面的功能。</p><ul><li>安装 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-loadable</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LoadingComponent <span class="keyword">from</span> <span class="string">'src/components/LoadingComponent'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AsyncHome = Loadable(&#123;</span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./containers/Home"</span>),</span><br><span class="line">  loading: LoadingComponent</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在组件加载前，界面会显示我们自定义的<code>loading</code>页面。其他的<code>API</code>配置可以查看<br><a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener"><code>react-loadable</code>的官网页面</a></p><h2 id="React-lazy"><a href="#React-lazy" class="headerlink" title="React.lazy()"></a>React.lazy()</h2><p><code>React</code>现在已经是实现了<code>code-split</code>，我们可以通过<code>Suspense</code>和<code>React.lazy()</code>来实<br>现和上面一样的功能，这俩个是成对出现的，<code>loading</code>页面要在<code>Suspense</code>中设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cosnt AsynHome = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./containers/Home'</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">       &lt;Suspense fallback=&#123;&lt;div&gt;loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">         &lt;AsynHome/</span>&gt;</span><br><span class="line">       &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>React.lazy()</code>目前只适用于默认导出的模块。如果要对不是默认导出的模块使用的话可以<br>参考这个：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ManyComponent.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyUnusedConponent = <span class="comment">/* ... */</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyComponent.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; MyComponent <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./ManyComponents.js'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyApp.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; lazy &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> Mycomponent  = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./MyComponent.js'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在打包项目的时候有时候会遇到打包后的体积过大的问题，这时候会提醒我们使用&lt;br&gt;&lt;code&gt;code-split&lt;/code&gt;来分割我们的代码，今天我们就来认识一下在react中常见的我们使用的代码分割的&lt;br&gt;方式。&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="code-split" scheme="http://www.tiankai.party/tags/code-split/"/>
    
  </entry>
  
  <entry>
    <title>nodejs之利用buffer转换数据</title>
    <link href="http://www.tiankai.party/posts/36498/"/>
    <id>http://www.tiankai.party/posts/36498/</id>
    <published>2019-11-11T01:20:27.000Z</published>
    <updated>2019-12-11T09:02:56.875Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Nodejs从8.0版本以后开始对buffer的声明有了区分，原来<code>new Buffer</code>的声明方式已经被废弃了，改为了单独的<code>Buffer.form()</code>,<code>Buffer.alloc()</code>,<code>Buffer.allocUnsafe()</code>。<br><a id="more"></a></p><ul><li><p><code>Buffer.from(array)</code>返回一个新的<code>Buffer</code>，其中包含提供的八位字节数的副本。</p></li><li><p><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code> 返回一个新的<code>Buffer</code>,它与给定的 <code>ArrayBuffer</code> 共享相同的已分配内存。</p></li><li><p><code>Buffer.from(buffer)</code> 返回一个新的<code>Buffer</code>,其中包含给定 <code>Buffer</code> 的内容的副本。</p></li><li><p><code>Buffer.from(string[, encoding])</code> 返回一个新的<code>Buffer</code>，其中包含提供的字符串副本。</p></li><li><p><code>Buffer.alloc(size[, fill [, encoding]])</code> 返回一个指定大小的新建的已初始化的<code>Buffer</code>.此方法比<code>Buffer.allocUnsafe(size)</code>慢，但能确保新建的<code>Buffer</code>实例永远不会包含可能敏感的旧数据。如果<code>size</code>不是数字，则将会跑出<code>TypeError</code></p></li><li><p><code>Buffer.allocUnsafe(size)</code> 和 <code>Buffer.allocUnsafeSlow(size)</code>分别返回一个指定大小的新建的未初始化的<code>Buffer</code>,由于<code>Buffer</code>是未初始化的，因此分配的内存片段可能包含敏感的旧数据。</p></li></ul><p>今天我们用到的就是<code>Buffer.from()</code>，当字符串数据被存储入<code>Buffer</code>实例或从<code>Buffer</code>实例中被提取时，可以指定一个编码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'hello world'</span>, <span class="string">'ascii'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'hex'</span>));</span><br><span class="line"><span class="comment">// 打印: 68656c6c6f20776f726c64</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'base64'</span>));</span><br><span class="line"><span class="comment">// 打印: aGVsbG8gd29ybGQ=</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Buffer.from(<span class="string">'fhqwhgads'</span>, <span class="string">'ascii'</span>));</span><br><span class="line"><span class="comment">// 打印: &lt;Buffer 66 68 71 77 68 67 61 64 73&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(Buffer.from(<span class="string">'fhqwhgads'</span>, <span class="string">'utf16le'</span>));</span><br><span class="line"><span class="comment">// 打印: &lt;Buffer 66 00 68 00 71 00 77 00 68 00 67 00 61 00 64 00 73 00&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Nodejs支持的字符编码"><a href="#Nodejs支持的字符编码" class="headerlink" title="Nodejs支持的字符编码"></a>Nodejs支持的字符编码</h3><ul><li><code>ascii</code></li><li><code>utf8</code></li><li><code>utf16le</code></li><li><code>ucs2</code>: <code>utf16e</code>的别名</li><li><code>base64</code></li><li><code>latin1</code></li><li><code>binary</code></li><li><code>hex</code></li></ul><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p>数据转换都是通过创建一个<code>Buffer</code>,然后通过<code>buf.toString([encoding])</code>转换为所需的数据格式.</p><p>第一步： 转换<code>Buffer</code>数据，<code>Buffer.from(string[,encoding])</code></p><p>第二步： <code>Buffer</code>数据转换为所需的数据<code>buf.toString([encoding])</code></p><h3 id="字符串转换为buffer"><a href="#字符串转换为buffer" class="headerlink" title="字符串转换为buffer"></a>字符串转换为buffer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">const</span> buf = Buffer.from(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line"><span class="comment">// &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString());</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><h3 id="字符串转为base64"><a href="#字符串转为base64" class="headerlink" title="字符串转为base64"></a>字符串转为base64</h3><ul><li><p>base64编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">const</span> buf = Buffer.from(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> base64 = buf.toString(<span class="string">'base64'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(base64);</span><br><span class="line"><span class="comment">// aGVsbG8gd29ybGQ=</span></span><br></pre></td></tr></table></figure></li><li><p>base64解码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> base64Buf = Buffer.from(base64,<span class="string">'base64'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = base64Buf.toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// hello world;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nodejs从8.0版本以后开始对buffer的声明有了区分，原来&lt;code&gt;new Buffer&lt;/code&gt;的声明方式已经被废弃了，改为了单独的&lt;code&gt;Buffer.form()&lt;/code&gt;,&lt;code&gt;Buffer.alloc()&lt;/code&gt;,&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://www.tiankai.party/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.tiankai.party/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>使用高德地图API</title>
    <link href="http://www.tiankai.party/posts/60639/"/>
    <id>http://www.tiankai.party/posts/60639/</id>
    <published>2019-10-24T07:08:53.000Z</published>
    <updated>2019-11-25T01:36:00.440Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以前一直使用的都是百度地图的 API，这次换了高德地图尝试了一下，真香。高德地图它的 API 种类很全，文档例子也很清楚，相比较于百度地图感觉百度好像不常更新维护了。</p><a id="more"></a><p>列举一下用到的功能：</p><ol><li>地图展示，设置中心点、缩放级别</li><li>设置地图遮罩</li><li>设置可视范围</li><li>获取 geoJson 数据画图</li><li>自定义信息展示窗体</li></ol><h3 id="地图的创建"><a href="#地图的创建" class="headerlink" title="地图的创建"></a>地图的创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map;</span><br><span class="line">map = <span class="keyword">new</span> AMap.Map(<span class="string">"container"</span>, &#123;</span><br><span class="line">  resizeEnable: <span class="literal">true</span>, <span class="comment">// 是否监控地图容器尺寸变化</span></span><br><span class="line">  zoom: <span class="number">6</span>,</span><br><span class="line">  zooms: [<span class="number">6</span>, <span class="number">16</span>], <span class="comment">// 初始化地图层级</span></span><br><span class="line">  center: [<span class="number">112.565972</span>, <span class="number">37.865858</span>] <span class="comment">// 初始化地图中心点</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="设置遮罩"><a href="#设置遮罩" class="headerlink" title="设置遮罩"></a>设置遮罩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置遮罩</span></span><br><span class="line"><span class="keyword">new</span> AMap.DistrictSearch(&#123;</span><br><span class="line">  extensions: <span class="string">"all"</span>,</span><br><span class="line">  subdistrict: <span class="number">0</span></span><br><span class="line">&#125;).search(<span class="string">"山西省"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status, result</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 外多边形坐标数组和内多边形坐标数组</span></span><br><span class="line">  <span class="keyword">let</span> outer = [</span><br><span class="line">    <span class="keyword">new</span> AMap.LngLat(<span class="number">-360</span>, <span class="number">90</span>, <span class="literal">true</span>),</span><br><span class="line">    <span class="keyword">new</span> AMap.LngLat(<span class="number">-360</span>, <span class="number">-90</span>, <span class="literal">true</span>),</span><br><span class="line">    <span class="keyword">new</span> AMap.LngLat(<span class="number">360</span>, <span class="number">-90</span>, <span class="literal">true</span>),</span><br><span class="line">    <span class="keyword">new</span> AMap.LngLat(<span class="number">360</span>, <span class="number">90</span>, <span class="literal">true</span>)</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> holes = result.districtList[<span class="number">0</span>].boundaries;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pathArray = [outer];</span><br><span class="line">  pathArray.push.apply(pathArray, holes);</span><br><span class="line">  <span class="keyword">let</span> polygon = <span class="keyword">new</span> AMap.Polygon(&#123;</span><br><span class="line">    pathL: pathArray,</span><br><span class="line">    strokeColor: <span class="string">"#00eeff"</span>,</span><br><span class="line">    strokeWeight: <span class="number">1</span>,</span><br><span class="line">    fillColor: <span class="string">"#ddd"</span>,</span><br><span class="line">    fillOpacity: <span class="number">0.5</span></span><br><span class="line">  &#125;);</span><br><span class="line">  polygon.setPath(pathArray);</span><br><span class="line">  map.add(polygon);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/../images/amap-react-5.png" alt="amap-react-5"></p><h3 id="设置可视范围"><a href="#设置可视范围" class="headerlink" title="设置可视范围"></a>设置可视范围</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置可视范围</span></span><br><span class="line"><span class="comment">//通过 new AMap.Bounds(southWest:LngLat, northEast:LngLat) 或者 map.getBounds() 获得地图Bounds信息</span></span><br><span class="line"><span class="keyword">let</span> bounds = map.getBounds();</span><br><span class="line">map.setLimitBounds(bounds);</span><br></pre></td></tr></table></figure><h3 id="设置分管片区"><a href="#设置分管片区" class="headerlink" title="设置分管片区"></a>设置分管片区</h3><p><code>mapJson</code>为<code>GeoJSON</code>地图数据，这里提供几个网站：</p><ul><li><a href="http://geojson.io/" target="_blank" rel="noopener">获取需要的 GeoJSON 数据</a></li><li><a href="https://geojson-maps.ash.ms/" target="_blank" rel="noopener">获取世界、国家的地图 GeoJSON 数据</a></li><li><a href="https://mapshaper.org/" target="_blank" rel="noopener">GeoJSON 数据精简</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置分管片区</span></span><br><span class="line"><span class="keyword">let</span> geojson = <span class="keyword">new</span> AMap.GeoJSON(&#123;</span><br><span class="line">  geoJSON: mapJson,</span><br><span class="line">  <span class="comment">// 还可以自定义getMarker和getPolyline</span></span><br><span class="line">  getPolygon: <span class="function"><span class="keyword">function</span>(<span class="params">geojson, lnglats</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 计算面积</span></span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">      properties: &#123; color &#125;</span><br><span class="line">    &#125; = geojson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AMap.Polygon(&#123;</span><br><span class="line">      path: lnglats,</span><br><span class="line">      fillOpacity: <span class="number">0.1</span>, <span class="comment">// 面积越大透明度越高</span></span><br><span class="line">      strokeColor: <span class="string">"white"</span>,</span><br><span class="line">      fillColor: color</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">geojson.setMap(map);</span><br></pre></td></tr></table></figure><p><img src="/../images/amap-react-2.png" alt="amap-react-2"></p><h3 id="添加坐标点"><a href="#添加坐标点" class="headerlink" title="添加坐标点"></a>添加坐标点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加点坐标</span></span><br><span class="line"><span class="comment">// marker 为每个坐标点的信息</span></span><br><span class="line">addMarker = <span class="function"><span class="params">marker</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; areaName, longitude, latitude, branchName &#125; = marker;</span><br><span class="line">  <span class="keyword">let</span> icon;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Number</span>(longitude) || !<span class="built_in">Number</span>(latitude)) &#123;</span><br><span class="line">    message.warn(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;branchName&#125;</span>: 坐标错误 - longitude: <span class="subst">$&#123;longitude&#125;</span>,latitude: <span class="subst">$&#123;latitude&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 百度坐标转换为高德坐标</span></span><br><span class="line">  AMap.convertFrom(</span><br><span class="line">    [<span class="built_in">Number</span>(longitude), <span class="built_in">Number</span>(latitude)],</span><br><span class="line">    <span class="string">"baidu"</span>,</span><br><span class="line">    (status, result) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (status === <span class="string">"complete"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> _marker = <span class="keyword">new</span> AMap.Marker(&#123;</span><br><span class="line">          position: [result.locations[<span class="number">0</span>].lng, result.locations[<span class="number">0</span>].lat], <span class="comment">// [Number(longitude), Number(latitude)],</span></span><br><span class="line">          icon: <span class="string">`<span class="subst">$&#123;<span class="built_in">require</span>(<span class="string">"./../../../assets/default.png"</span>)&#125;</span>`</span></span><br><span class="line">        &#125;);</span><br><span class="line">        _marker.setTitle(branchName + <span class="string">"-"</span> + areaName);</span><br><span class="line">        <span class="comment">// 根据不同的分区设置不同的坐标点</span></span><br><span class="line">        <span class="keyword">switch</span> (areaName) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"并州分管区"</span>:</span><br><span class="line">            icon = <span class="built_in">require</span>(<span class="string">"src/assets/area1.png"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"晋阳分管区"</span>:</span><br><span class="line">            icon = <span class="built_in">require</span>(<span class="string">"src/assets/area2.png"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"龙城分管区"</span>:</span><br><span class="line">            icon = <span class="built_in">require</span>(<span class="string">"src/assets/area3.png"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"综改分管区"</span>:</span><br><span class="line">            icon = <span class="built_in">require</span>(<span class="string">"src/assets/area4.png"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            icon = <span class="built_in">require</span>(<span class="string">"src/assets/default.png"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        _marker.setIcon(icon);</span><br><span class="line">        _marker.setMap(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 鼠标点击marker弹出自定义的信息窗体</span></span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        AMap.event.addListener(_marker, <span class="string">"click"</span>, () =&gt; &#123;</span><br><span class="line">          that.showInfo(marker).open(map, _marker.getPosition());</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/../images/amap-react-1.png" alt="amap-react-1"></p><p><img src="/../images/amap-react-4.png" alt="amap-react-4"></p><h3 id="自定义显示窗体"><a href="#自定义显示窗体" class="headerlink" title="自定义显示窗体"></a>自定义显示窗体</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击坐标点显示信息</span></span><br><span class="line">showInfo = <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 实例化信息窗体</span></span><br><span class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> title = <span class="string">`<span class="subst">$&#123;item.branchName&#125;</span>- <span class="subst">$&#123;item.branchNo&#125;</span>`</span>,</span><br><span class="line">    content = [];</span><br><span class="line">  content.push(</span><br><span class="line">    <span class="string">`&lt;b&gt;机构名称：&lt;/b&gt;&lt;strong&gt;<span class="subst">$&#123;item.branchName&#125;</span>(<span class="subst">$&#123;item.branchNo&#125;</span>)&lt;/strong&gt;`</span></span><br><span class="line">  );</span><br><span class="line">  content.push(<span class="string">`&lt;b&gt;地址：&lt;/b&gt;<span class="subst">$&#123;item.address&#125;</span>`</span>);</span><br><span class="line">  content.push(<span class="string">`&lt;b&gt;地区：&lt;/b&gt;<span class="subst">$&#123;item.areaName&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">let</span> infoWindow = <span class="keyword">new</span> AMap.InfoWindow(&#123;</span><br><span class="line">    isCustom: <span class="literal">true</span>, <span class="comment">// 使用自定义窗体</span></span><br><span class="line">    content: createInfoWindow(title, content.join(<span class="string">"&lt;br/&gt;"</span>)),</span><br><span class="line">    offset: <span class="keyword">new</span> AMap.Pixel(<span class="number">16</span>, <span class="number">-25</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建自定义信息窗体</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createInfoWindow</span>(<span class="params">title, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> info = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    info.className = <span class="string">"custom-info input-card content-window-card"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以通过下面的方式修改自定义窗体的宽高</span></span><br><span class="line">    <span class="comment">// info.style.width = "400px";</span></span><br><span class="line">    <span class="comment">// 定义顶部标题</span></span><br><span class="line">    <span class="keyword">var</span> top = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    top.className = <span class="string">"info-top"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> logoImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">    logoImg.src = <span class="built_in">require</span>(<span class="string">"src/assets/logo.jpg"</span>);</span><br><span class="line">    logoImg.style.width = <span class="string">"100px"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closeX = <span class="built_in">document</span>.createElement(<span class="string">"i"</span>);</span><br><span class="line">    closeX.innerText = <span class="string">"×"</span>;</span><br><span class="line">    closeX.className = <span class="string">"closeImg"</span>;</span><br><span class="line">    closeX.onclick = closeInfoWindow;</span><br><span class="line"></span><br><span class="line">    top.appendChild(logoImg);</span><br><span class="line">    top.appendChild(closeX);</span><br><span class="line">    info.appendChild(top);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是涨是跌</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params">before, current</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!current) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"无数据"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Number</span>(before) &gt; <span class="built_in">Number</span>(current)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;div class="down"&gt;<span class="subst">$&#123;current&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Number</span>(before) &lt; <span class="built_in">Number</span>(current)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;div class="up"&gt;<span class="subst">$&#123;current&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;div&gt;<span class="subst">$&#123;current&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义中部内容</span></span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    middle.className = <span class="string">"info-middle"</span>;</span><br><span class="line">    middle.style.backgroundColor = <span class="string">"white"</span>;</span><br><span class="line">    middle.innerHTML = content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> branchInfoHtml = <span class="built_in">document</span>.createElement(<span class="string">"table"</span>);</span><br><span class="line">    branchInfoHtml.className = <span class="string">"branchInfoMap"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> htmlTpl = <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;tr&gt;&lt;td&gt;存款&lt;/td&gt;&lt;td&gt;贷款&lt;/td&gt;&lt;td&gt;客户数&lt;/td&gt;&lt;td&gt;发卡数&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class="line"><span class="string">          &lt;tr&gt;&lt;td&gt;`</span>;</span><br><span class="line">    htmlTpl += judge(item.deposit_1, item.deposit_0) + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span>;</span><br><span class="line">    htmlTpl += judge(item.loan_1, item.loan_0) + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span>;</span><br><span class="line">    htmlTpl += judge(item.customer_1, item.customer_0) + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span>;</span><br><span class="line">    htmlTpl += judge(item.card_1, item.card_0) + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">    branchInfoHtml.innerHTML = htmlTpl;</span><br><span class="line">    middle.appendChild(branchInfoHtml);</span><br><span class="line">    info.appendChild(middle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义底部内容</span></span><br><span class="line">    <span class="keyword">let</span> bottom = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    bottom.className = <span class="string">"info-bottom"</span>;</span><br><span class="line">    bottom.style.position = <span class="string">"relative"</span>;</span><br><span class="line">    bottom.style.top = <span class="string">"0px"</span>;</span><br><span class="line">    bottom.style.margin = <span class="string">"0 auto"</span>;</span><br><span class="line">    <span class="keyword">let</span> aTag = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">    aTag.innerText = <span class="string">"详细信息"</span>;</span><br><span class="line">    aTag.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      router.push(&#123;</span><br><span class="line">        pathname: <span class="string">"/branch/manage"</span>,</span><br><span class="line">        state: &#123;</span><br><span class="line">          branchNo: item.branchNo</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    bottom.appendChild(aTag);</span><br><span class="line">    info.appendChild(bottom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭信息窗体</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeInfoWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    map.clearInfoWindow();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> infoWindow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/../images/amap-react-3.png" alt="amap-react-3"></p><p>css 部分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-window-card</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">box-shadow</span>: none;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-window-card</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.custom-info</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> silver;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">210px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.info-top</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background</span>: none repeat scroll <span class="number">0</span> <span class="number">0</span> <span class="number">#f9f9f9</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.info-top</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">31px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.info-top</span> <span class="selector-class">.closeImg</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.25s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.info-top</span> <span class="selector-class">.closeImg</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.info-middle</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.info-bottom</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.info-bottom</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.branchInfoMap</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.branchInfoMap</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.branchInfoMap</span> <span class="selector-class">.up</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"↑"</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.branchInfoMap</span> <span class="selector-class">.down</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"↓"</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前一直使用的都是百度地图的 API，这次换了高德地图尝试了一下，真香。高德地图它的 API 种类很全，文档例子也很清楚，相比较于百度地图感觉百度好像不常更新维护了。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="高德地图" scheme="http://www.tiankai.party/tags/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>typeScript查漏补缺</title>
    <link href="http://www.tiankai.party/posts/4914/"/>
    <id>http://www.tiankai.party/posts/4914/</id>
    <published>2019-10-11T02:38:13.000Z</published>
    <updated>2019-11-19T08:49:12.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天群组讨论的时候，发现了 typeScript 有很多功能不是很清楚，所以查找了些资料，这里整理一下：</p><ol><li><code>ts</code> 中的 <code>type</code> 和 <code>interface</code> 有什么区别</li><li><code>ts</code> 中的泛型使用</li><li><code>never</code> 类型的使用</li></ol><a id="more"></a><h2 id="type-和-interface-有什么区别"><a href="#type-和-interface-有什么区别" class="headerlink" title="type 和 interface 有什么区别"></a><code>type</code> 和 <code>interface</code> 有什么区别</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><blockquote><p>都可以描述一个对象或者函数</p></blockquote><ul><li>interface</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> SetUser &#123;</span><br><span class="line">  (name: <span class="built_in">string</span>, age: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>type</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> SetUser = <span class="function">(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure><blockquote><p>都允许扩展</p></blockquote><p><code>interface</code>和<code>type</code>都可以扩展，并且俩者之间可以相互<code>extends</code></p><ul><li>interface extends interface</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Name &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User <span class="keyword">extends</span> Name &#123;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>type extends type</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> User = Name &amp; &#123; age: <span class="built_in">number</span> &#125;;</span><br></pre></td></tr></table></figure><ul><li>interface extends type</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">interface</span> User <span class="keyword">extends</span> Name &#123;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>type extends interface</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Name &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> User = Name &amp; &#123;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><blockquote><p><code>type</code>可以而<code>interface</code>不行</p></blockquote><ul><li><code>type</code>可以声明基本类型别名、联合类型，元组等类型</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型别名</span></span><br><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明联合类型</span></span><br><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">  wong();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Cat &#123;</span><br><span class="line">  miao();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Pet = Dog | Cat;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体定义数组每个位置的类型</span></span><br><span class="line"><span class="keyword">type</span> PetList = [Dog, Cat];</span><br></pre></td></tr></table></figure><ul><li><code>type</code>语句中还可以使用<code>typeof</code>获取实例的类型进行赋值</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当你想获取一个变量的类型时，用typeof</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">let</span> B = <span class="keyword">typeof</span> div;</span><br></pre></td></tr></table></figure><ul><li>其他骚操作</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StringOrNumber = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> Text = <span class="built_in">string</span> | &#123; text: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> NameLookup = Dictionary&lt;<span class="built_in">string</span>, Person&gt;;</span><br><span class="line"><span class="keyword">type</span> Callback&lt;T&gt; = <span class="function">(<span class="params">data: T</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">type</span> Pair&lt;T&gt; = [T, T];</span><br><span class="line"><span class="keyword">type</span> Coordinates = Pair&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> Tree&lt;T&gt; = T | &#123; left: Tree&lt;T&gt;; right: Tree&lt;T&gt; &#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>interface</code>可以而<code>type</code>不行</p></blockquote><ul><li><code>interface</code>可以声明合并</li></ul><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  sex: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* User &#123;</span></span><br><span class="line"><span class="comment">*   name: string;</span></span><br><span class="line"><span class="comment">*   age: number;</span></span><br><span class="line"><span class="comment">*   sex: string;</span></span><br><span class="line"><span class="comment">* &#125;</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p>一般来说，如果不清楚什么时候用 <code>interface/type</code>，能用 <code>interface</code> 实现，就用 <code>interface</code> , 如果不能就用 <code>type</code> 。</p><h2 id="ts-中的泛型"><a href="#ts-中的泛型" class="headerlink" title="ts 中的泛型"></a>ts 中的泛型</h2><p>通俗理解：泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验)</p><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p>如果一个函数既可以返回<code>number</code>又可以返回<code>string</code>类型，我们在规定函数类型的时候，可能会使用<code>any</code>类型，但是这种是不确定的，函数参数和返回类型都不确定，这个时候我们就可以使用泛型来解决这个问题。</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能返回 string 类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同时支持返回string和number，代码冗余</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData1</span>(<span class="params">value: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData2</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用泛型来解决这个问题：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 number</span></span><br><span class="line"><span class="keyword">const</span> getNumData = getData&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 返回 string</span></span><br><span class="line"><span class="keyword">const</span> getStrData = getData&lt;<span class="built_in">string</span>&gt;(<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ConfigFn&lt;T&gt; &#123;</span><br><span class="line">  (value: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myGetData: ConfigFn&lt;<span class="built_in">string</span>&gt; = getData;</span><br><span class="line">myGetData(<span class="string">"1"</span>); <span class="comment">// 正确</span></span><br><span class="line"><span class="comment">// myGetData(1); // 错误</span></span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>在<code>react</code>中可以看到我们运用泛型类的例子。</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">type</span> Props = &#123;</span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> State = &#123;</span><br><span class="line">  current?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> MyComponent <span class="keyword">extends</span> React.Component&lt;Props, State&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">props: Props</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      current: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取最小值的例子：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GetMin&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> args: T[];</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">args: T[]</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.args = args;</span><br><span class="line">  &#125;</span><br><span class="line">  add(ele: T) &#123;</span><br><span class="line">    <span class="keyword">this</span>.args.push(ele);</span><br><span class="line">  &#125;</span><br><span class="line">  min(): T &#123;</span><br><span class="line">    <span class="keyword">let</span> min: T = <span class="keyword">this</span>.args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.args.forEach(<span class="function">(<span class="params">val: T</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val &lt; min) &#123;</span><br><span class="line">        min = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Number</span></span><br><span class="line"><span class="keyword">const</span> getMin1 = <span class="keyword">new</span> GetMin&lt;<span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">getMin1.add(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> min1 = getMin1.min();</span><br><span class="line"><span class="built_in">console</span>.log(min1); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="keyword">const</span> getMin2 = <span class="keyword">new</span> GetMin&lt;<span class="built_in">string</span>&gt;([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]);</span><br><span class="line">getMin2.add(<span class="string">"d"</span>);</span><br><span class="line"><span class="keyword">const</span> min2 = getMin2.min();</span><br><span class="line"><span class="built_in">console</span>.log(min2); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>简而言之就是限制泛型的类型。<br>一个很好的例子是处理字符串或者数组时，我们假设<code>length</code>属性是可用的。</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this will cause an error</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，编译器不会知道 <code>T</code> 确实有<code>.length</code>属性，特别是在任何类型都可以分配给<code>T</code>的情况下。我们需要做的是将类型变量扩展到一个包含所需属性的接口。大概是这样：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Length &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Length</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="comment">// length property can now be called</span></span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在尖括号内使用<code>extends</code>关键字加上我们要扩展的类型来约束 <code>T</code>。本质上，我们是在告诉编译器，我们可以支持在<code>Length</code>内实现属性的任何类型。<br>现在，当我们使用不支持<code>.length</code> 类型的函数时，编译器会通知我们。不仅如此，<code>.length</code> 现在可以识别并用于实现属性的类型。</p><p>注意:我们还可以通过用逗号分隔约束来扩展多个类型。举个例子，<code>&lt;T extends Length, Type2, Type3&gt;</code>.</p><h3 id="使用约束检查对象的属性"><a href="#使用约束检查对象的属性" class="headerlink" title="使用约束检查对象的属性"></a>使用约束检查对象的属性</h3><p>约束的一个很好的用例是通过使用另一段语法:<code>extends keyof</code>来查验对象的属性。以下示例检验了我们传入函数的对象是否存在这个属性:</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个参数是我们获取值的对象，第二个参数是该值的属性。返回类型描述了与<code>T[K]</code>的这种关系。</p><p>我们的泛型在这里所做的是确保对象的属性的存在，这样运行时就不会发生错误。这是一个类型安全的解决方案，而不是简单地调用<code>let value = obj[key];</code>之类的东西。</p><h2 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h2><h3 id="返回非-never-类型"><a href="#返回非-never-类型" class="headerlink" title="返回非 never 类型"></a>返回非 never 类型</h3><p>题目是这样的：</p><p>如何在<code>{ a: number; b: never }</code>中获取非<code>never</code>类型，也就是<code>{a: number}</code></p><p>解决这个问题前我们先来学习来个知识点：</p><blockquote><p>Pick&lt;T,K&gt;</p></blockquote><p>从 T 中提取出键为 K 的类型</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  description: <span class="built_in">string</span>;</span><br><span class="line">  completed: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TodoPreview = Pick&lt;Todo, <span class="string">"title"</span> | <span class="string">"completed"</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo: TodoPreview = &#123;</span><br><span class="line">  title: <span class="string">"Clean room"</span>,</span><br><span class="line">  completed: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>never | number 返回什么？</p></blockquote><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = never | <span class="built_in">number</span>; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> D = never | <span class="built_in">string</span> | <span class="built_in">number</span>; <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure><p>那么问题的解决方案就是这样：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> NoNever&lt;T&gt; = Pick&lt;</span><br><span class="line">  T,</span><br><span class="line">  &#123; [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> never ? never : K &#125;[keyof T]</span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">number</span>; b: never &#125;;</span><br><span class="line"><span class="keyword">type</span> B = NoNever&lt;C&gt;;</span><br><span class="line"><span class="comment">// 解析：</span></span><br><span class="line"><span class="keyword">type</span> Ex&lt;T&gt; = &#123; [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> never ? never : K &#125;;</span><br><span class="line"><span class="keyword">type</span> Test = Ex&lt;C&gt;; <span class="comment">// &#123; a: "a", b: never&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EX1&lt;T&gt; = Ex&lt;T&gt;[keyof T];</span><br><span class="line"><span class="keyword">type</span> Test1 = EX1&lt;C&gt;; <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure><h3 id="never-类型处理错误"><a href="#never-类型处理错误" class="headerlink" title="never 类型处理错误"></a>never 类型处理错误</h3><p>举个具体点的例子，当你有一个 union type:</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">"foo"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bar &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">"bar"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> All = Foo | Bar;</span><br></pre></td></tr></table></figure><p>在 <code>switch</code> 当中判断 <code>type</code>，<code>TS</code> 是可以收窄类型的 (discriminated union)：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleValue</span>(<span class="params">val: All</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (val.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"foo"</span>:</span><br><span class="line">      <span class="comment">// 这里 val 被收窄为 Foo</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"bar"</span>:</span><br><span class="line">      <span class="comment">// val 在这里是 Bar</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">// val 在这里是 never</span></span><br><span class="line">      <span class="keyword">const</span> exhaustiveCheck: never = val;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在 <code>default</code> 里面我们把被收窄为 <code>never</code> 的 <code>val</code> 赋值给一个显式声明为 <code>never</code> 的变量。如果一切逻辑正确，那么这里应该能够编译通过。<br>但是假如后来有一天你的同事改了 All 的类型：<code>type All = Foo | Bar | Baz</code> 然而他忘记了在 <code>handleValue</code> 里面加上针对 <code>Baz</code> 的处理逻辑，<br>这个时候在 <code>default branch</code> 里面 <code>val</code> 会被收窄为 <code>Baz</code>，导致无法赋值给 <code>never</code>，产生一个编译错误。所以通过这个办法，你可以确保 <code>handleValue</code> 总是穷尽 (exhaust) 了所有 All 的可能类型。</p><h2 id="非空断言操作"><a href="#非空断言操作" class="headerlink" title="非空断言操作"></a>非空断言操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.getY()!.a()</span><br></pre></td></tr></table></figure><p>这个操作是什么意思？ 它是告诉编译器<code>X.getY()</code>不是<code>Nulll</code>;</p><p>类似的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          width: <span class="string">'100%'</span>,</span><br><span class="line">          height: <span class="built_in">document</span>.documentElement!.clientHeight,</span><br><span class="line">          display: <span class="string">'flex'</span>,</span><br><span class="line">          justifyContent: <span class="string">'center'</span>,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;ActivityIndicator size=<span class="string">"large"</span> animating=&#123;effects[<span class="string">'mobileMapModel/fetchBranchTreeList'</span>]&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><ul><li><a href="https://www.jb51.net/article/163299.htm" target="_blank" rel="noopener">Typescript 中的 interface 和 type 到底有什么区别详解</a></li><li><a href="https://blog.csdn.net/jasnet_u/article/details/81144199" target="_blank" rel="noopener">typescript(九)–ts 中泛型、泛型方法、泛型类、泛型接口</a></li><li><a href="https://www.cnblogs.com/longailong/p/10608913.html" target="_blank" rel="noopener">typescript 中的泛型</a></li><li><a href="https://blog.csdn.net/songfens/article/details/98114588" target="_blank" rel="noopener">关于 TypeScript 泛型的解释</a></li><li><a href="https://www.zhihu.com/question/354601204/answer/888551021" target="_blank" rel="noopener">尤雨溪 never 类型处理错误</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天群组讨论的时候，发现了 typeScript 有很多功能不是很清楚，所以查找了些资料，这里整理一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ts&lt;/code&gt; 中的 &lt;code&gt;type&lt;/code&gt; 和 &lt;code&gt;interface&lt;/code&gt; 有什么区别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts&lt;/code&gt; 中的泛型使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;never&lt;/code&gt; 类型的使用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="typeScript" scheme="http://www.tiankai.party/categories/typeScript/"/>
    
    
      <category term="ts" scheme="http://www.tiankai.party/tags/ts/"/>
    
      <category term="never" scheme="http://www.tiankai.party/tags/never/"/>
    
      <category term="泛型" scheme="http://www.tiankai.party/tags/%E6%B3%9B%E5%9E%8B/"/>
    
      <category term="interface" scheme="http://www.tiankai.party/tags/interface/"/>
    
  </entry>
  
  <entry>
    <title>10月需要记住的日子</title>
    <link href="http://www.tiankai.party/posts/46869/"/>
    <id>http://www.tiankai.party/posts/46869/</id>
    <published>2019-10-03T02:37:18.000Z</published>
    <updated>2019-11-07T03:19:35.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-KKRgphqV" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-KKRgphqV"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "千与千寻",              author: "久木田薰",              url: "/../mp3/千与千寻.mp3",              pic: "/../images/timg.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>我觉得这个随笔应该配上音乐。<br>博客从七月份就一直断更了，年初的时候心里给自己默默立了个 flag,每个月最少保证三篇博客文章，没有在博客中发文证明是怕啊，自己哪天突然懒的写了，不写了，以后再回顾的时候会不会很尴尬。哈哈<br>七月份断更没写是懈怠了，还好每次遇到好的点子都会存下来，现在补起来也不是太费事。</p><a id="more"></a><p>七月份断更了是这时候做了个买车的决定，天天看懂车帝，看别人的评论，心里想的都是买车，不知道在哪看到每年七八月份是淡季买车优惠大，所以就一直看，周末了就去店里逛了解车配置，价格。<br>然后在 7 月 20 号一个周六的下午，在我家领导的陪伴下，从下午聊到了晚上，终于买了人生中的第一辆车。后来的精力就都在车上了一直也没更新博客。这里总结一些买车的知识点吧，也是方便于还没买车的各位：</p><ul><li>每年的七八月份确实是淡季，这个时候买车最合适，尤其是月末的时候提车，销售会为了业绩降价。</li><li>降价的前提是你了解市场价，你可以在 QQ 上直接搜你中意的车型，会有车友群，群里会有人分享自己的落地价，然后自己有个价格区间，带着价格去谈。</li><li>4s 店送的脚垫不要！！！谈价的时候直接谈落地价，不要谈裸车价，送的东西不要，自己出来买，比送的好。</li></ul><p>大概就这些了，加上车友群后就啥也知道了。</p><p>买了车后，然后就张罗着<strong>订婚</strong>（加粗）的事情了，告人、订饭店、准备烟酒之类的，就是今天 <code>2019-10-03</code>我订婚了和我的宝宝，带着双方父母亲人的祝福。</p><p>希望我们的生活会越来越好，先苦后甜。</p><p>时间真是个奇妙的东西，慢的时候你觉得一个下午的时间是那么漫长，快的时候在你还没反应过来的时候就已经悄然溜走，转眼间我们俩在一起已经了三个年头了，以前一直想的是要谈一个时间够久的恋爱，现在是真的实现了。<br>回忆起这一路走来，有过苦，有过甜，我们吵架我们欢笑，吵吵闹闹，终于在今天有了幸福的答卷。以后的路，以后的生活慢慢来。</p>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer-KKRgphqV&quot; class=&quot;aplayer aplayer-tag-marker&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
            &lt;pre class=&quot;aplayer-lrc-content&quot;&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;script&gt;
          var ap = new APlayer({
            element: document.getElementById(&quot;aplayer-KKRgphqV&quot;),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: &quot;千与千寻&quot;,
              author: &quot;久木田薰&quot;,
              url: &quot;/../mp3/千与千寻.mp3&quot;,
              pic: &quot;/../images/timg.jpg&quot;,
              lrc: &quot;&quot;
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        &lt;/script&gt;
&lt;p&gt;我觉得这个随笔应该配上音乐。&lt;br&gt;博客从七月份就一直断更了，年初的时候心里给自己默默立了个 flag,每个月最少保证三篇博客文章，没有在博客中发文证明是怕啊，自己哪天突然懒的写了，不写了，以后再回顾的时候会不会很尴尬。哈哈&lt;br&gt;七月份断更没写是懈怠了，还好每次遇到好的点子都会存下来，现在补起来也不是太费事。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.tiankai.party/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.tiankai.party/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中的声明文件</title>
    <link href="http://www.tiankai.party/posts/61798/"/>
    <id>http://www.tiankai.party/posts/61798/</id>
    <published>2019-09-25T11:03:12.000Z</published>
    <updated>2019-11-11T03:11:06.242Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在写<code>Typescript</code>的时候老是会碰到这样的错误：<br><code>Could not find a declaration file for module &#39;./hello&#39;. &#39;src/hello.js&#39; implicitly has an &#39;any&#39; type.</code></p><ul><li>[ts] 无法找到模块“./hello”的声明文件</li></ul><a id="more"></a><p>这里是缺少了<code>hello.ts</code>的声明文件，这篇文章记录一下关于<code>TS</code>的声明文件。</p><h2 id="声明文件-x-d-ts"><a href="#声明文件-x-d-ts" class="headerlink" title="声明文件(x.d.ts)"></a>声明文件(x.d.ts)</h2><p><u>TypeScript 作为 JavaScript 的超集，在开发过程中不可避免要引用其他第三方的 JavaScript 的库。虽然通过直接引用可以调用库的类和方法，但是却无法使用 TypeScript 诸如类型检查等特性功能。为了解决这个问题，需要将这些库里的函数和方法体去掉后只保留导出类型声明，而产生了一个描述 JavaScript 库和模块信息的声明文件。通过引用这个声明文件，就可以借用 TypeScript 的各种特性来使用库文件了。</u></p><p>在开始描述各种问题之前，列举一下我所知道的声明文件存放的方式（常规配置下）：</p><ul><li><code>src/@types/</code>，在 <code>src</code> 目录新建<code>@types</code> 目录，在其中编写<code>.d.ts</code> 声明文件，声明文件会自动被识别，可以在此为一些没有声明文件的模块编写自己的声明文件；<br>实际上在 <code>tsconfig</code> <code>include</code> 字段包含的范围内编写 <code>.d.ts</code>，都将被自动识别。</li><li>在 <code>x.js</code> 相同目录创建同名声明文件 <code>x.d.ts</code>，这样也会被自动识别；</li><li><code>node_modules/@types/</code>下存放各个第三方模块的声明文件，通过 <code>yarn add @types/react</code> 自动下载到此处，自己编写的声明文件不要放在这里；</li><li>作为 <code>npm</code> 模块发布时，声明文件可捆绑发布，需在 <code>package.json</code> 中指明<code>&quot;types&quot;: &quot;./types/index.d.ts&quot;</code>；</li></ul><blockquote><p>隐式 any 类型（implicitly has an ‘any’ type）</p></blockquote><p>当 <code>tsconfig.json</code> 中关闭<code>&quot;noImplicitAny&quot;: false</code> 时，可以直接在 <code>TypeScript</code> 中引用 <code>JavaScript</code>（无声明文件）的库，所有的引入都会被默认为 <code>any</code> 类型。但为了规范编码，总是打开<code>&quot;noImplicitAny&quot;: true</code>，这样当发生上述情况时，编译器会阻止编译，提示我们去加上类型规范。</p><h2 id="declare"><a href="#declare" class="headerlink" title="declare"></a>declare</h2><ul><li>导入自己写的工具类函数<br>在工具<code>utils.js</code>同级编写<code>utils.d.ts</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.d.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">const</span> getAllType: (</span><br><span class="line">  sourceType: <span class="built_in">any</span>,</span><br><span class="line">  targetType: <span class="built_in">any</span>,</span><br><span class="line">  filter?: <span class="built_in">any</span></span><br><span class="line">) =&gt; <span class="built_in">any</span>;</span><br></pre></td></tr></table></figure><ul><li>导入图片/css/json 模块<br>在<code>tsconfig</code> <code>include</code> 字段包含的范围内编写<code>index.d.ts</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.png";</span><br><span class="line">declare <span class="keyword">module</span> "*.json";</span><br><span class="line">declare <span class="keyword">module</span> "*.css";</span><br><span class="line">declare <span class="keyword">module</span> "*.less";</span><br></pre></td></tr></table></figure><ul><li>安装第三方插件的时候提示找不到模块<br>一般使用第三方不是 <code>TypeScript</code> 编写的模块时，我们可以直接下载对应的声明文件：<code>yarn add @types/{模块名}</code>。然而有些模块是没有对应的声明文件的，这时候就需要我们自己编写声明文件，以 <code>rc-form</code> 为例：<br>在<code>tsconfig</code>的<code>include</code> 字段包含的范围内编写<code>{任意名称}.d.ts</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "rc-form" &#123;</span><br><span class="line">  <span class="comment">// 在此只是简单地进行类型描述</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> createForm: <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> createFormField: <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> formShape: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-别名"><a href="#webpack-别名" class="headerlink" title="webpack 别名"></a>webpack 别名</h2><p>有时候会遇到设置了<code>webpack</code>别名，但是在导入的时候会遇到找不到模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  alias: &#123;</span><br><span class="line">    utils: path.resolve(__dirname, <span class="string">"src/utils"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ua &#125; <span class="keyword">from</span> <span class="string">"utils/broswer"</span>;</span><br><span class="line"><span class="comment">// Cannot find module 'utils/browser'</span></span><br></pre></td></tr></table></figure><p>只需在 <code>tsconfig.json</code> 添加 <code>baseUrl</code> 和<code>paths</code> 的配置即可：</p><ul><li>tsconfig.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"utils/*"</span>: [<span class="string">"/src/utils/*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [<span class="string">"./src/*"</span>, <span class="string">"./src/**/*"</span>],</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Window-X"><a href="#Window-X" class="headerlink" title="Window.X"></a>Window.X</h2><p>有时需要在<code>window</code>上挂载一个属性的时候会遇到<code>The property ‘X’ does not exist on value of type ‘window’</code><br>这时需要对<code>window</code>进行扩展：<br>在<code>tsconfig</code>的<code>include</code> 字段包含的范围内编写<code>{任意名称}.d.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.d.ts</span></span><br><span class="line"><span class="keyword">interface</span> Window &#123;</span><br><span class="line">  X: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><p><a href="https://daief.tech/2018-09-04/declaration-files-of-typescript.html" target="_blank" rel="noopener">TypeScript 中的声明文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写&lt;code&gt;Typescript&lt;/code&gt;的时候老是会碰到这样的错误：&lt;br&gt;&lt;code&gt;Could not find a declaration file for module &amp;#39;./hello&amp;#39;. &amp;#39;src/hello.js&amp;#39; implicitly has an &amp;#39;any&amp;#39; type.&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ts] 无法找到模块“./hello”的声明文件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="typeScript" scheme="http://www.tiankai.party/categories/typeScript/"/>
    
    
      <category term="ts" scheme="http://www.tiankai.party/tags/ts/"/>
    
      <category term="声明文件" scheme="http://www.tiankai.party/tags/%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>React-Hooks异步操作二三事</title>
    <link href="http://www.tiankai.party/posts/3386/"/>
    <id>http://www.tiankai.party/posts/3386/</id>
    <published>2019-09-19T11:04:17.000Z</published>
    <updated>2019-10-29T06:09:59.229Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文摘自前端早读课，写的挺好，所以这里记录一下，备忘。</p><p><code>React Hooks</code> 是 <code>React 16.8</code> 的新功能，可以在不编写 <code>class</code> 的情况下使用状态等功能，从而使得函数式组件从无状态的变化为有状态的。React 的类型包 @types/react 中也同步把 <code>React.SFC (Stateless Functional Component)</code> 改为了 <code>React.FC (Functional Component)</code>。</p><a id="more"></a><p>通过这一升级，原先 <code>class</code> 写法的组件也就完全可以被函数式组件替代。虽然是否要把老项目中所有类组件全部改为函数式组件因人而异，但新写的组件还是值得尝试的，因为代码量的确减少了很多，尤其是重复的代码（例如 <code>componentDidMount</code> + <code>componentDidUpdate</code> + <code>componentWillUnmount</code> = <code>useEffect</code>）。</p><p>从 16.8 发布（今年 2 月）至今也有大半年了，但本人水平有限，尤其在 useEffect 和异步任务搭配使用的时候经常踩到一些坑。特作本文，权当记录，供遇到同样问题的同僚借鉴参考。我会讲到三个项目中非常常见的问题：</p><ol><li><p>如何在组件加载时发起异步任务</p></li><li><p>如何在组件交互时发起异步任务</p></li><li><p>其他陷阱</p></li></ol><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ol><li>使用 <code>useEffect</code> 发起异步任务，第二个参数使用空数组可实现组件加载时执行方法体，返回值函数在组件卸载时执行一次，用来清理一些东西，例如计时器。</li></ol><p>2.使用 <code>AbortController</code> 或者某些库自带的信号量 ( <code>axios.CancelToken</code>) 来控制中止请求，更加优雅地退出。</p><ol start="3"><li><p>当需要在其他地方（例如点击处理函数中）设定计时器，在 <code>useEffect</code> 返回值中清理时，使用局部变量或者 <code>useRef</code> 来记录这个 <code>timer</code>。不要使用 <code>useState</code>。</p></li><li><p>组件中出现 <code>setTimeout</code> 等闭包时，尽量在闭包内部引用 <code>ref</code> 而不是 <code>state</code>，否则容易出现读取到旧值的情况。</p></li><li><p><code>useState</code> 返回的更新状态方法是异步的，要在下次重绘才能获取新值。不要试图在更改状态之后立马获取状态。</p></li></ol><h2 id="如何在组件加载时发起异步任务"><a href="#如何在组件加载时发起异步任务" class="headerlink" title="如何在组件加载时发起异步任务"></a>如何在组件加载时发起异步任务</h2><p>这类需求非常常见，典型的例子是在列表组件加载时发送请求到后端，获取列表后展现。</p><p>发送请求也属于 <code>React</code> 定义的副作用之一，因此应当使用 <code>useEffect</code> 来编写。基本语法我就不再过多说明，代码如下：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SOME_API = <span class="string">"/api/get/value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(SOME_API);</span><br><span class="line">      <span class="keyword">let</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">      setValue(data);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;&gt;&#123;loading ? &lt;div&gt;Loading...&lt;<span class="regexp">/div&gt; : &lt;div&gt;value is &#123;value&#125;&lt;/</span>div&gt;&#125;&lt;<span class="regexp">/&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>如上是一个基础的带 Loading 功能的组件，会发送异步请求到后端获取一个值并显示到页面上。如果以示例的标准来说已经足够，但要实际运用到项目中，还不得不考虑几个问题。</p><p><strong>如果在响应回来之前组件被销毁了会怎样？</strong></p><p>React 会报一个 Warning</p><blockquote><p>Warning: Can’t perform a React state update on an unmounted component.<br>This is a no-op, but it indicates a memory leak in your application.<br>To fix, cancel all subscriptions and asynchronous tasks in a<br>useEffect cleanup <a href="http://function.in" target="_blank" rel="noopener">http://function.in</a> Notification</p></blockquote><p>大意是说在一个组件卸载了之后不应该再修改它的状态。虽然不影响运行，但作为完美主义者代表的程序员群体是无法容忍这种情况发生的，那么如何解决呢？</p><p>问题的核心在于，在组件卸载后依然调用了 <code>setValue(data.value)</code> 和 <code>setLoading(false)</code> 来更改状态。因此一个简单的办法是标记一下组件有没有被卸载，可以利用 <code>useEffect</code> 的返回值。</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略组件其他内容，只列出 diff</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isUnmounted = <span class="literal">false</span>;</span><br><span class="line">  (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(SOME_API);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">    <span class="keyword">if</span> (!isUnmounted) &#123;</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">      setValue(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> (isUnmounted = <span class="literal">true</span>);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>这样可以顺利避免这个 Warning。</p><p><strong>有没有更加优雅的解法？</strong><br>上述做法是在收到响应时进行判断，即无论如何需要等响应完成，略显被动。一个更加主动的方式是探知到卸载时直接中断请求，自然也不必再等待响应了。这种主动方案需要用到 <code>AbortController</code>。</p><p><code>AbortController</code> 是一个浏览器的实验接口，它可以返回一个信号量(<code>singal</code>)，从而中止发送的请求。这个接口的兼容性不错，除了 IE 之外全都兼容（如 Chrome, Edge, FF 和绝大部分移动浏览器，包括 Safari）。</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> isUnmounted = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> abortController = <span class="keyword">new</span> AbortController(); <span class="comment">// 创建</span></span><br><span class="line">    (aysnc () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(SOME_API, &#123;</span><br><span class="line">            singal: abortController.signal, <span class="comment">// 当作信号量传入</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">        <span class="keyword">if</span>(!isUnmounted) &#123;</span><br><span class="line">            setLoading(<span class="literal">false</span>);</span><br><span class="line">            setValue(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        isUnmounted = <span class="literal">true</span>;</span><br><span class="line">        abortController.abort(); <span class="comment">// 在组件卸载时中断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p><code>singal</code> 的实现依赖于实际发送请求使用的方法，如上述例子的 <code>fetch</code> 方法接受 <code>singal</code> 属性。如果使用的是 <code>axios</code>，它的内部已经包含了 <code>axios.CancelToken</code>，可以直接使用，<a href="http://www.tiankai.party/posts/17294/">例子在这里</a>。</p><h2 id="如何在组件交互时发起异步任务"><a href="#如何在组件交互时发起异步任务" class="headerlink" title="如何在组件交互时发起异步任务"></a>如何在组件交互时发起异步任务</h2><p>另一种常见的需求是要在组件交互（比如点击某个按钮）时发送请求或者开启计时器，待收到响应后修改数据进而影响页面。这里和上面一节（组件加载时）最大的差异在于 <code>React Hooks</code> 只能在组件级别编写，不能在方法（ <code>dealClick</code>）或者控制逻辑（ <code>if</code>, <code>for</code> 等）内部编写，所以不能在点击的响应函数中再去调用 <code>useEffect</code>。但我们依然要利用 <code>useEffect</code> 的返回函数来做清理工作。</p><p>以计时器为例，假设我们想做一个组件，点击按钮后开启一个计时器(5s)，计时器结束后修改状态。但如果在计时未到就销毁组件时，我们想停止这个计时器，避免内存泄露。用代码实现的话，会发现开启计时器和清理计时器会在不同的地方，因此就必须记录这个 <code>timer</code>。看如下的例子：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">let</span> timer: <span class="built_in">number</span>;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// timer需要在点击时建立，因此这里只做清理工作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"in useEffect return "</span>, timer); <span class="comment">// &lt;- 正确的值</span></span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dealClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setValue(<span class="number">100</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;span&gt;value is &#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;dealClick&#125;&gt;Click Me !&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>既然要记录 <code>timer</code>，自然是用一个内部变量来存储即可（暂不考虑连续点击按钮导致多个 <code>timer</code> 出现，假设只点一次。因为实际情况下点了按钮还会触发其他状态变化，继而界面变化，也就点不到了）。</p><p>这里需要注意的是，如果把 <code>timer</code> 升级为状态(<code>state</code>)，则代码反而会出现问题。考虑如下代码：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> [timer, setTimer] = useState(<span class="number">0</span>); <span class="comment">// 把 timer 升级为状态</span></span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// timer 需要在点击时建立，因此这里只做清理使用</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"in useEffect return: "</span>, timer); <span class="comment">// &lt;- 0</span></span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dealClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setValue(<span class="string">"100"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    setTimer(tmp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;span&gt;value is： &#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onclick=&#123;dealClick&#125;&gt;Click Me!&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>有关语义上 <code>timer</code> 到底算不算作组件的状态我们先抛开不谈，仅就代码层面来看。利用 <code>useState</code> 来记住 <code>timer</code> 状态，利用 <code>setTimer</code> 去更改状态，看似合理。但实际运行下来，在 <code>useEffect</code> 返回的清理函数中，得到的 <code>timer</code> 却是初始值，即 <code>0</code>。</p><p>为什么两种写法会有差异呢？</p><p>其核心在于写入的变量和读取的变量是否是同一个变量。</p><p>第一种写法代码是把 <code>timer</code> 作为组件内的局部变量使用。在初次渲染组件时， <code>useEffect</code> 返回的闭包函数中指向了这个局部变量 <code>timer</code>。在 <code>dealClick</code> 中设置计时器时返回值依旧写给了这个局部变量（即读和写都是同一个变量），因此在后续卸载时，虽然组件重新运行导致出现一个新的局部变量 <code>timer</code>，但这不影响闭包内老的 <code>timer</code>，所以结果是正确的。</p><p>第二种写法， <code>timer</code> 是一个 <code>useState</code> 的返回值，并不是一个简单的变量。从 <code>React Hooks</code> 的源码来看，它返回的是 <code>[hook.memorizedState,dispatch]</code>，对应我们接的值和变更方法。当调用 <code>setTimer</code> 和 <code>setValue</code> 时，分别触发两次重绘，使得 <code>hook.memorizedState</code>指向了 <code>newState</code>（注意：不是修改，而是重新指向）。但 <code>useEffect</code> 返回闭包中的 <code>timer</code> 依然指向旧的状态，从而得不到新的值。（即读的是旧值，但写的是新值，不是同一个），<a href="http://www.tiankai.party/post/63515/">这个问题可以具体参考这里</a></p><p>如果觉得阅读 <code>Hooks</code> 源码有困难，可以从另一个角度去理解：虽然 <code>React</code> 在 16.8 推出了 <code>Hooks</code>，但实际上只是加强了函数式组件的写法，使之拥有状态，用来作为类组件的一种替代，但 <code>React</code> 状态的内部机制没有变化。在 <code>React</code> 中 <code>setState</code> 内部是通过 <code>merge</code> 操作将新状态和老状态合并后，重新返回一个新的状态对象。不论 <code>Hooks</code> 写法如何，这条原理没有变化。现在闭包内指向了旧的状态对象，而 <code>setTimer</code> 和 <code>setValue</code> 重新生成并指向了新的状态对象，并不影响闭包，导致了闭包读不到新的状态。</p><p>我们注意到 <code>React</code> 还提供给我们一个 <code>useRef</code>， 它的定义是:</p><blockquote><p>useRef 返回一个可变的 ref 对象，其 <code>current</code> 属性被初始化为传入的参数（initialValue）。<br>返回的 ref 对象在组件的整个生命周期内保持不变。</p></blockquote><p>ref 对象可以确保在整个生命周期中值不变，且同步更新，是因为 ref 的返回值始终只有一个实例，所有读写都指向它自己。所以也可以用来解决这里的问题。</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState, useRef &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> timer = useRef(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// timer 需要在点击时建立，因此这里只做清理使用</span></span><br><span class="line">      clearTimeout(timer.current);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dealClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer.current = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setValue(<span class="string">"100"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;span&gt;value is &#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;dealClick&#125;&gt;Click Me!&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>事实上我们后面会看到， <code>useRef</code> 和异步任务配合更加安全稳妥。</p><h2 id="其他陷阱"><a href="#其他陷阱" class="headerlink" title="其他陷阱"></a>其他陷阱</h2><p><strong>修改状态是异步的</strong></p><p>这个其实比较基础了。</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dealClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setValue(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// =&gt; 0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;span&gt;value is &#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;dealClick&#125;&gt;Click Me!&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p><code>useState</code> 返回的修改函数是异步的，调用后并不会直接生效，因此立马读取 <code>value</code> 获取到的是旧值<code>（0）</code>。</p><p><code>React</code> 这样设计的目的是为了性能考虑，争取把所有状态改变后只重绘一次就能解决更新问题，而不是改一次重绘一次，也是很容易理解的。</p><p><strong>在 timeout 中读不到其他状态的新值</strong></p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [anotherValue, setAnotherValue] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"setAnotherValue: "</span>, value); <span class="comment">// =&gt; 0;</span></span><br><span class="line">      setAnotherValue(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    setValue(<span class="number">100</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">        value is &#123;value&#125;, AnotherValue is &#123;anotherValue&#125;</span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个问题和上面使用 <code>useState</code> 去记录 <code>timer</code> 类似，在生成 <code>timeout</code> 闭包时，<code>value</code> 的值是 <code>0</code>。虽然之后通过 <code>setValue</code> 修改了状态，但 <code>React</code> 内部已经指向了新的变量，而旧的变量仍被闭包引用，所以闭包拿到的依然是旧的初始值，也就是 <code>0</code>。</p><p>要修正这个问题，也依然是使用 <code>useRef</code>，如下：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState, useRef &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [anotherValue, setAnotherValue] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> valueRef = useRef(value);</span><br><span class="line">  valueRef.current = value;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"setAnotherValue: "</span>, valueRef.current); <span class="comment">// =&gt; 100</span></span><br><span class="line">      setAnotherValue(valueRef.current);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    setValue(<span class="number">100</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      value is &#123;value&#125;, AnotherValue is &#123;anotherValue&#125;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p><strong>还是 timeout 的问题</strong></p><p>假设我们要实现一个按钮，默认显示 <code>false</code>。当点击后更改为 <code>true</code>，但两秒后变回 <code>false</code>（ <code>true</code> 和 <code>false</code> 可以互换）。考虑如下代码：</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dealClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setFlag(!flag);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setFlag(!flag);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;button onClick=&#123;dealClick&#125;&gt;&#123;flag ? <span class="string">"True"</span> : <span class="string">"Flase"</span>&#125;&lt;<span class="regexp">/button&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>我们会发现点击时能够正常切换，但是两秒后并不会变回来。究其原因，依然在于 <code>useState</code> 的更新是重新指向新值，但 <code>timeout</code> 的闭包依然指向了旧值。所以在例子中， <code>flag</code> 一直是 <code>false</code>，虽然后续 <code>setFlag</code>(<code>!flag</code>)，但依然没有影响到 <code>timeout</code> 里面的 <code>flag</code>。</p><p>解决方法有二。</p><p>第一个还是利用 <code>useRef</code></p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> flagRef = useRef(flag);</span><br><span class="line">  flagRef.current = flag;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dealClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setFlag(!flagRef.current);</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setFlag(!flagRef.current);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;button onClick=&#123;dealClick&#125;&gt;&#123;flag ? <span class="string">"True"</span> : <span class="string">"False"</span>&#125;&lt;<span class="regexp">/button&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>第二个是利用 <code>setFlag</code> 可以接收函数作为参数，并利用闭包和参数来实现</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent: React.FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dealClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setFlag(!flag);</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setFlag(<span class="function"><span class="params">flag</span> =&gt;</span> !flag);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;button onClick=&#123;dealClick&#125;&gt;&#123;flag ? <span class="string">"True"</span> : <span class="string">"False"</span>&#125;&lt;<span class="regexp">/button&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>当 <code>setFlag</code> 参数为函数类型时，这个函数的意义是告诉 <code>React</code> 如何从当前状态产生出新的状态（类似于 <code>redux</code> 的 <code>reducer</code>，不过是只针对一个状态的子 <code>reducer</code>）。既然是当前状态，因此返回值取反，就能够实现效果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <code>Hook</code> 中出现异步任务尤其是 <code>timeout</code> 的时候，我们要格外注意。<code>useState</code> 只能保证多次重绘之间的状态值是一样的，但不保证它们就是同一个对象，因此出现闭包引用的时候，尽量使用 <code>useRef</code> 而不是直接使用 <code>state</code> 本身，否则就容易踩坑。反之如果的确碰到了设置了新值但读取到旧值的情况，也可以往这个方向想想，可能就是这个原因所致。</p><blockquote><p>参考链接</p></blockquote><p><a href="https://mp.weixin.qq.com/s/myWdeq1Lq_b3vNgApcVB0A" target="_blank" rel="noopener">前端早读课</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文摘自前端早读课，写的挺好，所以这里记录一下，备忘。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;React Hooks&lt;/code&gt; 是 &lt;code&gt;React 16.8&lt;/code&gt; 的新功能，可以在不编写 &lt;code&gt;class&lt;/code&gt; 的情况下使用状态等功能，从而使得函数式组件从无状态的变化为有状态的。React 的类型包 @types/react 中也同步把 &lt;code&gt;React.SFC (Stateless Functional Component)&lt;/code&gt; 改为了 &lt;code&gt;React.FC (Functional Component)&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react-hooks" scheme="http://www.tiankai.party/tags/react-hooks/"/>
    
  </entry>
  
  <entry>
    <title>canvas加水印</title>
    <link href="http://www.tiankai.party/posts/46670/"/>
    <id>http://www.tiankai.party/posts/46670/</id>
    <published>2019-09-04T11:03:40.000Z</published>
    <updated>2019-10-28T02:55:02.745Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们都知道用 canvas 加水印的步骤：</p><ol><li>创建一个<code>canvas</code>，获取它的 2D 画笔<code>ctx</code></li><li>获取要加水印的图片<code>img</code></li><li>在图片完全加载后，获取图片的宽高设置给<code>canvas</code><a id="more"></a></li><li>把图片画到<code>canvas</code>画布上<code>ctx.drawImage(img, x, y)</code></li><li>在<code>canvas</code>上画水印(<code>ctx.fillText()</code>)</li><li>把<code>canvas</code>导出图片(<code>ctx.toDataURL(&#39;image/jpeg&#39;)</code>)</li></ol><p>大体的步骤就是这样，中间可能会加一些，水印的旋转，水印样式的设置，这里介绍一个创建水印平铺的函数：</p><h3 id="createPattern"><a href="#createPattern" class="headerlink" title="createPattern"></a>createPattern</h3><p><code>ctx.createPattern(image, repetition)</code></p><ul><li><code>image</code> 可以是 HTML 的<code>img</code>元素/<code>svg</code>图片/<code>video</code>/<code>canvas</code>元素</li><li><code>repetition</code> 标识图片如何进行平铺<ul><li><code>repeat</code></li><li><code>repeat-x</code></li><li><code>repeat-y</code></li><li><code>no-repeat</code></li></ul></li></ul><p>这里有一个例子，创建平铺的对象是<code>canvas</code>元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 水印canvas</span></span><br><span class="line"><span class="keyword">let</span> waterMark = <span class="built_in">document</span>.getElementById(<span class="string">"waterMark"</span>);</span><br><span class="line"><span class="keyword">let</span> waterCtx = waterMark.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="comment">// 水印 canvas 坐标旋转</span></span><br><span class="line">waterCtx.rotate((<span class="number">-20</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span><br><span class="line"><span class="comment">// 设置水印字体样式和文字</span></span><br><span class="line">waterCtx.font = <span class="string">"20px Microsoft Yahei"</span>;</span><br><span class="line">waterCtx.fillStyle = <span class="string">"rgba(255,255,255,0.5)"</span>;</span><br><span class="line">waterCtx.fillText(<span class="string">"晋商银行"</span>, <span class="number">-20</span>, <span class="number">65</span>);</span><br><span class="line"><span class="comment">// 水印 canvas 坐标还原</span></span><br><span class="line">waterCtx.rotate((<span class="number">20</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span><br><span class="line"><span class="comment">// 新建图片，设置图片的URL</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = url;</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 创建展示图片的canvas</span></span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"previewImg"</span>);</span><br><span class="line">  <span class="comment">// 设置展示canvas的宽高为图片的宽高</span></span><br><span class="line">  canvas.width = img.width;</span><br><span class="line">  canvas.height = img.height;</span><br><span class="line">  <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 创建平铺水印</span></span><br><span class="line">  <span class="keyword">let</span> pat = ctx.createPattern(waterMark, <span class="string">"repeat"</span>);</span><br><span class="line">  <span class="comment">// 填充水印</span></span><br><span class="line">  ctx.fillStyle = pat;</span><br><span class="line">  <span class="comment">// 填充图片</span></span><br><span class="line">  ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, img.width, img.height);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道用 canvas 加水印的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个&lt;code&gt;canvas&lt;/code&gt;，获取它的 2D 画笔&lt;code&gt;ctx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取要加水印的图片&lt;code&gt;img&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在图片完全加载后，获取图片的宽高设置给&lt;code&gt;canvas&lt;/code&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://www.tiankai.party/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://www.tiankai.party/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>css设置Scoll滚动条样式</title>
    <link href="http://www.tiankai.party/posts/29511/"/>
    <id>http://www.tiankai.party/posts/29511/</id>
    <published>2019-08-23T11:03:20.000Z</published>
    <updated>2019-10-28T02:05:27.113Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里记录一下设置 scroll 滚动条样式的 css 代码，先来看看设置前后的对比图：</p><a id="more"></a><p><img src="/../images/css-scroll-before.png" alt="css-scroll-before"></p><hr><p><img src="/../images/css-scroll-after.png" alt="css-scroll-after"></p><h3 id="css-代码"><a href="#css-代码" class="headerlink" title="css 代码"></a>css 代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(240, 240, 240, 1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义滚动条轨道 内阴影+圆角*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="built_in">rgba</span>(240, 240, 240, 0.5);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(240, 240, 240, 0.5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义滑块 内阴影+圆角*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.3);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b5b1b1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录一下设置 scroll 滚动条样式的 css 代码，先来看看设置前后的对比图：&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://www.tiankai.party/categories/css/"/>
    
    
      <category term="css" scheme="http://www.tiankai.party/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>forEach中怎么终止循环</title>
    <link href="http://www.tiankai.party/posts/52107/"/>
    <id>http://www.tiankai.party/posts/52107/</id>
    <published>2019-08-16T09:57:23.000Z</published>
    <updated>2019-10-25T09:57:54.369Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个问题很有意思，<code>for</code> 循环中 <code>while</code> 循环中我们知道可以使用<code>break</code>来终止循环，那么<code>forEach</code>中怎么终止循环呢？</p><a id="more"></a><p><code>forEach</code>中不能使用<code>break</code>终止循环会直接报错的,网上也有说可以使用<code>return false</code>来终止循环，这个方法也是错误。<br>来看这个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>(val) === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 1 3</span></span><br></pre></td></tr></table></figure><p><code>return false</code>仍然会遍历数组，只是在<code>val = 2</code>的时候下面代码不执行而已。</p><p><strong>正确用法：</strong></p><p>用<code>throw</code>抛出异常来终止循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>(val) === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"终止循环"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 1 Error: 终止循环</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题很有意思，&lt;code&gt;for&lt;/code&gt; 循环中 &lt;code&gt;while&lt;/code&gt; 循环中我们知道可以使用&lt;code&gt;break&lt;/code&gt;来终止循环，那么&lt;code&gt;forEach&lt;/code&gt;中怎么终止循环呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>antd引出的文件上传</title>
    <link href="http://www.tiankai.party/posts/57419/"/>
    <id>http://www.tiankai.party/posts/57419/</id>
    <published>2019-08-02T07:02:07.000Z</published>
    <updated>2019-10-25T09:38:16.884Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>antd</code>的<code>upload</code>组件可以实现文件上传，在实现自己控制的文件上传时，用到了<code>FormData</code>对象,趁此机会好好了解一下。</p><a id="more"></a><p>文件上传需要设置<code>http</code>的 <code>header</code>字段为<code>Content-Type: multipart/form-data</code></p><h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><p><code>FormData</code>对象把数据用表单的形式来发送。</p><p><strong>方法：</strong></p><ul><li><p><code>append(name, value, filename)</code></p><p>向 FormData 中添加新的属性值，FormData 对应的属性值存在也不会覆盖原值，而是新增一个值，如果属性不存在则新增一项属性值。</p><ul><li><p><code>name</code>: <code>value</code> 中包含的数据对应的表单名称。</p></li><li><p><code>value</code>: 发送的数据可以是 <code>String</code> 、<code>file</code> 或者 <code>Blob</code> 类型</p></li><li><p><code>filename</code>: 传给服务器的文件名称（当<code>value</code>是<code>Blob</code>或<code>File</code>时 <code>Blob</code>的默认文件名称是<code>blob</code>,<code>File</code> 对象的默认文件名是该文件的名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增数组</span></span><br><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">"files[]"</span>, file);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>get(name)</code></p><p>返回在 FormData 对象中与给定键关联的第一个值。</p></li><li><p><code>getAll(name)</code></p><p>返回一个包含 FormData 对象中与给定键关联的所有值的数组。</p></li><li><p><code>has(name)</code></p><p>返回一个布尔值表明 FormData 对象是否包含某些键。</p></li><li><p><code>set(name, value, filename)</code></p><p>给 FormData 设置属性值，如果 FormData 对应的属性值存在则覆盖原值，否则新增一项属性值。</p></li><li><p><code>values()</code></p><p>返回一个包含所有值的 iterator 对象。</p></li></ul><h4 id="创建FromData对象"><a href="#创建FromData对象" class="headerlink" title="创建FromData对象"></a>创建<code>FromData</code>对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">"username"</span>, <span class="string">"TK"</span>);</span><br><span class="line">formData.append(<span class="string">"phone"</span>, <span class="number">1343232343</span>); <span class="comment">// 数字会被转换成字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML 文件类型input，由用户选择</span></span><br><span class="line">formData.append(<span class="string">"userfile"</span>, fileInputElement.files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript file-like 对象</span></span><br><span class="line"><span class="keyword">var</span> content = <span class="string">'&lt;a id="a"&gt;&lt;b id="b"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span>; <span class="comment">// 新文件的正文...</span></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([content], &#123; <span class="attr">type</span>: <span class="string">"text/xml"</span> &#125;);</span><br><span class="line"></span><br><span class="line">formData.append(<span class="string">"webmasterfile"</span>, blob);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"POST"</span>, <span class="string">"http://foo.com/submitform.php"</span>);</span><br><span class="line">request.send(formData);</span><br></pre></td></tr></table></figure><p><strong>注意：字段 “userfile” 和 “webmasterfile” 都包含一个文件.<br>字段 “accountnum” 是数字类型，它将被 FormData.append()方法转换成字符串类型<br>(FormData 对象的字段类型可以是 Blob, File, 或者 string:<br>如果它的字段类型不是 Blob 也不是 File，则会被转换成字符串类)。</strong></p><h4 id="HTML-中的-FormData-对象"><a href="#HTML-中的-FormData-对象" class="headerlink" title="HTML 中的 FormData 对象"></a>HTML 中的 FormData 对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 form 表单</span></span><br><span class="line"><span class="keyword">let</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"form"</span>);</span><br><span class="line"><span class="comment">// 创建 FormData 对象</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line"><span class="comment">// 发起XML请求</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"POST"</span>, <span class="string">"submitform.php"</span>);</span><br><span class="line"><span class="comment">// 发送数据前添加额外的数据</span></span><br><span class="line">formData.append(<span class="string">"serialnumber"</span>, serialNumber++);</span><br><span class="line">request.send(formData);</span><br></pre></td></tr></table></figure><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p>类似<code>FormData</code>都可以用来处理文件上传，不过它是异步的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br></pre></td></tr></table></figure><p>根据 MDN 文档的阐释:</p><blockquote><p>FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。<br>其中 File 对象可以是来自用户在一个元素上选择文件后返回的 FileList 对象,也可以来自拖放操作生成的 DataTransfer 对象,还可以是来自在一个 HTMLCanvasElement 上执行 mozGetAsFile()方法后返回结果。</p></blockquote><p><strong>方法：</strong></p><ul><li><p><code>readAsDataURL()</code></p><p>开始读取指定的 <code>Blob</code> 中的内容。一旦完成，<code>result</code> 属性中将包含一个 <code>data: URL</code> 格式的 <code>Base64</code> 字符串以表示所读取文件的内容。</p></li><li><p><code>readAsText()</code></p><p>开始读取指定的<code>Blob</code>中的内容。一旦完成，<code>result</code>属性中将包含一个字符串以表示所读取的文件内容。</p></li><li><p><code>readAsArrayBuffer()</code></p><p>开始读取指定的 <code>Blob</code>中的内容, 一旦完成, <code>result</code> 属性中保存的将是被读取文件的 <code>ArrayBuffer</code> 数据对象.</p></li><li><p><code>readAsBinaryString()</code></p><p>开始读取指定的<code>Blob</code>中的内容。一旦完成，<code>result</code>属性中将包含所读取文件的原始二进制数据。</p></li><li><p><code>abort()</code></p><p>中止读取操作。在返回时，<code>readyState</code> 属性为 <code>DONE</code>。</p></li></ul><p><strong>onload 事件</strong>: FileReader 实例读取文件是异步的，该事件在读取操作开始时触发</p><h4 id="使用-FileReader"><a href="#使用-FileReader" class="headerlink" title="使用 FileReader"></a>使用 FileReader</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line"><span class="comment">// 读取文件内容，结果用data:url的字符串形式表示</span></span><br><span class="line">reader.readAsDataURL(e.target.files[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 异步读取，等待读取操作的完成</span></span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.result); <span class="comment">// 上传的图片的base64编码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>读取多个文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"browse"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"previewFiles()"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">previewFiles</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> preview = <span class="built_in">document</span>.querySelector(<span class="string">"#preview"</span>);</span><br><span class="line">  <span class="keyword">var</span> files = <span class="built_in">document</span>.querySelector(<span class="string">"input[type=file]"</span>).files;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">readAndPreview</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保 `file.name` 符合我们要求的扩展名</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/\.(jpe?g|png|gif)$/i</span>.test(file.name)) &#123;</span><br><span class="line">      <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line"></span><br><span class="line">      reader.addEventListener(</span><br><span class="line">        <span class="string">"load"</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">          image.height = <span class="number">100</span>;</span><br><span class="line">          image.title = file.name;</span><br><span class="line">          image.src = <span class="keyword">this</span>.result;</span><br><span class="line">          preview.appendChild(image);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      reader.readAsDataURL(file);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (files) &#123;</span><br><span class="line">    [].forEach.call(files, readAndPreview);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects" target="_blank" rel="noopener">FormData 对象的使用（MDN）</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="noopener">FileReader(MDN)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;antd&lt;/code&gt;的&lt;code&gt;upload&lt;/code&gt;组件可以实现文件上传，在实现自己控制的文件上传时，用到了&lt;code&gt;FormData&lt;/code&gt;对象,趁此机会好好了解一下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>针对不同的请求地址封装axios</title>
    <link href="http://www.tiankai.party/posts/17294/"/>
    <id>http://www.tiankai.party/posts/17294/</id>
    <published>2019-07-30T10:02:24.000Z</published>
    <updated>2019-12-24T10:17:52.998Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>遇到这个问题的背景是项目的登录接口要做统一登录，和项目中其他接口地址不一样，所以衍生出这个问题。</p><hr><p>新增取消请求，针对遇到组件已经卸载了但是请求还在继续的情况</p><a id="more"></a><h3 id="针对不同地址封装"><a href="#针对不同地址封装" class="headerlink" title="针对不同地址封装"></a>针对不同地址封装</h3><p>以前封装好的<code>axios</code>一直很好用，直到遇到这个需求后，做了一些修改：</p><p>我们借助请求拦截器来完成这个需求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> token = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.headers.authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">"post"</span> || config.method === <span class="string">"put"</span>) &#123;</span><br><span class="line">      config.headers[<span class="string">"Content-Type"</span>] = <span class="string">"application/json;charset=UTF-8"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">"get"</span>) &#123;</span><br><span class="line">      config.data = stringify(config.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理不同请求</span></span><br><span class="line">    <span class="comment">// 在请求拦截器中拦截到登录请求后改变请求路径</span></span><br><span class="line">    <span class="keyword">if</span> (config.url === <span class="string">"/login"</span> &amp;&amp; config.method === <span class="string">"post"</span>) &#123;</span><br><span class="line">      config.baseURL = <span class="built_in">window</span>.loginApi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>针对这个思路也可以配置生产环境和开发环境不同的请求地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line"></span><br><span class="line">  baseURL:</span><br><span class="line">    process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="built_in">window</span>.proApi : <span class="built_in">window</span>.devApi,</span><br><span class="line">  <span class="comment">// 在请求发送前，可以根据实际要求，是否要对请求的数据进行转换</span></span><br><span class="line">  <span class="comment">// 仅应用于 post、put、patch 请求</span></span><br><span class="line">  transformRequest: [</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//  `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="comment">// it is passed to then/catch</span></span><br><span class="line">  transformResponse: [</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 请求头信息</span></span><br><span class="line">  <span class="comment">// headers: &#123;</span></span><br><span class="line">  <span class="comment">// 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8;',</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// 设置超时时间</span></span><br><span class="line">  timeout: <span class="number">50000</span>, <span class="comment">// 携带凭证(cookie)</span></span><br><span class="line">  withCredentials: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><p>如果一个组件已经卸载了但是它发出的请求仍在进行，如果请求回来时候我们有<code>setState</code>操作，<code>react</code>会报告给我们一个警告。针对这种情况我们可以在组件卸载后取消请求。</p><p>我们利用<code>axios</code>的<code>CancelToken</code>封装一个取消请求的函数，在组件卸载的时候调用这个函数，传入要取消请求的<code>url</code>来取消对应的请求</p><p>俩种实现方式具体代码如下：</p><h4 id="精准取消"><a href="#精准取消" class="headerlink" title="精准取消"></a>精准取消</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="comment">// 存放每个请求url和对应的取消函数</span></span><br><span class="line"><span class="keyword">let</span> pending: <span class="built_in">Array</span>&lt;&#123; url: <span class="built_in">any</span>; c: <span class="built_in">any</span>; method: <span class="built_in">any</span> &#125;&gt; = [];</span><br><span class="line"><span class="comment">// 取消函数 调用方式 传入请求的路径 cancel(['/getData'])</span></span><br><span class="line"><span class="comment">// 请求路径不能带参数 不是这种的：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   return request(&#123;</span></span><br><span class="line"><span class="comment">    method: 'DELETE',</span></span><br><span class="line"><span class="comment">    url: `/areaInfo/$&#123;params || ''&#125;`,</span></span><br><span class="line"><span class="comment">  &#125;);</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">// 应该是这样的：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   return request(&#123;</span></span><br><span class="line"><span class="comment">    method: 'DELETE',</span></span><br><span class="line"><span class="comment">    url: `/areaInfo`,</span></span><br><span class="line"><span class="comment">    params</span></span><br><span class="line"><span class="comment">  &#125;);</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">// 这样传入cancel(['/areaInfo']) 才会取消这个接口的请求</span></span><br><span class="line"><span class="comment">// 或者可以这样传入参数 cancel(['/areaInfo/params'])</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params">url: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pending, url);</span><br><span class="line">  pending.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    pending.forEach(<span class="function">(<span class="params">item: <span class="built_in">any</span>, idx: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 处理这种情况 branch/treeBranch?</span></span><br><span class="line">      <span class="keyword">if</span> (url.find(<span class="function"><span class="params">val</span> =&gt;</span> val === item.url.split(<span class="string">'?'</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="comment">// 执行取消函数</span></span><br><span class="line">        item.c(<span class="string">'method: '</span> + item.method + <span class="string">' url: '</span> + item.url);</span><br><span class="line">        <span class="comment">// 移除这个请求</span></span><br><span class="line">        pending.splice(idx, <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.includes(<span class="string">'params'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 处理这种情况 /areaInfo/12354 但是这种情况传入的参数应该这样 cancel('/areaInfo/params');</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          url.find(<span class="function"><span class="params">val</span> =&gt;</span> val.split(<span class="string">'/params'</span>)[<span class="number">0</span>] === item.url.slice(<span class="number">0</span>, item.url.lastIndexOf(<span class="string">'/'</span>)))</span><br><span class="line">        ) &#123;</span><br><span class="line">          item.c(<span class="string">'method: '</span> + item.method + <span class="string">' url: '</span> + item.url);</span><br><span class="line">          <span class="comment">// 移除这个请求</span></span><br><span class="line">          pending.splice(idx, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在请求拦截器中添加如下代码：</span></span><br><span class="line"><span class="comment">// 请求拦截器取消请求封装</span></span><br><span class="line">config.cancelToken = <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// An executor function receives a cancel function as a parameter</span></span><br><span class="line">  pending.push(&#123; url: config.url, c, method: config.mehtod &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> request, &#123; cancel &#125; <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> isUnmounted = <span class="literal">false</span>;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> request(&#123;</span><br><span class="line">        url: <span class="string">"/getData"</span>,</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        data: &#123; <span class="attr">page</span>: <span class="number">1</span> &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!isUnmounted) &#123;</span><br><span class="line">        setLoading(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      isUnmounted = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 取消请求</span></span><br><span class="line">      cancel([<span class="string">"/getData"</span>]);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span>&#123;loading ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;"Loading..."&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;...&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><blockquote><p>另一种方式：这种方式会取消后续的请求，不知道为什么，这里写到这作为一个思路，项目中采用第一种方式精准取消</p></blockquote><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="comment">// 取消全部请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> source = CancelToken.source();</span><br><span class="line"></span><br><span class="line"><span class="comment">//在请求拦截器中添加如下代码：</span></span><br><span class="line">config.cancelToken = source.token;</span><br></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> request, &#123; cancel &#125; <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> isUnmounted = <span class="literal">false</span>;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> request(&#123;</span><br><span class="line">        url: <span class="string">"/getData"</span>,</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        data: &#123; <span class="attr">page</span>: <span class="number">1</span> &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!isUnmounted) &#123;</span><br><span class="line">        setLoading(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      isUnmounted = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 取消请求</span></span><br><span class="line">      <span class="comment">// 这里会取消页面所有的请求</span></span><br><span class="line">      source.cancel();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span>&#123;loading ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;"Loading..."&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;...&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="完整封装-Axios"><a href="#完整封装-Axios" class="headerlink" title="完整封装 Axios"></a>完整封装 Axios</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  功能：封装 axios</span></span><br><span class="line"><span class="comment"> *  create by tiankai on 05/16/18 17:15:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; stringify &#125; <span class="keyword">from</span> <span class="string">"qs"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Modal, notification &#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"umi/router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="comment">// 存放每个请求url和对应的取消函数</span></span><br><span class="line"><span class="keyword">let</span> pending: <span class="built_in">Array</span>&lt;&#123; url: <span class="built_in">any</span>; c: <span class="built_in">any</span>; method: <span class="built_in">any</span> &#125;&gt; = [];</span><br><span class="line"><span class="comment">// 取消函数 调用方式 传入请求的路径 cancel(['/getData'])</span></span><br><span class="line"><span class="comment">// 请求路径不能带参数 不是这种的：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   return request(&#123;</span></span><br><span class="line"><span class="comment">    method: 'DELETE',</span></span><br><span class="line"><span class="comment">    url: `/areaInfo/$&#123;params || ''&#125;`,</span></span><br><span class="line"><span class="comment">  &#125;);</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">// 应该是这样的：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   return request(&#123;</span></span><br><span class="line"><span class="comment">    method: 'DELETE',</span></span><br><span class="line"><span class="comment">    url: `/areaInfo`,</span></span><br><span class="line"><span class="comment">    params</span></span><br><span class="line"><span class="comment">  &#125;);</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">// 这样传入cancel(['/areaInfo']) 才会取消这个接口的请求</span></span><br><span class="line"><span class="comment">// 或者可以这样传入参数 cancel(['/areaInfo/params'])</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params">url: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pending, url);</span><br><span class="line">  pending.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    pending.forEach(<span class="function">(<span class="params">item: <span class="built_in">any</span>, idx: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 处理这种情况 branch/treeBranch?</span></span><br><span class="line">      <span class="keyword">if</span> (url.find(<span class="function"><span class="params">val</span> =&gt;</span> val === item.url.split(<span class="string">'?'</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="comment">// 执行取消函数</span></span><br><span class="line">        item.c(<span class="string">'method: '</span> + item.method + <span class="string">' url: '</span> + item.url);</span><br><span class="line">        <span class="comment">// 移除这个请求</span></span><br><span class="line">        pending.splice(idx, <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.includes(<span class="string">'params'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 处理这种情况 /areaInfo/12354 但是这种情况传入的参数应该这样 cancel('/areaInfo/params');</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          url.find(<span class="function"><span class="params">val</span> =&gt;</span> val.split(<span class="string">'/params'</span>)[<span class="number">0</span>] === item.url.slice(<span class="number">0</span>, item.url.lastIndexOf(<span class="string">'/'</span>)))</span><br><span class="line">        ) &#123;</span><br><span class="line">          item.c(<span class="string">'method: '</span> + item.method + <span class="string">' url: '</span> + item.url);</span><br><span class="line">          <span class="comment">// 移除这个请求</span></span><br><span class="line">          pending.splice(idx, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> codeMessage = &#123;</span><br><span class="line">  <span class="number">200</span>: <span class="string">"服务器成功返回请求的数据。"</span>,</span><br><span class="line">  <span class="number">201</span>: <span class="string">"新建或修改数据成功。"</span>,</span><br><span class="line">  <span class="number">202</span>: <span class="string">"一个请求已经进入后台排队（异步任务）。"</span>,</span><br><span class="line">  <span class="number">204</span>: <span class="string">"删除数据成功。"</span>,</span><br><span class="line">  <span class="number">400</span>: <span class="string">"发出的请求有错误，服务器没有进行新建或修改数据的操作。"</span>,</span><br><span class="line">  <span class="number">401</span>: <span class="string">"用户没有权限（令牌、用户名、密码错误）。"</span>,</span><br><span class="line">  <span class="number">403</span>: <span class="string">"用户得到授权，但是访问是被禁止的。"</span>,</span><br><span class="line">  <span class="number">404</span>: <span class="string">"发出的请求针对的是不存在的记录，服务器没有进行操作。"</span>,</span><br><span class="line">  <span class="number">406</span>: <span class="string">"请求的格式不可得。"</span>,</span><br><span class="line">  <span class="number">410</span>: <span class="string">"请求的资源被永久删除，且不会再得到的。"</span>,</span><br><span class="line">  <span class="number">422</span>: <span class="string">"当创建一个对象时，发生一个验证错误。"</span>,</span><br><span class="line">  <span class="number">500</span>: <span class="string">"服务器发生错误，请检查服务器。"</span>,</span><br><span class="line">  <span class="number">502</span>: <span class="string">"网关错误。"</span>,</span><br><span class="line">  <span class="number">503</span>: <span class="string">"服务不可用，服务器暂时过载或维护。"</span>,</span><br><span class="line">  <span class="number">504</span>: <span class="string">"网关超时。"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!response) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"response is undefined"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (response.status &gt;= <span class="number">200</span> &amp;&amp; response.status &lt; <span class="number">300</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span>(response.code === <span class="string">'0000'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.code === <span class="string">'9999'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">        error.name = response.status;</span><br><span class="line">        error.text = <span class="string">'token过期'</span>;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> errorText = codeMessage[response.status] || response.statusText;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  error.name = response.status;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  error.response = response;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  error.text = errorText;</span><br><span class="line">  <span class="keyword">throw</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  baseURL: <span class="built_in">window</span>.api, <span class="comment">// 在请求发送前，可以根据实际要求，是否要对请求的数据进行转换</span></span><br><span class="line">  <span class="comment">// 仅应用于 post、put、patch 请求</span></span><br><span class="line">  transformRequest: [</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//  `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="comment">// it is passed to then/catch</span></span><br><span class="line">  transformResponse: [</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 请求头信息</span></span><br><span class="line">  <span class="comment">// headers: &#123;</span></span><br><span class="line">  <span class="comment">// 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8;',</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// 设置超时时间</span></span><br><span class="line">  timeout: <span class="number">50000</span>, <span class="comment">// 携带凭证(cookie)</span></span><br><span class="line">  withCredentials: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(config);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> upload = axios.create(&#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  baseURL: <span class="built_in">window</span>.api,</span><br><span class="line">  headers: &#123; <span class="string">"Content-Type"</span>: <span class="string">"multipart/form-data"</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="comment">// 可以在这里做一些事情在请求发送前</span></span><br><span class="line">    <span class="comment">// config.headers['TOKEN']=''// 在这里设置请求头与携带token信息;</span></span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line">    <span class="keyword">const</span> token = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.headers.authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">"post"</span> || config.method === <span class="string">"put"</span>) &#123;</span><br><span class="line">      config.headers[<span class="string">"Content-Type"</span>] = <span class="string">"application/json;charset=UTF-8"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">"get"</span>) &#123;</span><br><span class="line">      config.data = stringify(config.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理上传文件请求</span></span><br><span class="line">    <span class="keyword">if</span> (config.url === <span class="string">"/upload"</span> &amp;&amp; config.method === <span class="string">"post"</span>) &#123;</span><br><span class="line">      <span class="comment">// &amp;&amp;String(config.data).indexOf('files') &gt;= 0</span></span><br><span class="line">      config.headers[<span class="string">"Content-Type"</span>] =</span><br><span class="line">        <span class="string">"multipart/form-data;boundary="</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求拦截器取消请求封装</span></span><br><span class="line">    config.cancelToken = <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// An executor function receives a cancel function as a parameter</span></span><br><span class="line">      pending.push(&#123; url: config.url, c, method: config.method &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something whit request error</span></span><br><span class="line">    <span class="comment">// 请求失败可以做一些事情</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="comment">// 在这里你可以判断后台返回数据携带的请求码</span></span><br><span class="line">    <span class="comment">// 如果是 0000 返回 否则不返回并处理错误</span></span><br><span class="line">    <span class="comment">// console.dir(response);</span></span><br><span class="line">    <span class="keyword">return</span> checkStatus(response);</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something whit response error</span></span><br><span class="line">    <span class="comment">// 根据 错误码返回信息</span></span><br><span class="line">    <span class="comment">// console.dir(error);</span></span><br><span class="line">    <span class="comment">// return error;</span></span><br><span class="line">    <span class="comment">// return checkStatus(error.response);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* method GET/POST/PUT</span></span><br><span class="line"><span class="comment"> * url</span></span><br><span class="line"><span class="comment"> * params/data</span></span><br><span class="line"><span class="comment"> * headers &#123; 'content-type': 'application/x-www-form-urlencoded'&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance(options)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(response.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.dir(error);</span><br><span class="line">        <span class="comment">// 如果用户取消了请求</span></span><br><span class="line">        <span class="keyword">if</span> (axios.isCancel(error)) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"Request canceled"</span>, error.message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> status = error.response &amp;&amp; error.response.status;</span><br><span class="line">          <span class="keyword">let</span> code =</span><br><span class="line">            error.response &amp;&amp; error.response.code &amp;&amp; error.response.code;</span><br><span class="line">          <span class="keyword">if</span> (status === <span class="number">401</span> || code === <span class="string">"9998"</span>) &#123;</span><br><span class="line">            router.push(<span class="string">"/login"</span>);</span><br><span class="line">            notification.warn(&#123;</span><br><span class="line">              message: <span class="string">"请重新登录"</span>,</span><br><span class="line">              description: error.message</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// alert('请重新登录');</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Modal.error(&#123; title: <span class="string">"请求错误"</span>, content: error.message &#125;);</span><br><span class="line">            <span class="comment">// alert(error);</span></span><br><span class="line">          &#125;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到这个问题的背景是项目的登录接口要做统一登录，和项目中其他接口地址不一样，所以衍生出这个问题。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;新增取消请求，针对遇到组件已经卸载了但是请求还在继续的情况&lt;/p&gt;
    
    </summary>
    
      <category term="http" scheme="http://www.tiankai.party/categories/http/"/>
    
    
      <category term="axios" scheme="http://www.tiankai.party/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>安装双系统Deepin教程</title>
    <link href="http://www.tiankai.party/posts/43216/"/>
    <id>http://www.tiankai.party/posts/43216/</id>
    <published>2019-07-19T09:49:10.000Z</published>
    <updated>2019-10-24T08:28:34.847Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前俩天电脑上安装了深度系统，这里记录一下安装教程。</p><a id="more"></a><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>首先要在电脑上分出一个新区作为 <code>deepin</code>的系统盘(50G 左右就行)，而且这个分区的格式必须为<code>EXT4</code>，这里推荐<code>DiskGenius</code>这款软件来进行分区。</p><h3 id="制作-U-盘启动盘"><a href="#制作-U-盘启动盘" class="headerlink" title="制作 U 盘启动盘"></a>制作 U 盘启动盘</h3><p>使用官网下载的启动盘制作工具，制作好 U 盘启动盘</p><ol><li><a href="https://www.deepin.org/download/" target="_blank" rel="noopener">下载官方</a>最新的镜像文件。</li><li>插入 U 盘到电脑的 USB 接口中。</li><li>打开<a href="https://www.deepin.org/original/deepin-boot-maker/" target="_blank" rel="noopener">深度启动盘制作工具</a>。</li><li>选择深度操作系统镜像文件以及分区。</li><li>点击 开始 即可制作。</li></ol><h3 id="重启安装"><a href="#重启安装" class="headerlink" title="重启安装"></a>重启安装</h3><ul><li>重启电脑，进入 BIOS，不同机型不一样一般为 ESC，F12 等，根据自己机型百度</li><li>选择 U 盘启动，自动开始安装 Deepin 系统</li><li>然后就跟着指引走就行了<ul><li>选择简体中文</li><li>创建用户密码</li><li>最后选择我们新建的盘符作为系统安装盘，之后等待安装完成。</li></ul></li><li>安装完成后，系统会自动重启，此时拔掉 U 盘</li><li>重启后会出现选择操作系统的画面，默认是 Deepin 系统</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>安装系统时遇到的几个坑：</p><ol><li><p>重启后没有无线网络只有有线网络,这是因为系统中没有无线网卡驱动</p><ul><li>进入 windows 系统，打开 cmd</li><li>输入 <code>systeminfo</code> 查看网卡信息，<code>[02]: Realtek 8821CE</code> 就是网卡信息</li><li>下载网卡驱动(百度: 8821CE 无线网卡驱动)</li><li>下载好驱动后，进入 Deepin 系统</li></ul><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/tomaspinho/rtl8821ce # 从 github 获取</span></span><br><span class="line">cd rtl8821ce <span class="comment"># 找到网卡目录</span></span><br><span class="line">make <span class="comment"># 执行编译命令</span></span><br><span class="line">sudo make install <span class="comment"># 安装</span></span><br><span class="line">sudo modprobe -v <span class="number">8821</span>ce <span class="comment"># 应用</span></span><br></pre></td></tr></table></figure><ul><li>再重启后进入系统就有无线了</li></ul></li><li><p>设置默认启动系统</p><p>安装完 Deepin 后默认每次开机都是启动 Deepin 的，如果要修改可以进入 Deepin 系统 —&gt; <code>设置</code> —&gt; <code>启动菜单</code> —&gt; <code>选择 window</code> 即可</p></li><li><p>禁用“快速启动”</p><p>快速启动：控制面板—&gt;电源选项—&gt;选择电源按钮的功能，进去就可以看到了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前俩天电脑上安装了深度系统，这里记录一下安装教程。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.tiankai.party/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="系统" scheme="http://www.tiankai.party/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>整理一些常用的lodash工具函数</title>
    <link href="http://www.tiankai.party/posts/51993/"/>
    <id>http://www.tiankai.party/posts/51993/</id>
    <published>2019-07-11T06:56:35.000Z</published>
    <updated>2019-10-24T06:31:21.071Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h3><p>作用： 返回数组中有意义的值组成新数组，<code>false</code>, <code>null</code>,<code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>,<code>NaN</code> 被忽略掉。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * _.compact([0, 1, false, 2, '', 3]);</span></span><br><span class="line"><span class="comment"> * // =&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">-1</span>,</span><br><span class="line">    length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length,</span><br><span class="line">    resIndex = <span class="number">0</span>,</span><br><span class="line">    result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = array[index];</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      result[resIndex++] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机取值"><a href="#随机取值" class="headerlink" title="随机取值"></a>随机取值</h3><ul><li><p><code>_.sample(collection)</code></p><p>从数组或对象中随机取出一个元素(对象的话取的是 value 值)</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.sample([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br><span class="line">_.sample(&#123; <span class="attr">a</span>: <span class="string">"1"</span>, <span class="attr">b</span>: <span class="string">"2"</span>, <span class="attr">c</span>: <span class="string">"3"</span> &#125;);</span><br><span class="line"><span class="comment">// =&gt; "2"</span></span><br></pre></td></tr></table></figure><hr><ul><li><p><code>_.sampleSize(collection,[n=1])</code></p><p>从数组或对象中随机取出 n 个元素组成的数组</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.sampleSize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [2,4]</span></span><br><span class="line">_.sampleSize(&#123; <span class="attr">a</span>: <span class="string">"1"</span>, <span class="attr">b</span>: <span class="string">"2"</span>, <span class="attr">c</span>: <span class="string">"3"</span> &#125;, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; ["1", "2"]</span></span><br></pre></td></tr></table></figure><h3 id="数组筛选"><a href="#数组筛选" class="headerlink" title="数组筛选"></a>数组筛选</h3><h4 id="返回新数组"><a href="#返回新数组" class="headerlink" title="返回新数组"></a>返回新数组</h4><ul><li><p><code>_.without(array, [values])</code></p><p>创建一个剔除所有给定值的新数组</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.without([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [3]</span></span><br></pre></td></tr></table></figure><hr><ul><li><p><code>_.difference(array,[values])</code></p><p>创建一个具有唯一 array 值的数组，每个值不包含在其他给定的数组中</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.difference([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// =&gt; [3,1]</span></span><br></pre></td></tr></table></figure><h4 id="修改原数组"><a href="#修改原数组" class="headerlink" title="修改原数组"></a>修改原数组</h4><ul><li><p><code>_.pull(array, [values])</code></p><p>移除数组 array 中所有和给定值相等的元素</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">_.pull(array, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"><span class="comment">// =&gt; [1, 1]</span></span><br></pre></td></tr></table></figure><hr><ul><li><code>_.pullAll(array,values)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">_.pullAll(array, [<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"><span class="comment">// =&gt; [1, 1]</span></span><br></pre></td></tr></table></figure><h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3><ul><li><p><code>_.flattten(array)</code></p><p>减少一级 array 嵌套深度。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.flatten([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, [3, [4]], 5]</span></span><br></pre></td></tr></table></figure><hr><ul><li><p><code>_.flattenDeep(array)</code></p><p>将 array 递归为一维数组。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.flattenDeep([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><hr><ul><li><p><code>_.flattenDepth(array, [depth=1])</code></p><p>根据 depth 递归减少 array 的嵌套层级</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]];</span><br><span class="line"></span><br><span class="line">_.flattenDepth(array, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, [3, [4]], 5]</span></span><br><span class="line"></span><br><span class="line">_.flattenDepth(array, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, [4], 5]</span></span><br></pre></td></tr></table></figure><h3 id="快速生成数组"><a href="#快速生成数组" class="headerlink" title="快速生成数组"></a>快速生成数组</h3><ul><li><p><code>_.range([start=0], end, [step=1])</code></p><p>返回一个包含<code>start</code>,不包含<code>end</code>的数组，</p><ul><li>参数：<ul><li><code>[start=0](number)</code>: 开始的范围。</li><li><code>end (number)</code>: 结束的范围。</li><li><code>[step=1](number)</code>: 范围的增量 或者 减量。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_.range(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// =&gt; [0, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">_.range(<span class="number">-4</span>);</span><br><span class="line"><span class="comment">// =&gt; [0, -1, -2, -3]</span></span><br><span class="line"></span><br><span class="line">_.range(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">_.range(<span class="number">0</span>, <span class="number">20</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// =&gt; [0, 5, 10, 15]</span></span><br><span class="line"></span><br><span class="line">_.range(<span class="number">0</span>, <span class="number">-4</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// =&gt; [0, -1, -2, -3]</span></span><br><span class="line"></span><br><span class="line">_.range(<span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 1, 1]</span></span><br><span class="line"></span><br><span class="line">_.range(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// =&gt; []</span></span><br></pre></td></tr></table></figure><ul><li>原生方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [...new <span class="built_in">Array</span>(<span class="number">100</span>).keys()];</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, ... 99]</span></span><br></pre></td></tr></table></figure><h3 id="枚举渲染"><a href="#枚举渲染" class="headerlink" title="枚举渲染"></a>枚举渲染</h3><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Loading</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; loadingText, LOADING_STATUS, loadingStatus, onRetry &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View className=<span class="string">"loading-status"</span>&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        &#123;</span><br><span class="line">          loading: loadingText,</span><br><span class="line">          fail: <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">onClick</span>=<span class="string">&#123;onRetry&#125;</span>&gt;</span> 加载失败, 点击重试 <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span>,</span><br><span class="line">          <span class="string">"no-more"</span>: <span class="string">"没有更多了"</span></span><br><span class="line">        &#125;[</span><br><span class="line">          loadingStatus</span><br><span class="line">        ] <span class="comment">/** loadingStatus 是 `loading`、`fail`、`no-more`  其中一种状态 **/</span></span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="before-after"><a href="#before-after" class="headerlink" title="before/after"></a>before/after</h3><ul><li><p><code>_.after(n, func)</code></p><p>before 的反向函数;此方法创建一个函数，当他被调用 n 或更多次之后将马上触发 func 。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> saves = [<span class="string">"profile"</span>, <span class="string">"settings"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> done = _.after(saves.length, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"done saving!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">_.forEach(saves, <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  asyncSave(&#123; <span class="attr">type</span>: type, <span class="attr">complete</span>: done &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; Logs 'done saving!' after the two async saves have completed.</span></span><br></pre></td></tr></table></figure><hr><ul><li><p><code>_.before(n, func)</code> 超过多少次不再调用<code>func</code></p><p>创建一个调用 func 的函数，通过 this 绑定和创建函数的参数调用 func，调用次数不超过 n 次。 之后再调用这个函数，将返回一次最后调用 func 的结果。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jQuery(element).on(<span class="string">"click"</span>, _.before(<span class="number">5</span>, addContactToList));</span><br><span class="line"><span class="comment">// =&gt; allows adding up to 4 contacts to the list</span></span><br></pre></td></tr></table></figure><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><ul><li><p><code>_.curry(func,[arity=func.length])</code></p><ul><li><p>参数：</p><ul><li><p><code>func</code>:用来柯里化的函数</p></li><li><p><code>[arity=func.length]</code>:需要提供给 func 的参数数量。</p></li></ul></li><li><p>返回值：返回新的柯里化函数</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curried = _.curry(abc);</span><br><span class="line"></span><br><span class="line">curried(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; 6</span></span><br><span class="line"></span><br><span class="line">curried(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; 6</span></span><br><span class="line"></span><br><span class="line">curried(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。<br>单反也有相似的概念，在拍照的时候手如果拿不稳晃的时候拍照一般手机是拍不出好照片的，因此智能手机是在你按一下时连续拍许多张， 能过合成手段，生成一张。翻译成 JS 就是，事件内的 N 个动作会变忽略，只有事件后<code>由程序触发</code>的动作有效。</p><ul><li><p><code>_.debounce(func, [wait=0], [options={}])</code></p><p>debounced（防抖动）函数提供一个 <code>cancel</code> 方法取消延迟的函数调用以及 <code>flush</code> 方法立即调用</p><ul><li>参数：<ul><li><code>func (Function)</code>: 要防抖动的函数。</li><li><code>[wait=0] (number)</code>: 需要延迟的毫秒数。</li><li><code>[options={}] (Object)</code>: 选项对象。</li><li><code>[options.leading=false] (boolean)</code>: 指定在延迟开始前调用。</li><li><code>[options.maxWait] (number)</code>: 设置 func 允许被延迟的最大值。</li><li><code>[options.trailing=true] (boolean)</code>: 指定在延迟结束后调用。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免窗口在变动时出现昂贵的计算开销。</span></span><br><span class="line">jQuery(<span class="built_in">window</span>).on(<span class="string">"resize"</span>, _.debounce(calculateLayout, <span class="number">150</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当点击时 `sendMail` 随后就被调用。</span></span><br><span class="line">jQuery(element).on(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  _.debounce(sendMail, <span class="number">300</span>, &#123;</span><br><span class="line">    leading: <span class="literal">true</span>,</span><br><span class="line">    trailing: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 `batchLog` 调用1次之后，1秒内会被触发。</span></span><br><span class="line"><span class="keyword">var</span> debounced = _.debounce(batchLog, <span class="number">250</span>, &#123; <span class="attr">maxWait</span>: <span class="number">1000</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> source = <span class="keyword">new</span> EventSource(<span class="string">"/stream"</span>);</span><br><span class="line">jQuery(source).on(<span class="string">"message"</span>, debounced);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消一个 trailing 的防抖动调用</span></span><br><span class="line">jQuery(<span class="built_in">window</span>).on(<span class="string">"popstate"</span>, debounced.cancel);</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。节流的概念可以想象一下水坝，你建了水坝在河道中，不能让水流动不了，你只能让水流慢些。换言之，你不能让用户的方法都不执行。如果这样干，就是 <code>debounce</code> 了。</p><ul><li><p><code>_.throttle(func, [wait=0], [options={}])</code></p><p>该函数提供一个 cancel 方法取消延迟的函数调用以及 flush 方法立即调用</p><ul><li>参数：<ul><li><code>func (Function)</code>: 要节流的函数。</li><li><code>[wait=0](number)</code>: 需要节流的毫秒。</li><li><code>[options={}](Object)</code>: 选项对象。</li><li><code>[options.leading=true](boolean)</code>: 指定调用在节流开始前。</li><li><code>[options.trailing=true](boolean)</code>: 指定调用在节流结束后。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免在滚动时过分的更新定位</span></span><br><span class="line">jQuery(<span class="built_in">window</span>).on(<span class="string">"scroll"</span>, _.throttle(updatePosition, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击后就调用 `renewToken`，但5分钟内超过1次。</span></span><br><span class="line"><span class="keyword">var</span> throttled = _.throttle(renewToken, <span class="number">300000</span>, &#123; <span class="attr">trailing</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">jQuery(element).on(<span class="string">"click"</span>, throttled);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消一个 trailing 的节流调用。</span></span><br><span class="line">jQuery(<span class="built_in">window</span>).on(<span class="string">"popstate"</span>, throttled.cancel);</span><br></pre></td></tr></table></figure><h3 id="once"><a href="#once" class="headerlink" title="once"></a>once</h3><p>创建一个只能调用 func 一次的函数。 重复调用返回第一次调用的结果。</p><ul><li><code>_.once(func)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initialize = _.once(createApplication);</span><br><span class="line">initialize();</span><br><span class="line">initialize();</span><br><span class="line"><span class="comment">// `initialize` 只能调用 `createApplication` 一次。</span></span><br></pre></td></tr></table></figure><h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><ul><li><code>_.delay(func, wait, [args])</code></li></ul><p>延迟 wait 毫秒后调用 func。 调用时，任何附加的参数会传给 func。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_.delay(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">1000</span>,</span><br><span class="line">  <span class="string">"later"</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// =&gt; 一秒后输出 'later'。</span></span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li><p><code>_.cloneDeep(value)</code></p><p>返回深拷贝后的值</p></li></ul><h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h3><ul><li><code>_.isEmpty(value)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_.isEmpty([]);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">_.isEmpty(&#123;&#125;);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">_.isEmpty(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">_.isEmpty(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">_.isEmpty(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">_.isEmpty([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line">_.isEmpty(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="isEqual"><a href="#isEqual" class="headerlink" title="isEqual"></a>isEqual</h3><ul><li><p><code>_.isEqual(value, other)</code></p><p>执行深比较来确定两者的值是否相等。如果 两个值完全相同，那么返回 true，否则返回 false。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> other = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">_.isEqual(object, other);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">object === other;</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>###</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;compact&quot;&gt;&lt;a href=&quot;#compact&quot; class=&quot;headerlink&quot; title=&quot;compact&quot;&gt;&lt;/a&gt;compact&lt;/h3&gt;&lt;p&gt;作用： 返回数组中有意义的值组成新数组，&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;,&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;,&lt;code&gt;NaN&lt;/code&gt; 被忽略掉。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="lodash" scheme="http://www.tiankai.party/tags/lodash/"/>
    
  </entry>
  
  <entry>
    <title>如何写出漂亮的js代码</title>
    <link href="http://www.tiankai.party/posts/58614/"/>
    <id>http://www.tiankai.party/posts/58614/</id>
    <published>2019-06-26T02:42:35.000Z</published>
    <updated>2019-07-04T07:26:03.184Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何提高代码的可读性、复用性、扩展性。我们将从以下四个方面讨论：</p><ul><li>变量</li><li>函数</li><li>类</li><li>异步</li></ul><a id="more"></a><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><h3 id="用有意义且常用的单词命名"><a href="#用有意义且常用的单词命名" class="headerlink" title="用有意义且常用的单词命名"></a>用有意义且常用的单词命名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="keyword">const</span> yyyymmdstr = moment().format(<span class="string">"YYYY/MM/DD"</span>);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">const</span> currentDate = moment().format(<span class="string">"YYYY/MM/DD"</span>);</span><br></pre></td></tr></table></figure><h3 id="保持统一"><a href="#保持统一" class="headerlink" title="保持统一"></a>保持统一</h3><p>对同一类型的变量使用相同的命名保持统一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line">getUserInfo();</span><br><span class="line">getClientData();</span><br><span class="line">getCustomerRecord();</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line">getUser();</span><br></pre></td></tr></table></figure><h3 id="每个常量-全大写-都该命名"><a href="#每个常量-全大写-都该命名" class="headerlink" title="每个常量(全大写)都该命名"></a>每个常量(全大写)都该命名</h3><p>可以用 ESLint 检测代码中未命名的常量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="comment">// 其他人知道 86400000 的意思吗？</span></span><br><span class="line">setTimeout(blastOff, <span class="number">86400000</span>);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">const</span> MILLISECOND_IN_A_DAY = <span class="number">86400000</span>;</span><br><span class="line">setTimeout(blastOff, MILLISECOND_IN_A_DAY);</span><br></pre></td></tr></table></figure><h3 id="避免无意义的命名"><a href="#避免无意义的命名" class="headerlink" title="避免无意义的命名"></a>避免无意义的命名</h3><p>既然创建了一个 car 对象，就没有必要把它的颜色命名为 carColor。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  carMake: <span class="string">"Honda"</span>,</span><br><span class="line">  carModel: <span class="string">"Accord"</span>,</span><br><span class="line">  carColor: <span class="string">"Blue"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">  car.carColor = <span class="string">"Red"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  make: <span class="string">"Honda"</span>,</span><br><span class="line">  model: <span class="string">"Accord"</span>,</span><br><span class="line">  color: <span class="string">"Blue"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">  car.color = <span class="string">"Red"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传参使用默认值"><a href="#传参使用默认值" class="headerlink" title="传参使用默认值"></a>传参使用默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> breweryName = name || <span class="string">"Hipster Brew Co."</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name = <span class="string">"Hipster Brew Co."</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><h3 id="函数参数-最好-2-个或更少"><a href="#函数参数-最好-2-个或更少" class="headerlink" title="函数参数( 最好 2 个或更少 )"></a>函数参数( 最好 2 个或更少 )</h3><p>如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title, body, buttonText, cancellable</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">&#123; title, body, buttonText, cancellable &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">createMenu(&#123;</span><br><span class="line">  title: <span class="string">"Foo"</span>,</span><br><span class="line">  body: <span class="string">"Bar"</span>,</span><br><span class="line">  buttonText: <span class="string">"Baz"</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="一个方法只做一件事情"><a href="#一个方法只做一件事情" class="headerlink" title="一个方法只做一件事情"></a>一个方法只做一件事情</h3><p>这是一条在软件工程领域流传久远的规则。严格遵守这条规则会让你的代码可读性更好，也更容易重构。如果违反这个规则，那么代码会很难被测试或者重用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">      email(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailActiveClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">  clients.filter(isActiveClient).forEach(email);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isActiveClient</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数名上体现它的作用"><a href="#函数名上体现它的作用" class="headerlink" title="函数名上体现它的作用"></a>函数名上体现它的作用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToDate</span>(<span class="params">date, month</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 很难知道是把什么加到日期中</span></span><br><span class="line">addToDate(date, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMonthToDate</span>(<span class="params">month, date</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">addMonthToDate(<span class="number">1</span>, date);</span><br></pre></td></tr></table></figure><h3 id="删除重复代码，合并相似函数"><a href="#删除重复代码，合并相似函数" class="headerlink" title="删除重复代码，合并相似函数"></a>删除重复代码，合并相似函数</h3><p>很多时候虽然是同一个功能，但由于一两个不同点，让你不得不写两个几乎相同的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span>(<span class="params">developers</span>) </span>&#123;</span><br><span class="line">  developers.forEach(<span class="function"><span class="params">developer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = developer.getExperience();</span><br><span class="line">    <span class="keyword">const</span> githubLink = developer.getGithubLink();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      githubLink</span><br><span class="line">    &#125;;</span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span>(<span class="params">managers</span>) </span>&#123;</span><br><span class="line">  managers.forEach(<span class="function"><span class="params">manager</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = manager.getExperience();</span><br><span class="line">    <span class="keyword">const</span> portfolio = manager.getMBAProjects();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      portfolio</span><br><span class="line">    &#125;;</span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showEmployeeList</span>(<span class="params">employees</span>) </span>&#123;</span><br><span class="line">  employees.forEach(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = employee.getExperience();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">switch</span> (employee.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"develop"</span>:</span><br><span class="line">        data.githubLink = employee.getGithubLink();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"manager"</span>:</span><br><span class="line">        data.portfolio = employee.getMBAProjects();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Object-assign-设置默认属性"><a href="#使用-Object-assign-设置默认属性" class="headerlink" title="使用 Object.assign 设置默认属性"></a>使用 Object.assign 设置默认属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="keyword">const</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="literal">null</span>,</span><br><span class="line">  body: <span class="string">"Bar"</span>,</span><br><span class="line">  buttonText: <span class="literal">null</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">"Foo"</span>;</span><br><span class="line">  config.body = config.body || <span class="string">"Bar"</span>;</span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">"Baz"</span>;</span><br><span class="line">  config.cancellable =</span><br><span class="line">    config.cancellable !== <span class="literal">undefined</span> ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">createMenu(menuConfig);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">const</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="string">"Order"</span>,</span><br><span class="line">  <span class="comment">// 不包含 body</span></span><br><span class="line">  buttonText: <span class="string">"Send"</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config = <span class="built_in">Object</span>.assign(</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"Foo"</span>,</span><br><span class="line">      body: <span class="string">"Bar"</span>,</span><br><span class="line">      buttonText: <span class="string">"Baz"</span>,</span><br><span class="line">      cancellable: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    config</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// config : &#123;title: "Order", body: "Bar", buttonText: "Send", cancellable: true&#125;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">createMenu(menuConfig);</span><br></pre></td></tr></table></figure><h3 id="尽量不要写全局方法"><a href="#尽量不要写全局方法" class="headerlink" title="尽量不要写全局方法"></a>尽量不要写全局方法</h3><p>在 JavaScript 中，永远不要污染全局，会在生产环境中产生难以预料的 bug。举个例子，比如你在 Array.prototype 上新增一个 diff 方法来判断两个数组的不同。而你同事也打算做类似的事情，不过他的 diff 方法是用来判断两个数组首位元素的不同。很明显你们方法会产生冲突，遇到这类问题我们可以用 ES2015/ES6 的语法来对 Array 进行扩展。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.diff = <span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">comparisonArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(comparisonArray);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  diff(comparisonArray) &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(comparisonArray);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尽量别用“非”条件句"><a href="#尽量别用“非”条件句" class="headerlink" title="尽量别用“非”条件句"></a>尽量别用“非”条件句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodeNotPresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isDOMNodeNotPresent(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodePresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isDOMNodePresent(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不要过度优化"><a href="#不要过度优化" class="headerlink" title="不要过度优化"></a>不要过度优化</h3><p>现代浏览器已经在底层做了很多优化，过去的很多优化方案都是无效的，会浪费你的时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="comment">// 现代浏览器已对此( 缓存 list.length )做了优化。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除弃用代码"><a href="#删除弃用代码" class="headerlink" title="删除弃用代码"></a>删除弃用代码</h3><p>这里没有实例代码，删除就对了</p><h2 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h2><h3 id="使用-ES6-的-class"><a href="#使用-ES6-的-class" class="headerlink" title="使用 ES6 的 class"></a>使用 ES6 的 class</h3><p>在 ES6 之前，没有类的语法，只能用构造函数的方式模拟类，可读性非常差。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="comment">// 动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  move() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 哺乳动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age, furColor) &#123;</span><br><span class="line">    <span class="keyword">super</span>(age);</span><br><span class="line">    <span class="keyword">this</span>.furColor = furColor;</span><br><span class="line">  &#125;</span><br><span class="line">  liveBirth() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 人类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age, furColor, languageSpoken) &#123;</span><br><span class="line">    <span class="keyword">super</span>(age, furColor);</span><br><span class="line">    <span class="keyword">this</span>.languageSpoken = languageSpoken;</span><br><span class="line">  &#125;</span><br><span class="line">  speak() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用链式调用"><a href="#使用链式调用" class="headerlink" title="使用链式调用"></a>使用链式调用</h3><p>这种模式相当有用，可以在很多库中都有使用。它让你的代码简洁优雅。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(make, model, color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"Ford"</span>, <span class="string">"F-150"</span>, <span class="string">"red"</span>);</span><br><span class="line">car.setColor(<span class="string">"pink"</span>);</span><br><span class="line">car.save();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(make, model, color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"Ford"</span>, <span class="string">"F-150"</span>, <span class="string">"red"</span>).setColor(<span class="string">"pink"</span>).save();</span><br></pre></td></tr></table></figure><h2 id="四、异步"><a href="#四、异步" class="headerlink" title="四、异步"></a>四、异步</h2><p>使用 promise 或者 Async/Await 代替回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line">get(</span><br><span class="line">  <span class="string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span>,</span><br><span class="line">  (requestErr, response) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (requestErr) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(requestErr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      writeFile(<span class="string">"article.html"</span>, response.body, writeErr =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (writeErr) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(writeErr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"File written"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line">get(<span class="string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> writeFile(<span class="string">"article.html"</span>, response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"File written"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// perfect:</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getCleanCodeArticle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> get(</span><br><span class="line">      <span class="string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">await</span> writeFile(<span class="string">"article.html"</span>, response);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"File written"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><p><a href="https://juejin.im/post/5d0e11196fb9a07eee5ed6d2#heading-15" target="_blank" rel="noopener">掘金</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何提高代码的可读性、复用性、扩展性。我们将从以下四个方面讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.tiankai.party/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>webpack调试react代码</title>
    <link href="http://www.tiankai.party/posts/12906/"/>
    <id>http://www.tiankai.party/posts/12906/</id>
    <published>2019-06-24T01:39:24.000Z</published>
    <updated>2019-07-04T02:16:46.660Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前端工作总我们必不可少的操作就是<code>debug</code>学会<code>debug</code>可以帮助我们更好的理解程序的运行方式，也方便我们寻找<code>bug</code>,今天我们一起来了解一下直接使用<code>webstorm</code>来调试<code>react</code>代码。</p><a id="more"></a><h3 id="安装-Chrome-插件"><a href="#安装-Chrome-插件" class="headerlink" title="安装 Chrome 插件"></a>安装 Chrome 插件</h3><ul><li><p><a href="https://chrome.google.com/webstore/detail/hmhgeddbohgjknpmjagkdomcpobmllji" target="_blank" rel="noopener">谷歌浏览器 JetBrains IDE Support 插件 地址</a></p><ul><li>安装插件需要翻墙，不会翻墙的可以到<a href="https://github.com/tiakia/-" target="_blank" rel="noopener">这里取谷歌访问助手（只能访问谷歌和插件市场）</a>，来到谷歌插件市场下载插件</li></ul></li><li><p>配置插件端口<br><img src="/images/jet-ide-support.png" alt=""><br>我的项目启动时的端口就是<code>8000</code>所以这里配置成<code>localhost:8000</code>这里根据自己项目实际进行配置</p></li></ul><h3 id="webstorm-调试"><a href="#webstorm-调试" class="headerlink" title="webstorm 调试"></a>webstorm 调试</h3><ul><li>webstrom 调试的入口在右上角<br><img src="/images/jet-ide-1.png" alt=""></li><li>打开后按图示，点击<code>＋</code>选择<code>javascript debug</code>名称自己随意取，<code>URL</code>处填写自己项目启动的<code>http://localhost:8000</code>,在下面的项目目录选择<code>src</code>目录后的<code>RemoteURL</code>填写<code>webapck:///src</code>,然后点击确定<br><img src="/images/jet-ide-2.png" alt=""></li><li>这样就配置成功了，然后点击甲虫按钮，就可以开始调试了,在 webstorm 中打断点可以直接看到每一步的执行过程和变量变化情况<br><img src="/images/jet-ide-3.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端工作总我们必不可少的操作就是&lt;code&gt;debug&lt;/code&gt;学会&lt;code&gt;debug&lt;/code&gt;可以帮助我们更好的理解程序的运行方式，也方便我们寻找&lt;code&gt;bug&lt;/code&gt;,今天我们一起来了解一下直接使用&lt;code&gt;webstorm&lt;/code&gt;来调试&lt;code&gt;react&lt;/code&gt;代码。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.tiankai.party/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webstorm" scheme="http://www.tiankai.party/tags/webstorm/"/>
    
      <category term="工具" scheme="http://www.tiankai.party/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
