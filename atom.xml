<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiankai&#39;s Blog</title>
  
  <subtitle>或碌碌无为,或轰轰烈烈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tiankai.party/"/>
  <updated>2019-07-04T07:26:03.184Z</updated>
  <id>http://www.tiankai.party/</id>
  
  <author>
    <name>tiankai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何写出漂亮的js代码</title>
    <link href="http://www.tiankai.party/posts/58614/"/>
    <id>http://www.tiankai.party/posts/58614/</id>
    <published>2019-06-26T02:42:35.000Z</published>
    <updated>2019-07-04T07:26:03.184Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何提高代码的可读性、复用性、扩展性。我们将从以下四个方面讨论：</p><ul><li>变量</li><li>函数</li><li>类</li><li>异步</li></ul><a id="more"></a><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><h3 id="用有意义且常用的单词命名"><a href="#用有意义且常用的单词命名" class="headerlink" title="用有意义且常用的单词命名"></a>用有意义且常用的单词命名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="keyword">const</span> yyyymmdstr = moment().format(<span class="string">"YYYY/MM/DD"</span>);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">const</span> currentDate = moment().format(<span class="string">"YYYY/MM/DD"</span>);</span><br></pre></td></tr></table></figure><h3 id="保持统一"><a href="#保持统一" class="headerlink" title="保持统一"></a>保持统一</h3><p>对同一类型的变量使用相同的命名保持统一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line">getUserInfo();</span><br><span class="line">getClientData();</span><br><span class="line">getCustomerRecord();</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line">getUser();</span><br></pre></td></tr></table></figure><h3 id="每个常量-全大写-都该命名"><a href="#每个常量-全大写-都该命名" class="headerlink" title="每个常量(全大写)都该命名"></a>每个常量(全大写)都该命名</h3><p>可以用 ESLint 检测代码中未命名的常量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="comment">// 其他人知道 86400000 的意思吗？</span></span><br><span class="line">setTimeout(blastOff, <span class="number">86400000</span>);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">const</span> MILLISECOND_IN_A_DAY = <span class="number">86400000</span>;</span><br><span class="line">setTimeout(blastOff, MILLISECOND_IN_A_DAY);</span><br></pre></td></tr></table></figure><h3 id="避免无意义的命名"><a href="#避免无意义的命名" class="headerlink" title="避免无意义的命名"></a>避免无意义的命名</h3><p>既然创建了一个 car 对象，就没有必要把它的颜色命名为 carColor。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  carMake: <span class="string">"Honda"</span>,</span><br><span class="line">  carModel: <span class="string">"Accord"</span>,</span><br><span class="line">  carColor: <span class="string">"Blue"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">  car.carColor = <span class="string">"Red"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  make: <span class="string">"Honda"</span>,</span><br><span class="line">  model: <span class="string">"Accord"</span>,</span><br><span class="line">  color: <span class="string">"Blue"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">  car.color = <span class="string">"Red"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传参使用默认值"><a href="#传参使用默认值" class="headerlink" title="传参使用默认值"></a>传参使用默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> breweryName = name || <span class="string">"Hipster Brew Co."</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name = <span class="string">"Hipster Brew Co."</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><h3 id="函数参数-最好-2-个或更少"><a href="#函数参数-最好-2-个或更少" class="headerlink" title="函数参数( 最好 2 个或更少 )"></a>函数参数( 最好 2 个或更少 )</h3><p>如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title, body, buttonText, cancellable</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">&#123; title, body, buttonText, cancellable &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">createMenu(&#123;</span><br><span class="line">  title: <span class="string">"Foo"</span>,</span><br><span class="line">  body: <span class="string">"Bar"</span>,</span><br><span class="line">  buttonText: <span class="string">"Baz"</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="一个方法只做一件事情"><a href="#一个方法只做一件事情" class="headerlink" title="一个方法只做一件事情"></a>一个方法只做一件事情</h3><p>这是一条在软件工程领域流传久远的规则。严格遵守这条规则会让你的代码可读性更好，也更容易重构。如果违反这个规则，那么代码会很难被测试或者重用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">      email(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailActiveClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">  clients.filter(isActiveClient).forEach(email);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isActiveClient</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数名上体现它的作用"><a href="#函数名上体现它的作用" class="headerlink" title="函数名上体现它的作用"></a>函数名上体现它的作用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToDate</span>(<span class="params">date, month</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 很难知道是把什么加到日期中</span></span><br><span class="line">addToDate(date, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMonthToDate</span>(<span class="params">month, date</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">addMonthToDate(<span class="number">1</span>, date);</span><br></pre></td></tr></table></figure><h3 id="删除重复代码，合并相似函数"><a href="#删除重复代码，合并相似函数" class="headerlink" title="删除重复代码，合并相似函数"></a>删除重复代码，合并相似函数</h3><p>很多时候虽然是同一个功能，但由于一两个不同点，让你不得不写两个几乎相同的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span>(<span class="params">developers</span>) </span>&#123;</span><br><span class="line">  developers.forEach(<span class="function"><span class="params">developer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = developer.getExperience();</span><br><span class="line">    <span class="keyword">const</span> githubLink = developer.getGithubLink();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      githubLink</span><br><span class="line">    &#125;;</span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span>(<span class="params">managers</span>) </span>&#123;</span><br><span class="line">  managers.forEach(<span class="function"><span class="params">manager</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = manager.getExperience();</span><br><span class="line">    <span class="keyword">const</span> portfolio = manager.getMBAProjects();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      portfolio</span><br><span class="line">    &#125;;</span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showEmployeeList</span>(<span class="params">employees</span>) </span>&#123;</span><br><span class="line">  employees.forEach(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = employee.getExperience();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">switch</span> (employee.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"develop"</span>:</span><br><span class="line">        data.githubLink = employee.getGithubLink();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"manager"</span>:</span><br><span class="line">        data.portfolio = employee.getMBAProjects();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Object-assign-设置默认属性"><a href="#使用-Object-assign-设置默认属性" class="headerlink" title="使用 Object.assign 设置默认属性"></a>使用 Object.assign 设置默认属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="keyword">const</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="literal">null</span>,</span><br><span class="line">  body: <span class="string">"Bar"</span>,</span><br><span class="line">  buttonText: <span class="literal">null</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">"Foo"</span>;</span><br><span class="line">  config.body = config.body || <span class="string">"Bar"</span>;</span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">"Baz"</span>;</span><br><span class="line">  config.cancellable =</span><br><span class="line">    config.cancellable !== <span class="literal">undefined</span> ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">createMenu(menuConfig);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">const</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="string">"Order"</span>,</span><br><span class="line">  <span class="comment">// 不包含 body</span></span><br><span class="line">  buttonText: <span class="string">"Send"</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config = <span class="built_in">Object</span>.assign(</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"Foo"</span>,</span><br><span class="line">      body: <span class="string">"Bar"</span>,</span><br><span class="line">      buttonText: <span class="string">"Baz"</span>,</span><br><span class="line">      cancellable: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    config</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// config : &#123;title: "Order", body: "Bar", buttonText: "Send", cancellable: true&#125;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">createMenu(menuConfig);</span><br></pre></td></tr></table></figure><h3 id="尽量不要写全局方法"><a href="#尽量不要写全局方法" class="headerlink" title="尽量不要写全局方法"></a>尽量不要写全局方法</h3><p>在 JavaScript 中，永远不要污染全局，会在生产环境中产生难以预料的 bug。举个例子，比如你在 Array.prototype 上新增一个 diff 方法来判断两个数组的不同。而你同事也打算做类似的事情，不过他的 diff 方法是用来判断两个数组首位元素的不同。很明显你们方法会产生冲突，遇到这类问题我们可以用 ES2015/ES6 的语法来对 Array 进行扩展。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.diff = <span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">comparisonArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(comparisonArray);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  diff(comparisonArray) &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(comparisonArray);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尽量别用“非”条件句"><a href="#尽量别用“非”条件句" class="headerlink" title="尽量别用“非”条件句"></a>尽量别用“非”条件句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodeNotPresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isDOMNodeNotPresent(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodePresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isDOMNodePresent(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不要过度优化"><a href="#不要过度优化" class="headerlink" title="不要过度优化"></a>不要过度优化</h3><p>现代浏览器已经在底层做了很多优化，过去的很多优化方案都是无效的，会浪费你的时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="comment">// 现代浏览器已对此( 缓存 list.length )做了优化。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除弃用代码"><a href="#删除弃用代码" class="headerlink" title="删除弃用代码"></a>删除弃用代码</h3><p>这里没有实例代码，删除就对了</p><h2 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h2><h3 id="使用-ES6-的-class"><a href="#使用-ES6-的-class" class="headerlink" title="使用 ES6 的 class"></a>使用 ES6 的 class</h3><p>在 ES6 之前，没有类的语法，只能用构造函数的方式模拟类，可读性非常差。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="comment">// 动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  move() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 哺乳动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age, furColor) &#123;</span><br><span class="line">    <span class="keyword">super</span>(age);</span><br><span class="line">    <span class="keyword">this</span>.furColor = furColor;</span><br><span class="line">  &#125;</span><br><span class="line">  liveBirth() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 人类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age, furColor, languageSpoken) &#123;</span><br><span class="line">    <span class="keyword">super</span>(age, furColor);</span><br><span class="line">    <span class="keyword">this</span>.languageSpoken = languageSpoken;</span><br><span class="line">  &#125;</span><br><span class="line">  speak() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用链式调用"><a href="#使用链式调用" class="headerlink" title="使用链式调用"></a>使用链式调用</h3><p>这种模式相当有用，可以在很多库中都有使用。它让你的代码简洁优雅。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(make, model, color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"Ford"</span>, <span class="string">"F-150"</span>, <span class="string">"red"</span>);</span><br><span class="line">car.setColor(<span class="string">"pink"</span>);</span><br><span class="line">car.save();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(make, model, color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"Ford"</span>, <span class="string">"F-150"</span>, <span class="string">"red"</span>).setColor(<span class="string">"pink"</span>).save();</span><br></pre></td></tr></table></figure><h2 id="四、异步"><a href="#四、异步" class="headerlink" title="四、异步"></a>四、异步</h2><p>使用 promise 或者 Async/Await 代替回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line">get(</span><br><span class="line">  <span class="string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span>,</span><br><span class="line">  (requestErr, response) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (requestErr) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(requestErr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      writeFile(<span class="string">"article.html"</span>, response.body, writeErr =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (writeErr) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(writeErr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"File written"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line">get(<span class="string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> writeFile(<span class="string">"article.html"</span>, response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"File written"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// perfect:</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getCleanCodeArticle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> get(</span><br><span class="line">      <span class="string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">await</span> writeFile(<span class="string">"article.html"</span>, response);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"File written"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><p><a href="https://juejin.im/post/5d0e11196fb9a07eee5ed6d2#heading-15" target="_blank" rel="noopener">掘金</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何提高代码的可读性、复用性、扩展性。我们将从以下四个方面讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.tiankai.party/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>webpack调试react代码</title>
    <link href="http://www.tiankai.party/posts/12906/"/>
    <id>http://www.tiankai.party/posts/12906/</id>
    <published>2019-06-24T01:39:24.000Z</published>
    <updated>2019-07-04T02:16:46.660Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前端工作总我们必不可少的操作就是<code>debug</code>学会<code>debug</code>可以帮助我们更好的理解程序的运行方式，也方便我们寻找<code>bug</code>,今天我们一起来了解一下直接使用<code>webstorm</code>来调试<code>react</code>代码。</p><a id="more"></a><h3 id="安装-Chrome-插件"><a href="#安装-Chrome-插件" class="headerlink" title="安装 Chrome 插件"></a>安装 Chrome 插件</h3><ul><li><p><a href="https://chrome.google.com/webstore/detail/hmhgeddbohgjknpmjagkdomcpobmllji" target="_blank" rel="noopener">谷歌浏览器 JetBrains IDE Support 插件 地址</a></p><ul><li>安装插件需要翻墙，不会翻墙的可以到<a href="https://github.com/tiakia/-" target="_blank" rel="noopener">这里取谷歌访问助手（只能访问谷歌和插件市场）</a>，来到谷歌插件市场下载插件</li></ul></li><li><p>配置插件端口<br><img src="/images/jet-ide-support.png" alt=""><br>我的项目启动时的端口就是<code>8000</code>所以这里配置成<code>localhost:8000</code>这里根据自己项目实际进行配置</p></li></ul><h3 id="webstorm-调试"><a href="#webstorm-调试" class="headerlink" title="webstorm 调试"></a>webstorm 调试</h3><ul><li>webstrom 调试的入口在右上角<br><img src="/images/jet-ide-1.png" alt=""></li><li>打开后按图示，点击<code>＋</code>选择<code>javascript debug</code>名称自己随意取，<code>URL</code>处填写自己项目启动的<code>http://localhost:8000</code>,在下面的项目目录选择<code>src</code>目录后的<code>RemoteURL</code>填写<code>webapck:///src</code>,然后点击确定<br><img src="/images/jet-ide-2.png" alt=""></li><li>这样就配置成功了，然后点击甲虫按钮，就可以开始调试了,在 webstorm 中打断点可以直接看到每一步的执行过程和变量变化情况<br><img src="/images/jet-ide-3.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端工作总我们必不可少的操作就是&lt;code&gt;debug&lt;/code&gt;学会&lt;code&gt;debug&lt;/code&gt;可以帮助我们更好的理解程序的运行方式，也方便我们寻找&lt;code&gt;bug&lt;/code&gt;,今天我们一起来了解一下直接使用&lt;code&gt;webstorm&lt;/code&gt;来调试&lt;code&gt;react&lt;/code&gt;代码。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.tiankai.party/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webstorm" scheme="http://www.tiankai.party/tags/webstorm/"/>
    
      <category term="工具" scheme="http://www.tiankai.party/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>如何开启win10的linux子系统</title>
    <link href="http://www.tiankai.party/posts/24326/"/>
    <id>http://www.tiankai.party/posts/24326/</id>
    <published>2019-06-14T07:11:58.000Z</published>
    <updated>2019-07-04T07:51:12.198Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>转载自 CSDN 备忘一下。</p><a id="more"></a><h3 id="启用开发者模式"><a href="#启用开发者模式" class="headerlink" title="启用开发者模式"></a><strong>启用开发者模式</strong></h3><h4 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a><strong>打开设置</strong></h4><p><img src="/images/win10-linux-1.png" alt=""></p><h4 id="点击更新和安全"><a href="#点击更新和安全" class="headerlink" title="点击更新和安全"></a><strong>点击更新和安全</strong></h4><p><img src="/images/win10-linux-2.png" alt=""></p><h4 id="点击开发者选项"><a href="#点击开发者选项" class="headerlink" title="点击开发者选项"></a><strong>点击开发者选项</strong></h4><p><img src="/images/win10-linux-3.png" alt=""></p><h4 id="启用开发人员模式"><a href="#启用开发人员模式" class="headerlink" title="启用开发人员模式"></a><strong>启用开发人员模式</strong></h4><p><img src="/images/win10-linux-4.png" alt=""></p><h4 id="更改系统功能"><a href="#更改系统功能" class="headerlink" title="更改系统功能"></a><strong>更改系统功能</strong></h4><p>使用 <code>win+X</code> 快捷键调出系统管理菜单后点击应用和功能，选择程序和功能</p><p><img src="/images/win10-linux-5.png" alt=""></p><h4 id="选中启用或关闭-Windows-功能"><a href="#选中启用或关闭-Windows-功能" class="headerlink" title="选中启用或关闭 Windows 功能"></a><strong>选中启用或关闭 Windows 功能</strong></h4><p><img src="/images/win10-linux-6.png" alt=""></p><h4 id="勾选适用于-Linux-的-Windows-子系统"><a href="#勾选适用于-Linux-的-Windows-子系统" class="headerlink" title="勾选适用于 Linux 的 Windows 子系统"></a><strong>勾选适用于 Linux 的 Windows 子系统</strong></h4><p>然后确认并重启就可以了</p><p><img src="/images/win10-linux-7.png" alt=""></p><h3 id="安装-Linux-系统"><a href="#安装-Linux-系统" class="headerlink" title="安装 Linux 系统"></a><strong>安装 Linux 系统</strong></h3><hr><p>打开功能以后系统中其实还没有安装 Linux，需要使用 cmd 完成安装。<br>首先按<code>Win+R</code> 开启 cmd 命令输入框，然后输入<code>lxrun /install /y</code> 来下载 Linux 系统（注意斜杠后面前要空一格，要不然无法识别命令）</p><p>PS: 这里安装需要翻墙</p><hr><p><img src="/images/win10-linux-8.png" alt=""></p><p>好了，现在安装成功了，可以为所欲为了！</p><p>首先输入 bash 指令进入 Ubuntu 系统</p><p><img src="/images/win10-linux-9.png" alt=""></p><p>接着可以输入 passwd 重置密码，重置完密码就可以正常使用 Ubuntu 系统了。至此，基本的安装工作就完成了。</p><p>=================================菜鸟分割线===================================</p><h2 id="Linux-进阶"><a href="#Linux-进阶" class="headerlink" title="Linux 进阶"></a>Linux 进阶</h2><p>在 Ubuntu 下我们可以通过 <code>apt-get</code> 命令 很方便的安装 / 卸载软件，由于默认的软件包仓库是位于国外的，安装软件的时候就可能遇到各种网络问题或者下载到的一些资源不完整，因此就需要切换数据源为国内的镜像站点来改善。</p><p>编辑数据源配置文件 <code>vi /etc/apt/sources.list</code></p><p><img src="/images/win10-linux-10.png" alt=""></p><p>接着就进入 <code>vi</code> 编辑器</p><p><img src="/images/win10-linux-11.png" alt=""></p><p>继续按 <code>enter</code> 键进入真正的 <code>vi</code> 编辑页面</p><p><img src="/images/win10-linux-12.png" alt=""></p><p>vi 编辑器一共有三种模式，分别是<strong>命令模式（command mode）</strong>、<strong>插入模式（Insert mode）</strong>和<strong>底行模式（last line mode）</strong>。命令模式下我们只能控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入 Insert mode 下，或者到 last line mode 等；插入模式下可以做文字输入，按「ESC」键可回到命令行模式；底行模式下，可以将文件保存或退出 vi，也可以设置编辑环境，如寻找字符串、列出行号等。</p><p>当我们进入 vi 编辑器的时候默认是命令行模式，这是后如果想编辑内容，就输入 <code>i/a</code> 命令就可以了。现在我们要把镜像源改为阿里的，所以插入如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>复制上面的代码，移动光标到最后一行，按<code>A</code>键，然后点击鼠标右键复制<br>接着按<code>「ESC」</code>退到命令行模式，输入命令行 <code>wq!</code> 保存退出就好了。</p><p>接着输入命令 <code>apt-get update</code> 更新配置就可以了，这个过程可能比较长，祝好运！</p><p><img src="/images/win10-linux-13.png" alt=""></p><hr><blockquote><p>参考链接</p></blockquote><p><a href="https://blog.csdn.net/zhangdongren/article/details/82663977" target="_blank" rel="noopener">云扬大叔</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自 CSDN 备忘一下。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.tiankai.party/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://www.tiankai.party/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>记录几种不常见的js计算</title>
    <link href="http://www.tiankai.party/posts/16185/"/>
    <id>http://www.tiankai.party/posts/16185/</id>
    <published>2019-05-22T07:50:19.000Z</published>
    <updated>2019-07-04T07:28:09.448Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>总结几种平时不常见的 js 中的计算方式</p><ul><li>按位与</li><li>异或</li><li>添加标志位</li><li>清除标志位</li></ul><a id="more"></a><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p><strong>十进制转换二进制：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"5"</span>.charCodeAt().toString(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 的二进制为 0101</span></span><br><span class="line"><span class="comment">// 1 的二进制为 0001</span></span><br><span class="line"><span class="comment">// 2 的二进制为 0010</span></span><br><span class="line"><span class="comment">// 3 的二进制为 0011</span></span><br><span class="line"><span class="comment">// 4 的二进制为 0100</span></span><br></pre></td></tr></table></figure><p><strong>二进制转换十进制：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'0100'</span>, <span class="number">2</span>) = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><h3 id="按位与"><a href="#按位与" class="headerlink" title="按位与"></a>按位与</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &amp; <span class="number">1</span> -&gt; <span class="number">1</span></span><br><span class="line"><span class="number">5</span> &amp; <span class="number">2</span> -&gt; <span class="number">0</span></span><br><span class="line"><span class="number">5</span> &amp; <span class="number">3</span> -&gt; <span class="number">1</span></span><br><span class="line"><span class="number">5</span> &amp; <span class="number">4</span> -&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>按位与的计算规则：</strong><br>只有在相同位置都为 1 时 结果才是 1,其他则为 0</p><hr><table><thead><tr><th>十进制</th><th>二进制</th><th>计算</th><th>结果</th><th>转换为十进制</th></tr></thead><tbody><tr><td>5</td><td>0101</td><td>5 &amp; 5</td><td>0101</td><td>5</td></tr><tr><td>4</td><td>0100</td><td>5 &amp; 4</td><td>0100</td><td>4</td></tr><tr><td>3</td><td>0011</td><td>5 &amp; 3</td><td>0001</td><td>1</td></tr><tr><td>2</td><td>0010</td><td>5 &amp; 2</td><td>0000</td><td>0</td></tr><tr><td>1</td><td>0001</td><td>5 &amp; 1</td><td>0001</td><td>1</td></tr></tbody></table><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p><strong>计算规则</strong><br>相同则为 0 不同则为 1</p><hr><table><thead><tr><th>十进制</th><th>二进制</th><th>计算</th><th>结果</th><th>转换为十进制</th></tr></thead><tbody><tr><td>5</td><td>0101</td><td>5 ^ 5</td><td>0000</td><td>0</td></tr><tr><td>4</td><td>0100</td><td>5 ^ 4</td><td>0001</td><td>1</td></tr><tr><td>3</td><td>0011</td><td>5 ^ 3</td><td>0110</td><td>6</td></tr><tr><td>2</td><td>0010</td><td>5 ^ 2</td><td>0111</td><td>7</td></tr><tr><td>1</td><td>0001</td><td>5 ^ 1</td><td>0100</td><td>4</td></tr></tbody></table><h3 id="添加标志位"><a href="#添加标志位" class="headerlink" title="添加标志位"></a>添加标志位</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> | <span class="number">1</span> =&gt; <span class="number">0101</span> =&gt; <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>计算规则</strong><br>只要有 1 就为 1</p><hr><table><thead><tr><th>十进制</th><th>二进制</th><th>计算</th><th>结果</th><th>转换为十进制</th></tr></thead><tbody><tr><td>5</td><td>0101</td><td>5 \ 5</td><td>0101</td><td>5</td></tr><tr><td>4</td><td>0100</td><td>5 \ 4</td><td>0101</td><td>5</td></tr><tr><td>3</td><td>0011</td><td>5 \ 3</td><td>0111</td><td>7</td></tr><tr><td>2</td><td>0010</td><td>5 \ 2</td><td>0111</td><td>7</td></tr><tr><td>1</td><td>0001</td><td>5 \ 1</td><td>0101</td><td>5</td></tr></tbody></table><h3 id="清除标志位"><a href="#清除标志位" class="headerlink" title="清除标志位"></a>清除标志位</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &amp; ~<span class="number">1</span> =&gt; <span class="number">0100</span> =&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>计算规则</strong><br>相同则为 0,不同则前面的为准，覆盖</p><hr><table><thead><tr><th>十进制</th><th>二进制</th><th>计算</th><th>结果</th><th>转换为十进制</th></tr></thead><tbody><tr><td>5</td><td>0101</td><td>5 &amp; ~5</td><td>0000</td><td>0</td></tr><tr><td>4</td><td>0100</td><td>5 &amp; ~4</td><td>0001</td><td>4</td></tr><tr><td>3</td><td>0011</td><td>5 &amp; ~3</td><td>0100</td><td>4</td></tr><tr><td>2</td><td>0010</td><td>5 &amp; ~2</td><td>0101</td><td>5</td></tr><tr><td>1</td><td>0001</td><td>5 &amp; ~1</td><td>0100</td><td>4</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结几种平时不常见的 js 中的计算方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按位与&lt;/li&gt;
&lt;li&gt;异或&lt;/li&gt;
&lt;li&gt;添加标志位&lt;/li&gt;
&lt;li&gt;清除标志位&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.tiankai.party/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js常用的继承方式</title>
    <link href="http://www.tiankai.party/posts/40543/"/>
    <id>http://www.tiankai.party/posts/40543/</id>
    <published>2019-05-22T07:46:36.000Z</published>
    <updated>2019-05-28T03:57:40.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们这里列举几种常见的继承方式</p><ul><li>组合继承（继承构造函数和原型链）</li><li>寄生组合继承（继承构造函数和原型链）</li><li>ES6 继承方式</li></ul><a id="more"></a><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类原型上的方法，可以继承给子类</span></span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用父类的实例，实现构造函数的继承，继承父类的属性</span></span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父类的原型链，此时子类的原型已经继承了父类</span></span><br><span class="line"><span class="comment">// 但是子类的构造函数也变成了父类构造函数</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"><span class="comment">// 重新指定子类的构造函数为子类自己的构造函数</span></span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"><span class="comment">// 子类的原型上添加自己的方法</span></span><br><span class="line">Child.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> Child(<span class="string">"hmm"</span>, <span class="string">"23"</span>);</span><br><span class="line">instance1.sayAge(); <span class="comment">// '23'</span></span><br><span class="line">instance1.sayName(); <span class="comment">// 'hmm'</span></span><br><span class="line">instance1.color.push(<span class="string">"black"</span>); <span class="comment">// ['red', 'green', 'blue', 'black'];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> Child(<span class="string">"liLei"</span>, <span class="string">"25"</span>);</span><br><span class="line">instance2.sayAge(); <span class="comment">// '25'</span></span><br><span class="line">instance2.sayName(); <span class="comment">// 'liLei'</span></span><br><span class="line">instance2.color.push(<span class="string">"pink"</span>); <span class="comment">// ['red', 'green', 'blue', 'pink'];</span></span><br></pre></td></tr></table></figure><p>如此，实现了继承了父类的原型上面的方法，也继承了父类的构造函数上面的属性。而且多个子类之间对父类修改属性互不影响。</p><p><strong>缺点：</strong></p><ul><li>子类在继承父类构造函数的时候调用了一次父类构造函数<code>Parent.call(this, name)</code>,子类的构造函数上加了俩个属性<code>name/color</code></li><li>子类在继承父类原型的时候调用了一次<code>Child.prototype = new Parent();</code>,给子类的原型上加了俩个属性 <code>name/color</code></li></ul><p><img src="/../images/js-extend.png" alt="js继承"></p><p><strong>缺点就是子类的构造函数和原型上存在了相同的属性和方法</strong></p><h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><p>在子类继承父类原型的时候不调用<code>new Parent()</code>，而是创建父类原型的副本，然后实现继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">child, parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.create(parent.prototype); <span class="comment">// 创建对象，创建父类原型的一个副本</span></span><br><span class="line">  prototype.constructor = child; <span class="comment">// 增强对象，弥补因重写原型而失去的默认的constructor 属性</span></span><br><span class="line">  child.prototype = prototype; <span class="comment">// 指定对象，将新创建的对象赋值给子类的原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类原型上的方法，可以继承给子类</span></span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用父类的实例，实现构造函数的继承，继承父类的属性</span></span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将父类原型指向子类</span></span><br><span class="line">inheritPrototype(Child, Parent);</span><br><span class="line"><span class="comment">// 子类的原型上添加自己的方法</span></span><br><span class="line">Child.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> Child(<span class="string">"hmm"</span>, <span class="string">"23"</span>);</span><br><span class="line">instance1.sayAge(); <span class="comment">// '23'</span></span><br><span class="line">instance1.sayName(); <span class="comment">// 'hmm'</span></span><br><span class="line">instance1.color.push(<span class="string">"black"</span>); <span class="comment">// ['red', 'green', 'blue', 'black'];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> Child(<span class="string">"liLei"</span>, <span class="string">"25"</span>);</span><br><span class="line">instance2.sayAge(); <span class="comment">// '25'</span></span><br><span class="line">instance2.sayName(); <span class="comment">// 'liLei'</span></span><br><span class="line">instance2.color.push(<span class="string">"pink"</span>); <span class="comment">// ['red', 'green', 'blue', 'pink'];</span></span><br></pre></td></tr></table></figure><p>我们来看一看<code>instance1</code>的构造函数和原型上是否还有相同的属性<code>name/colors</code><br><img src="/../images/js-extend-1.png" alt="js继承"><br>我们看到子类的原型上没有出现多余的属性，因为我们只在子类的构造函数中使用了<code>Parent.call(this)</code>来实现继承，原型上我们是创建了一个父类原型的副本来实现继承的。</p><h3 id="ES6-继承"><a href="#ES6-继承" class="headerlink" title="ES6 继承"></a>ES6 继承</h3><p>ES6 的继承依靠关键字 <code>extends</code>,我们先来新建一个 ES6 的类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reactangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(width, height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br><span class="line">  get area() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.calcArea();</span><br><span class="line">  &#125;</span><br><span class="line">  calcArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reactangle = <span class="keyword">new</span> Reactangle(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reactangle.area); <span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Reactangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length) &#123;</span><br><span class="line">    <span class="keyword">super</span>(length, length); <span class="comment">// 正方形</span></span><br><span class="line">  &#125;</span><br><span class="line">  get area() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> square = <span class="keyword">new</span> Square(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(square.area); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们这里列举几种常见的继承方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组合继承（继承构造函数和原型链）&lt;/li&gt;
&lt;li&gt;寄生组合继承（继承构造函数和原型链）&lt;/li&gt;
&lt;li&gt;ES6 继承方式&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="继承" scheme="http://www.tiankai.party/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>更简单的方式理解call、apply、bind</title>
    <link href="http://www.tiankai.party/posts/62321/"/>
    <id>http://www.tiankai.party/posts/62321/</id>
    <published>2019-05-20T03:54:57.000Z</published>
    <updated>2019-05-24T07:41:24.366Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>call/apply/bind</code> 三种方法都是我们改变<code>this</code>指向的，<code>call</code>、<code>apply</code> 是改变指向后顺便执行函数，而<code>bind</code> 是改变指向后返回函数不执行。<code>call</code>和<code>apply</code>差别是<code>call</code>接受的是若干个参数的列表，<code>apply</code>接受的是一个包含多个参数的数组。我们这里提供一种更简单的思路来理解他们。<br><a id="more"></a></p><h2 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call/apply/bind"></a>call/apply/bind</h2><p>先来看一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> value = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bar.call(foo); <span class="comment">// 1;</span></span><br></pre></td></tr></table></figure><p><strong>调用call的过程我们可以这样解析</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  foo.bar();</span><br><span class="line"><span class="comment">// bar.call(foo); bar 函数的 this 绑定到 foo 上面,  foo 添加 bar 函数属性，然后调用。</span></span><br></pre></td></tr></table></figure><p>像我们常用的判断变量类型的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(foo);</span><br></pre></td></tr></table></figure><p>就是将 Object 的 toString 方法 绑定到 foo 上，并且<code>call</code>方法自动给我们调用了，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.toString(); <span class="comment">// 调用的是 Object.prototype.toString()</span></span><br></pre></td></tr></table></figure><p>或者用简单的一句话来总结就是： <code>call</code>函数前面<code>this</code>会被指向到<code>call</code>函数里面。</p><blockquote><p> tips: 当 <code>call</code> 的参数是 <code>null</code>或者<code>undefined</code> 的时候 <code>this</code> 被改变指向到了 <code>Window</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scope = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        scope: <span class="keyword">this</span>.scope,</span><br><span class="line">        name: name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    scope: <span class="string">'foo'</span></span><br><span class="line">&#125;</span><br><span class="line">bar.call(<span class="literal">null</span>, <span class="string">"Hmm"</span>); <span class="comment">// &#123; scope: 'global', name: 'Hmm' &#125;</span></span><br><span class="line">bar.call(foo, <span class="string">"Hmm"</span>); <span class="comment">// &#123; scope: 'foo', name: 'Hmm' &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;call/apply/bind&lt;/code&gt; 三种方法都是我们改变&lt;code&gt;this&lt;/code&gt;指向的，&lt;code&gt;call&lt;/code&gt;、&lt;code&gt;apply&lt;/code&gt; 是改变指向后顺便执行函数，而&lt;code&gt;bind&lt;/code&gt; 是改变指向后返回函数不执行。&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;差别是&lt;code&gt;call&lt;/code&gt;接受的是若干个参数的列表，&lt;code&gt;apply&lt;/code&gt;接受的是一个包含多个参数的数组。我们这里提供一种更简单的思路来理解他们。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="call,apply,bind" scheme="http://www.tiankai.party/tags/call-apply-bind/"/>
    
  </entry>
  
  <entry>
    <title>npx是什么</title>
    <link href="http://www.tiankai.party/posts/3356/"/>
    <id>http://www.tiankai.party/posts/3356/</id>
    <published>2019-04-25T02:47:55.000Z</published>
    <updated>2019-04-26T02:20:49.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>npm 从5.2版开始，增加了 npx 命令,也可以单独下载:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npx</span><br></pre></td></tr></table></figure></p><p>npx的出现是为了解决一些我们平时工作中的一些痛点，本文列举几个常用的场景。<br><a id="more"></a></p><h3 id="避免全局安装模块"><a href="#避免全局安装模块" class="headerlink" title="避免全局安装模块"></a>避免全局安装模块</h3><p>以<code>create-react-app</code>为例，我们在创建脚手架项目时，脚手架一般都是安装到全局环境中，但是这些模块我们有时候只是偶尔用一下，也要安装到全局，这样会占用我们电脑的空间，这种情况我们可以使用<code>npx</code>来解决问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app myapp</span><br></pre></td></tr></table></figure></p><p><code>npx</code>可以做到运行<code>create-react-app</code>而不安装它，上面代码运行时，<code>npx</code> 将<code>create-react-app</code>下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载<code>create-react-app</code>。</p><h4 id="运行指定版本的包"><a href="#运行指定版本的包" class="headerlink" title="运行指定版本的包"></a>运行指定版本的包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app@3.0 myapp</span><br></pre></td></tr></table></figure><p>上面代码指定运行<code>3.0</code>版本的<code>create-react-app</code></p><h4 id="使用本地包还是远程包"><a href="#使用本地包还是远程包" class="headerlink" title="使用本地包还是远程包"></a>使用本地包还是远程包</h4><ul><li><p><code>--no-install</code>参数<br>如果想让 <code>npx</code> 强制使用本地模块，不下载远程模块，可以使用<strong><code>--no-install</code></strong>参数。如果本地不存在该模块，就会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx --no-install create-react-app myapp</span><br></pre></td></tr></table></figure><p>  上面代码指定使用本地版本的<code>create-react-app</code>来创建<code>myapp</code></p></li><li><p><code>--ignore-existing</code>参数<br>如果想使用远程的<code>create-react-app</code>模块，不使用本地<code>create-react-app</code>模块，可以使用<strong><code>--ignore-existing</code></strong>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx --ignore-existing create-react-app myapp</span><br></pre></td></tr></table></figure><p>  上面的代码不会调用本地的<code>create-react-app</code>去创建<code>myapp</code>，而是会从远程调用最新的<code>create-react-app</code></p></li></ul><h3 id="调用项目安装的模块"><a href="#调用项目安装的模块" class="headerlink" title="调用项目安装的模块"></a>调用项目安装的模块</h3><p><code>npx</code> 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了测试工具 <code>Mocha</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D mocha</span><br></pre></td></tr></table></figure><p>一般来说，调用 <code>Mocha</code> ，只能在项目脚本和 <code>package.json</code> 的<code>scripts</code>字段里面， 如果想在命令行下调用，必须像下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目的根目录下执行</span></span><br><span class="line">$ node-modules/.bin/mocha --version</span><br></pre></td></tr></table></figure><p><code>npx</code> 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx mocha --version</span><br></pre></td></tr></table></figure><p><code>npx</code> 的原理很简单，就是运行的时候，会到<code>node_modules/.bin</code>路径和环境变量<code>$PATH</code>里面，检查命令是否存在。</p><p>由于 <code>npx</code> 会检查环境变量<code>$PATH</code>，所以系统命令也可以调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等同于 ls</span></span><br><span class="line">$ npx ls</span><br></pre></td></tr></table></figure><p>注意，<code>Bash</code> 内置的命令不在<code>$PATH</code>里面，所以不能用。比如，<code>cd</code>是 <code>Bash</code> 命令，因此就不能用<code>npx cd</code>。</p><h3 id="使用不同版本的-node"><a href="#使用不同版本的-node" class="headerlink" title="使用不同版本的 node"></a>使用不同版本的 node</h3><p>假设你本机安装的<code>node 10.15.0</code>的版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npx node@9 -v</span><br><span class="line">v9.11.2</span><br><span class="line">$ node -v</span><br><span class="line">v10.15.0</span><br></pre></td></tr></table></figure></p><p>上面的指令表示，我们使用<code>npx</code>安装了<code>node v9.11.2</code>版本，使用后再删掉，再次打印<code>node</code>的版本变回了我们本机原本安装的<code>10.15.0</code>版本，某些情况下可能比<code>nvm</code>管理<code>node</code>版本更方便些。</p><ul><li><code>-p</code>参数<br><code>-p</code>参数用于安装指定版本的模块，所以上面的指令可以写成这样：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx -p node@9 node -v</span><br><span class="line">v9.11.2</span><br></pre></td></tr></table></figure></li></ul><p>上面的指令表示，先安装<code>node v9.11.2</code>版本，然后再执行<code>node -v</code>命令</p><hr><p>如果你是<code>Windows</code>系统要使用<code>nvmw</code>来管理<code>node</code>版本的话，可能会出错，这里推荐我修改的 <a href="https://github.com/tiakia/nvmw-china" target="_blank" rel="noopener">nvmw-china</a>来管理版本。</p><blockquote><p>参考链接</p></blockquote><p><a href="http://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener">阮一峰</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;npm 从5.2版开始，增加了 npx 命令,也可以单独下载:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g npx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;npx的出现是为了解决一些我们平时工作中的一些痛点，本文列举几个常用的场景。&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="http://www.tiankai.party/categories/node/"/>
    
    
      <category term="npm" scheme="http://www.tiankai.party/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>js连续赋值的坑</title>
    <link href="http://www.tiankai.party/posts/62611/"/>
    <id>http://www.tiankai.party/posts/62611/</id>
    <published>2019-04-08T03:38:38.000Z</published>
    <updated>2019-04-25T09:57:26.645Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>思考这个问题:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;; </span><br><span class="line"><span class="keyword">var</span> b = a;  </span><br><span class="line">a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(a.x); </span><br><span class="line"><span class="built_in">console</span>.log(b.x);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>上面的 代码看似简单,但是执行结果却是出乎我们意料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.x); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b.x) <span class="comment">// &#123;n:2&#125;</span></span><br></pre></td></tr></table></figure><p>我们知道，内存中数据存储的方式有栈和堆俩种，基本数据类型存放于栈中，以压栈的方式进入存储，引用类型的数据存放于堆中，在栈保存的只是堆的地址。</p><p>所以执行完<code>var b = a;</code>代码后，<code>a</code>和<code>b</code>都指向了<code>{n:1}</code>这点毋庸置疑，</p><p>重点关注的就是最后的连续赋值语句<code>a.x=a={n:2}</code>这个语句中到底发生了什么？</p><p>我们知道<code>js</code>中的赋值语句都是从右向左执行的，但是这里有一个运算符优先级的问题。</p><p><strong><code>.</code>运算符的优先级要高于<code>=</code>运输符</strong></p><p>所以<code>a.x=a={n:2}</code>首先会执行的是<code>a.x</code>，运算结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a: &#123;</span><br><span class="line">    n: <span class="number">1</span>,</span><br><span class="line">    x: <span class="literal">undefined</span></span><br><span class="line">&#125;;</span><br><span class="line">b: &#123;</span><br><span class="line">    n: <span class="number">1</span>,</span><br><span class="line">    x: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后从右向左执行<code>a={n:2}</code>，此时<code>a</code>已经被指向了<code>{n: 2}</code>的地址，</p><p>记住这一点：<br><strong><code>a.x</code>已经被解析了， 已经指向了内存中的<code>{n:1,x=undefined}</code>中的<code>x</code>，目前他正等待被赋值，所以下面在处理赋值表达式 <code>a = {n: 2}</code>时候，即使<code>a</code>发生了指向的变化，但也不再影响此刻的<code>a.x</code>了，因为已经对<code>a.x</code>进行了指向的确定，只不过他现在正在等待被赋值。</strong></p><p>此时内存中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a: &#123;</span><br><span class="line">    n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">b: &#123;</span><br><span class="line">    n: <span class="number">1</span>,</span><br><span class="line">    x: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如此，上面的最后操作结果就是<code>{n:1, x: undefined}.x = {n: 2}</code></p><p>那么最后内存中，就是这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a: &#123;</span><br><span class="line">    n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">b: &#123;</span><br><span class="line">    n: <span class="number">1</span>,</span><br><span class="line">    x: &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以最后的结果就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.x); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b.x); <span class="comment">// &#123; n: 2 &#125;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>参考链接</p></blockquote><p><a href="http://www.cnblogs.com/vajoy/p/3703859.html" target="_blank" rel="noopener">js连续赋值的坑</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思考这个问题:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123;&lt;span class=&quot;attr&quot;&gt;n&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = a;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.x = a = &amp;#123;&lt;span class=&quot;attr&quot;&gt;n&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.x); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b.x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.tiankai.party/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css实现八卦阵盘</title>
    <link href="http://www.tiankai.party/posts/60796/"/>
    <id>http://www.tiankai.party/posts/60796/</id>
    <published>2019-04-02T06:30:52.000Z</published>
    <updated>2019-05-30T11:03:18.171Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在实现八卦阵盘前，我们先实现一些基本形状。</p><a id="more"></a><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><p>我们使用的是<code>border</code>属性，设置宽高为零，然后设置<code>border</code>,可以实现不同类型的三角形</p><iframe id="cp_embed_xNJgVR" src="//codepen.io/tiakia/embed/xNJgVR?height=465&theme-id=light&slug-hash=xNJgVR&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="四边形"><a href="#四边形" class="headerlink" title="四边形"></a>四边形</h2><p>这里使用了俩种实现方式，</p><ul><li>一个矩形俩个三角形拼接成一个平行四边形</li><li>第二种是俩个三角形拼接</li></ul><iframe id="cp_embed_NVOapd" src="//codepen.io/tiakia/embed/NVOapd?height=465&theme-id=light&slug-hash=NVOapd&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="梯形"><a href="#梯形" class="headerlink" title="梯形"></a>梯形</h2><p>给元素一个固定宽，高度设置为零，然后设置边框，可以得到梯形</p><iframe id="cp_embed_OYBxgN" src="//codepen.io/tiakia/embed/OYBxgN?height=465&theme-id=light&slug-hash=OYBxgN&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="五边形"><a href="#五边形" class="headerlink" title="五边形"></a>五边形</h2><p>一个梯形俩个三角形或者一个梯形一个三角形组成<br><iframe id="cp_embed_vwVeJY" src="//codepen.io/tiakia/embed/vwVeJY?height=465&theme-id=light&slug-hash=vwVeJY&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="六边形"><a href="#六边形" class="headerlink" title="六边形"></a>六边形</h2><iframe id="cp_embed_MdPEzX" src="//codepen.io/tiakia/embed/MdPEzX?height=465&theme-id=light&slug-hash=MdPEzX&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="八边形"><a href="#八边形" class="headerlink" title="八边形"></a>八边形</h2><p>一个矩形和俩个梯形构成<br><iframe id="cp_embed_PvyOPj" src="//codepen.io/tiakia/embed/PvyOPj?height=465&theme-id=light&slug-hash=PvyOPj&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="五角星"><a href="#五角星" class="headerlink" title="五角星"></a>五角星</h2><p>三个三角形旋转，位置不好调<br><iframe id="cp_embed_XwxzXw" src="//codepen.io/tiakia/embed/XwxzXw?height=465&theme-id=light&slug-hash=XwxzXw&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="六角星"><a href="#六角星" class="headerlink" title="六角星"></a>六角星</h2><p>一个正立的三角形和一个倒立的三角形<br><iframe id="cp_embed_yWRPOQ" src="//codepen.io/tiakia/embed/yWRPOQ?height=465&theme-id=light&slug-hash=yWRPOQ&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="半圆"><a href="#半圆" class="headerlink" title="半圆"></a>半圆</h2><p><code>border-radius</code> 需要使用具体的数值来设置<br><iframe id="cp_embed_WBaXxJ" src="//codepen.io/tiakia/embed/WBaXxJ?height=465&theme-id=light&slug-hash=WBaXxJ&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="扇形"><a href="#扇形" class="headerlink" title="扇形"></a>扇形</h2><iframe id="cp_embed_pmxdEQ" src="//codepen.io/tiakia/embed/pmxdEQ?height=465&theme-id=light&slug-hash=pmxdEQ&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="球体"><a href="#球体" class="headerlink" title="球体"></a>球体</h2><p><code>background: radial-gradient</code> 背景颜色渐变来实现<br><iframe id="cp_embed_yWRPVG" src="//codepen.io/tiakia/embed/yWRPVG?height=465&theme-id=light&slug-hash=yWRPVG&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="爱心"><a href="#爱心" class="headerlink" title="爱心"></a>爱心</h2><p>也是有俩种方式实现</p><ul><li>俩个圆和一个正方形</li><li>俩个半圆矩形</li></ul><iframe id="cp_embed_rgqYjE" src="//codepen.io/tiakia/embed/rgqYjE?height=465&theme-id=light&slug-hash=rgqYjE&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="无穷大符号"><a href="#无穷大符号" class="headerlink" title="无穷大符号"></a>无穷大符号</h2><p>使用神奇的<code>border-radius</code>实现<br><iframe id="cp_embed_yWRPow" src="//codepen.io/tiakia/embed/yWRPow?height=465&theme-id=light&slug-hash=yWRPow&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="钻石"><a href="#钻石" class="headerlink" title="钻石"></a>钻石</h2><p>梯形加上一个 倒三角<br><iframe id="cp_embed_ZNqaad" src="//codepen.io/tiakia/embed/ZNqaad?height=465&theme-id=light&slug-hash=ZNqaad&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="八卦图"><a href="#八卦图" class="headerlink" title="八卦图"></a>八卦图</h2><p>俩个半圆拼接起来，然后以大圆的半径为直径画俩个圆</p><iframe id="cp_embed_KLGyZJ" src="//codepen.io/tiakia/embed/KLGyZJ?height=465&theme-id=light&slug-hash=KLGyZJ&default-tab=html.result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="八卦阵盘"><a href="#八卦阵盘" class="headerlink" title="八卦阵盘"></a>八卦阵盘</h2><iframe id="cp_embed_EzddxE" src="//codepen.io/tiakia/embed/EzddxE?height=465&theme-id=light&slug-hash=EzddxE&default-tab=html,result" scrolling="no" frameborder="no" height="465" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实现八卦阵盘前，我们先实现一些基本形状。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://www.tiankai.party/categories/css/"/>
    
    
      <category term="css3" scheme="http://www.tiankai.party/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>flutter第一次接触</title>
    <link href="http://www.tiankai.party/posts/801/"/>
    <id>http://www.tiankai.party/posts/801/</id>
    <published>2019-03-28T07:37:47.000Z</published>
    <updated>2019-04-25T09:56:49.625Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>去年大热的混合开发 APP 的框架<code>flutter</code>，最近体验了一把，在这里记录一些值得注意的东西。相比较于<code>React Native</code>来说，可能对前端不是很友好，但是也不是很难，可能很多同学因为要学<code>Dart</code>语言就怕了，其实写的时候，很少会用到<code>Dart</code>的语法，我们也只需要了解一点就行，本文不是教程，纯粹的是自己学习<code>Flutter</code>的笔记。</p><a id="more"></a><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p><code>Android Studio</code>需要提前安装<code>flutter</code>和<code>dart</code>这俩个依赖，然后就可以通过<code>Android Studio</code>直接新建<code>Flutter</code>项目。具体的安装方式<a href="https://flutterchina.club/setup-windows/" target="_blank" rel="noopener">查看这里</a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>pubspec.yaml</code>相当于<code>js</code>的<code>package.json</code>,里面有相关的依赖，还有版本号，如果要添加依赖可以直接在这个文件中添加，然后<code>Android Studio</code>上面就会有一个<code>Packages get</code>的操作帮助我们安装依赖。</p><h3 id="main-dart"><a href="#main-dart" class="headerlink" title="main.dart"></a>main.dart</h3><p>源文件在<code>lib/main.dart</code>，我们可以在这个文件中修改代码，有个<code>main()</code>函数就是我们对外展示的根函数。</p><figure class="highlight java"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">        home: <span class="keyword">new</span> MyApp()<span class="comment">// 自己写的组件</span></span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在首页就会展示我们写的<code>MyApp</code>组件的内容</p><h3 id="组件类型"><a href="#组件类型" class="headerlink" title="组件类型"></a>组件类型</h3><p><code>flutter</code>的组件类型有俩种，<code>StatelessWidget</code>无状态的组件，<code>StatefulWidget</code>有状态的组件。有状态的组件需要重写它的<code>createState</code>方法</p><figure class="highlight java"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function">State&lt;StatefulWidget&gt; <span class="title">createState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAppState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="build-方法"><a href="#build-方法" class="headerlink" title="build 方法"></a>build 方法</h3><p>组件中有一个重要的方法，<code>build</code>中返回的就是我们要展示的界面，我们这里实现一个页面中加减按钮的例子：</p><figure class="highlight java"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function">State&lt;StatefulWidget&gt; <span class="title">createState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAppState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">_increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">        count++;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">_remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">        <span class="keyword">if</span>(count &gt;<span class="number">0</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scaffold( <span class="comment">// 组件</span></span><br><span class="line">            appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">                title: <span class="keyword">new</span> Text(<span class="string">'Add-Count'</span>)</span><br><span class="line">            ),</span><br><span class="line">            body: <span class="keyword">new</span> Column( <span class="comment">// column 布局</span></span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">new</span> Center(</span><br><span class="line">            child: Text(<span class="string">'计算后的 Count 值为:'</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                  fontSize: <span class="number">24.0</span>,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Divider(),</span><br><span class="line">          <span class="keyword">new</span> Center(</span><br><span class="line">              child: Text(<span class="string">'$count'</span>,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                    fontSize: <span class="number">30.0</span>,</span><br><span class="line">                    color: Colors.redAccent,</span><br><span class="line">                    fontWeight: FontWeight.bold</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Row(</span><br><span class="line">              mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                <span class="keyword">new</span> IconButton(icon: Icon(Icons.remove_circle),</span><br><span class="line">                    iconSize: <span class="number">45.0</span>,</span><br><span class="line">                    color: Colors.lightBlue,</span><br><span class="line">                    padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                  _remove();</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="keyword">new</span> IconButton(icon: Icon(Icons.add_circle),</span><br><span class="line">                    iconSize: <span class="number">45.0</span>,</span><br><span class="line">                    color: Colors.lightBlue,</span><br><span class="line">                    padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">                    onPressed: ()&#123;</span><br><span class="line">                  _increment();</span><br><span class="line">                &#125;),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">        ],</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h3><p>其他的比如<code>flutter</code>的环境搭建和常用组件，布局方式等可以学习</p><ul><li>[flutter中文官网](<a href="https://flutterchina.club/docs/）" target="_blank" rel="noopener">https://flutterchina.club/docs/）</a></li></ul><p>教程可以去看看</p><ul><li><a href="https://jspang.com/post/flutter1.html" target="_blank" rel="noopener">技术胖的视频教程</a></li><li><a href="https://github.com/efoxTeam/flutter-ui" target="_blank" rel="noopener">flutter UI</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年大热的混合开发 APP 的框架&lt;code&gt;flutter&lt;/code&gt;，最近体验了一把，在这里记录一些值得注意的东西。相比较于&lt;code&gt;React Native&lt;/code&gt;来说，可能对前端不是很友好，但是也不是很难，可能很多同学因为要学&lt;code&gt;Dart&lt;/code&gt;语言就怕了，其实写的时候，很少会用到&lt;code&gt;Dart&lt;/code&gt;的语法，我们也只需要了解一点就行，本文不是教程，纯粹的是自己学习&lt;code&gt;Flutter&lt;/code&gt;的笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="flutter" scheme="http://www.tiankai.party/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://www.tiankai.party/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>如何在useEffect中请求数据</title>
    <link href="http://www.tiankai.party/posts/23994/"/>
    <id>http://www.tiankai.party/posts/23994/</id>
    <published>2019-03-15T06:19:24.000Z</published>
    <updated>2019-04-25T09:56:37.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>上次介绍了一些<code>effect</code>的知识，这次我们来实践操作一下，在<code>react-hooks</code>中改如何正确的请求数据。</p><a id="more"></a><h3 id="请求的无限循环？"><a href="#请求的无限循环？" class="headerlink" title="请求的无限循环？"></a>请求的无限循环？</h3><p>如果看过上节的文章那就知道了，我们这里来写个简单的例子，看看为什么会陷入无限循环的请求中。文章中请求使用自己封装的<a href="http://www.tiankai.party/posts/48591/">axios</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">"utils/axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> ajax(</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: <span class="string">"http://hn.algolia.com/api/v1/search"</span>,</span><br><span class="line">        params: &#123;<span class="attr">query</span>: <span class="string">'redux'</span>&#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      setData(result.data);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;data.hits.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class="line">          &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>然而，当你运行上面的代码的时候，你会陷入到该死的死循环中。<code>effect hook</code> 在组件 <code>mount</code> 和 <code>update</code> 的时候都会执行。因为我们每次获取数据后，都会更新 <code>state</code>，组件渲染后 React 会执行<code>effect</code>,这会一次又一次的请求数据。这就是<code>effect</code>依赖的问题，如果我们只想在<code>mount</code>的时候执行，那么我们需要设置<code>effect</code>的依赖项<code>[]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> ajax(</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: <span class="string">"http://hn.algolia.com/api/v1/search"</span>,</span><br><span class="line">        params: &#123;<span class="attr">query</span>: <span class="string">'redux'</span>&#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      setData(result.data);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;,[]);</span><br></pre></td></tr></table></figure><h3 id="如何手动的控制请求"><a href="#如何手动的控制请求" class="headerlink" title="如何手动的控制请求"></a>如何手动的控制请求</h3><p>上面我们完成了如何只在<code>mount</code>中发请求，但是如果我们想控制请求的触发呢，或者说我们想动态的给请求传参数。上面的例子中请求参数是<code>redux</code>，但是如果我们想参数换成<code>react</code>呢？ 我们这里提供一个<code>input</code>输入框来提供请求参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Fragment, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">"utils/axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> ajax(&#123;</span><br><span class="line">        method: <span class="string">"GET"</span>,</span><br><span class="line">        url: <span class="string">"http://hn.algolia.com/api/v1/search"</span>,</span><br><span class="line">        params: query</span><br><span class="line">      &#125;);</span><br><span class="line">      setData(result.data);</span><br><span class="line">    &#125;;</span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;event =&gt; setQuery(event.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;data.hits.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class="line">            &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们可以通过输入框输入内容来手动的控制请求参数了，但是我们发现请求只发生在初始渲染中，我们在输入框修改值的时候，不会发生数据请求，这是因为<code>effect</code>依赖参数的问题，虽然请求参数变了，但是 React 在渲染后不会运行<code>effect</code>，因为依赖项都是<code>[]</code>,我们需要正确的设置依赖项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> ajax(&#123;</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      url: <span class="string">"http://hn.algolia.com/api/v1/search"</span>,</span><br><span class="line">      params: query</span><br><span class="line">    &#125;);</span><br><span class="line">    setData(result.data);</span><br><span class="line">  &#125;;</span><br><span class="line">  fetchData();</span><br><span class="line">&#125;, [query]);</span><br></pre></td></tr></table></figure><p>这样后我们在<code>query</code>改变后，数据就会重新获取，但是这样也有个问题，<code>input</code>的<code>onChage</code>事件，只要输入框内容发生变化，就会发生数据请求。我们需要有个开关来控制请求时机。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Fragment, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">"utils/axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> ajax(&#123;</span><br><span class="line">        method: <span class="string">"GET"</span>,</span><br><span class="line">        url: <span class="string">"http://hn.algolia.com/api/v1/search"</span>,</span><br><span class="line">        params: search</span><br><span class="line">      &#125;);</span><br><span class="line">      setData(result.data);</span><br><span class="line">    &#125;;</span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, [search]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;event =&gt; setQuery(event.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setSearch(query)&#125;&gt;search&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &#123;data.hits.map(item =&gt; (</span></span><br><span class="line"><span class="regexp">          &lt;li key=&#123;item.objectID&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/</span>a&gt;</span><br><span class="line">          &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        ))&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/u</span>l&gt;</span><br><span class="line">    &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这样只有在我们点击按钮后，React 才回去运行<code>effect</code>，请求数据，而在输入框输入的时候，组件虽然渲染了，但是不会运行<code>effect</code></p><h3 id="Loading-状态"><a href="#Loading-状态" class="headerlink" title="Loading 状态"></a>Loading 状态</h3><p>我们在数据请求的过程中加载一个 loading 状态，提高用户体验：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Fragment, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">"utils/axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setLoading] = useState(<span class="literal">false</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      setLoading(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> ajax(&#123;</span><br><span class="line">        method: <span class="string">"GET"</span>,</span><br><span class="line">        url: <span class="string">"http://hn.algolia.com/api/v1/search"</span>,</span><br><span class="line">        params: search</span><br><span class="line">      &#125;);</span><br><span class="line">      setData(result.data);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, [search]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;event =&gt; setQuery(event.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setSearch(query)&#125;&gt;search&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &#123;isLoading ? (</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;Loading ...&lt;/</span>div&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;data.hits.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">            &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class="line">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在当组件处于 <code>mount</code> 状态或者 请求参数 被修改时，调用 <code>effect</code> 获取数据，<code>Loading</code> 状态就会变成 <code>true</code>。一旦请求完成，<code>Loading</code> 状态就会再次被设置为 <code>false</code>。</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>一般我们使用<code>try/catch</code>来捕获请求时的错误，这里我们也增加一个处理错误的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Fragment, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">"utils/axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setLoading] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [isError, setIsError] = useState(<span class="literal">false</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      setIsError(<span class="literal">false</span>);</span><br><span class="line">      setLoading(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ajax(&#123;</span><br><span class="line">          method: <span class="string">"GET"</span>,</span><br><span class="line">          url: <span class="string">"http://hn.algolia.com/api/v1/search"</span>,</span><br><span class="line">          params: search</span><br><span class="line">        &#125;);</span><br><span class="line">        setData(result.data);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        setIsError(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, [search]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;event =&gt; setQuery(event.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setSearch(query)&#125;&gt;search&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &#123;isError &amp;&amp; &lt;div&gt;Something went wrong ...&lt;/</span>div&gt;&#125;</span><br><span class="line"></span><br><span class="line">      &#123;isLoading ? (</span><br><span class="line">        &lt;div&gt;Loading ...&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      ) : (</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &#123;data.hits.map(item =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;li key=&#123;item.objectID&#125;&gt;</span></span><br><span class="line"><span class="regexp">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/</span>a&gt;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          ))&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h3><p>我们可以封装个 Hook, 提取出于数据请求有关的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFecth</span> = (<span class="params">initialData, initialSearch</span>) =&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(initialData);</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useState(initialSearch);</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setLoading] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [isError, setIsError] = useState(<span class="literal">false</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      setIsError(<span class="literal">false</span>);</span><br><span class="line">      setLoading(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ajax(&#123;</span><br><span class="line">          method: <span class="string">"GET"</span>,</span><br><span class="line">          url: <span class="string">"http://hn.algolia.com/api/v1/search"</span>,</span><br><span class="line">          params: search</span><br><span class="line">        &#125;);</span><br><span class="line">        setData(result.data);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        setIsError(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, [search]);</span><br><span class="line">  handleFetch= <span class="function"><span class="params">query</span> =&gt;</span> &#123;</span><br><span class="line">      setSearch(query)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; data, isLoading, isError, handleFetch &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用我们自己封装的 Hook</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Fragment, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">"utils/axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; data, isLoading, isError, handleFetch &#125; = useFetch(</span><br><span class="line">    &#123; <span class="attr">hit</span>: [] &#125;,</span><br><span class="line">    <span class="string">"redux"</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;event =&gt; setQuery(event.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; handleFetch(query)&#125;&gt;search&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &#123;isError &amp;&amp; &lt;div&gt;Something went wrong ...&lt;/</span>div&gt;&#125;</span><br><span class="line"></span><br><span class="line">      &#123;isLoading ? (</span><br><span class="line">        &lt;div&gt;Loading ...&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      ) : (</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &#123;data.hits.map(item =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;li key=&#123;item.objectID&#125;&gt;</span></span><br><span class="line"><span class="regexp">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/</span>a&gt;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          ))&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这种封装，可以让我们数据和表现分离，但是还不彻底，我们可以使用作弊器<code>useReducr</code>。</p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFecth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  <span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    data: &#123; <span class="attr">hit</span>: [] &#125;,</span><br><span class="line">    isLoading: <span class="literal">false</span>,</span><br><span class="line">    isError: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fetchReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"FETCH_INIT"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; ...state, <span class="attr">isLoading</span>: <span class="literal">true</span>, <span class="attr">isError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"FETCH_SUCCESS"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          isLoading: <span class="literal">false</span>,</span><br><span class="line">          isError: <span class="literal">false</span>,</span><br><span class="line">          data: action.payload</span><br><span class="line">        &#125;;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"FETCH_FAILURE"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; ...state, <span class="attr">isError</span>: <span class="literal">true</span>, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useRecuder(fetchReducer, intialState);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      dispatch(&#123; <span class="attr">type</span>: <span class="string">"FETCH_INIT"</span> &#125;);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> axios(url);</span><br><span class="line">        dispatch(&#123; <span class="attr">type</span>: <span class="string">"FETCH_SUCCESS"</span>, <span class="attr">payload</span>: result.data &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        dispatch(&#123; <span class="attr">type</span>: <span class="string">"FETCH_FAILURE"</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, [search]);</span><br><span class="line"></span><br><span class="line">  handleFetch = <span class="function"><span class="params">query</span> =&gt;</span> &#123;</span><br><span class="line">    setSearch(query);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, handleFetch &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useReducer &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">"utils/axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">'redux'</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; isLoading, isError, data, handleFetch &#125; = useFecth();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;event =&gt; setQuery(event.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; handleFetch(query)&#125;&gt;search&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &#123;isError &amp;&amp; &lt;div&gt;Something went wrong ...&lt;/</span>div&gt;&#125;</span><br><span class="line"></span><br><span class="line">      &#123;isLoading ? (</span><br><span class="line">        &lt;div&gt;Loading ...&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      ) : (</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &#123;data.hits.map(item =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;li key=&#123;item.objectID&#125;&gt;</span></span><br><span class="line"><span class="regexp">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/</span>a&gt;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          ))&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="在-Effect-Hook-中中断数据请求"><a href="#在-Effect-Hook-中中断数据请求" class="headerlink" title="在 Effect Hook 中中断数据请求"></a>在 Effect Hook 中中断数据请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFecth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useState(<span class="string">"redux"</span>);</span><br><span class="line">  <span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    data: &#123; <span class="attr">hit</span>: [] &#125;,</span><br><span class="line">    isLoading: <span class="literal">false</span>,</span><br><span class="line">    isError: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fetchReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"FETCH_INIT"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; ...state, <span class="attr">isLoading</span>: <span class="literal">true</span>, <span class="attr">isError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"FETCH_SUCCESS"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          isLoading: <span class="literal">false</span>,</span><br><span class="line">          isError: <span class="literal">false</span>,</span><br><span class="line">          data: action.payload</span><br><span class="line">        &#125;;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"FETCH_FAILURE"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; ...state, <span class="attr">isError</span>: <span class="literal">true</span>, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useRecuder(fetchReducer, intialState);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> didCancel = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      dispatch(&#123; <span class="attr">type</span>: <span class="string">"FETCH_INIT"</span> &#125;);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> axios(url);</span><br><span class="line">        <span class="keyword">if</span> (!didCancel) &#123;</span><br><span class="line">          dispatch(&#123; <span class="attr">type</span>: <span class="string">"FETCH_SUCCESS"</span>, <span class="attr">payload</span>: result.data &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!didCancel) &#123;</span><br><span class="line">          dispatch(&#123; <span class="attr">type</span>: <span class="string">"FETCH_FAILURE"</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> (didCancel = <span class="literal">true</span>);</span><br><span class="line">  &#125;, [search]);</span><br><span class="line"></span><br><span class="line">  handleFetch = <span class="function"><span class="params">query</span> =&gt;</span> &#123;</span><br><span class="line">    setSearch(query);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, handleFetch &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>effect hook</code>都有一个 clean up 函数，它在组件卸载时运行。</p><hr><p><code>didCancel</code>在<code>effect</code>新的渲染完成后，会执行变为<code>true</code>，这个操作是防止异步获取数据的时候，在页面更新后，上一次请求的数据才接到，影响当前页面的显示。</p><blockquote><p>实际上并没有中止数据获取（不过可以通过 Axios 取消来实现），但是不再为卸载的组件执行状态转换</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次介绍了一些&lt;code&gt;effect&lt;/code&gt;的知识，这次我们来实践操作一下，在&lt;code&gt;react-hooks&lt;/code&gt;中改如何正确的请求数据。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
      <category term="effect-hook" scheme="http://www.tiankai.party/tags/effect-hook/"/>
    
  </entry>
  
  <entry>
    <title>effect-hook详解</title>
    <link href="http://www.tiankai.party/posts/63515/"/>
    <id>http://www.tiankai.party/posts/63515/</id>
    <published>2019-03-10T09:23:27.000Z</published>
    <updated>2019-04-25T09:56:24.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前写过一篇关于 react-hook 的文章，但也只是大略的简述了一下<code>useState</code>，这俩天在掘金看到一篇关于<code>effect-hook</code>的觉得很有必要来写写。相比于<code>useState</code>来说<code>useEffect</code>更难理解一些。如果不想看我写的，推荐阅读文末参考链接的文章，写的真好。</p><a id="more"></a><p>可能在你深入了解<code>useEffect</code>之前，觉得自己已经了解了，但是请你考虑一下一下几个问题：</p><ul><li>为什么有时候会取到旧的<code>props</code>和<code>state</code></li><li>如何用<code>useEffect</code>模拟<code>componentDidMount</code></li><li>如何在<code>useEffect</code>中正确的请求数据</li><li>函数可以做<code>useEffect</code>的依赖吗</li><li>为什么会出现无限重复的数据请求</li></ul><h3 id="为什么有时候会取到旧的props和state"><a href="#为什么有时候会取到旧的props和state" class="headerlink" title="为什么有时候会取到旧的props和state"></a>为什么有时候会取到旧的<code>props</code>和<code>state</code></h3><h4 id="每一次渲染都会有它自己的props和state"><a href="#每一次渲染都会有它自己的props和state" class="headerlink" title="每一次渲染都会有它自己的props和state"></a><strong>每一次渲染都会有它自己的<code>props</code>和<code>state</code></strong></h4><p>以组件<code>Counter</code>为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Add&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>代码运行时候，我们点击<code>button</code>相应的<code>count</code>的值也会增加，运行的过程实际上是这样的</p><p>组件第一次渲染的时候，拿到的<code>count</code>初始值是 <code>0</code>，当我们点击<code>button</code>的时候，调用<code>setCount(1)</code>,<code>React</code>再次渲染组件，这一次<code>count</code>是 <code>1</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件第一次渲染</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="number">0</span>; <span class="comment">// 初始的state</span></span><br><span class="line">    ...</span><br><span class="line">    &lt;div&gt;&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    ...</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 点击按钮后</span></span><br><span class="line"><span class="regexp">function Counter()&#123;</span></span><br><span class="line"><span class="regexp">    const count = 1;</span></span><br><span class="line"><span class="regexp">    ...</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&#123;count&#125;&lt;/</span>div&gt;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再次点击后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">    &lt;div&gt;&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    ...</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>当我们更新状态后，<code>React</code>每次渲染都会得到一个独立的<code>count</code>的值，这个状态值是函数中的一个常量。当<code>setCount</code>执行后，又会返回一个新的<code>count</code>值，再次调用组件。然后<code>React</code>更新 DOM 比保持输出和渲染一致。</p><p>这里关键的点在于任意一次渲染中的 <code>count</code> 常量都不会随着时间改变。渲染输出会变是因为我们的组件被一次次调用，而每一次调用引起的渲染中，它包含的 <code>count</code> 值独立于其他渲染。<br>这个理解了的话，那我们来看一下这个例子，会更有助于理解，每次渲染都会有自己<code>props</code>和<code>state</code>这一特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleAlert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> alert(count), <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;&#123;count&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; addCount&lt;/</span>button&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleAlert&#125;&gt;showCount <span class="number">3</span>s later&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照以下步骤操作：</p><ul><li>点击<code>3</code>次<code>addCount</code>按钮，<code>count</code>加到<code>3</code></li><li>点击<code>showCount 3s later</code>按钮</li><li>在计时器结束前，点击俩次<code>addCount</code>按钮，<code>count</code>加到<code>5</code></li></ul><p>你猜最后弹出来的是多少？</p><p>我们来分析一下操作过程，函数执行步骤：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始渲染</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handAlert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> alert(count), <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  &lt;div&gt;&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  ...</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 点击三次按钮</span></span><br><span class="line"><span class="regexp">function showCount() &#123;</span></span><br><span class="line"><span class="regexp">    const count = 1;</span></span><br><span class="line"><span class="regexp">    function handleAlert()&#123;...&#125;</span></span><br><span class="line"><span class="regexp">    ...</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&#123;count&#125;&lt;/</span>div&gt;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleAlert</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">    &lt;div&gt;&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    ...</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">function showCount() &#123;</span></span><br><span class="line"><span class="regexp">    const count = 3;</span></span><br><span class="line"><span class="regexp">    function handleAlert()&#123;...&#125;</span></span><br><span class="line"><span class="regexp">    ...</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&#123;count&#125;&lt;/</span>div&gt;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上每次在渲染的时候都会有一个新的<code>handleAlert</code>函数，也会有他独有的<code>count</code>值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>alert(<span class="number">0</span>), <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>alert(<span class="number">0</span>), <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>alert(<span class="number">1</span>), <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>alert(<span class="number">2</span>), <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>alert(<span class="number">3</span>), <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案显而易见了，最后弹出的<code>count</code>值是<code>3</code>而不是<code>5</code>。</p><h3 id="每次渲染都有它自己的-effects"><a href="#每次渲染都有它自己的-effects" class="headerlink" title="每次渲染都有它自己的 effects"></a>每次渲染都有它自己的 effects</h3><p>接下来正式开始深入<code>useEffect</code>，我们先了解一下执行时间：</p><ul><li><code>effect</code>会在初始渲染和组件每次更新后执行。</li></ul><p>来看一下官网的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You Clicked <span class="subst">$&#123;count&#125;</span> Times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You Clicked &#123;count&#125; Times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click Me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>我们知道每次渲染的过程中<code>count</code>都是特定的独特的常量。事件处理函数看到的是独属于它那次渲染特定的<code>count</code>值，对于<code>effect</code>来说也是如此。并不是<code>count</code>值在不变的<code>effect</code>中发生了改变，而是每次渲染中<code>effect</code>都是不同的。每次渲染中<code>effect</code>都有独属于它那次的<code>count</code>值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">0</span>;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You Clicked <span class="subst">$&#123;<span class="number">0</span>&#125;</span> Times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">1</span>;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You Clicked <span class="subst">$&#123;<span class="number">1</span>&#125;</span> Times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">2</span>;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You Clicked <span class="subst">$&#123;<span class="number">2</span>&#125;</span> Times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>React 会记住你提供的 effect 函数，并且会在每次更改作用于 DOM 并让浏览器绘制屏幕后去调用它。</p></blockquote><hr><p>我觉得有必要来回顾一下操作流程，更方便我们巩固记忆：</p><ul><li><strong>React</strong>: 给我状态为<code>0</code>时的 UI</li><li><strong>你的组件</strong>：<ul><li>给你需要渲染的 UI 组件 <code>&lt;p&gt;You clicked 0 Times&lt;/p&gt;</code></li><li>记得在渲染完后，调用这个<code>effect: () =&gt; {document.title = &#39;You Clicked 0 Times&#39;}</code></li></ul></li><li><strong>React</strong>: 没问题。开始更新 UI，喂浏览器，我要给 DOM 添加一些东西。</li><li><strong>浏览器</strong>：我已经把它绘制到屏幕上了。</li><li><p><strong>React</strong>： 好的， 我现在开始运行给我的 effect</p><ul><li>运行<code>() =&gt; document.title=&#39;You Clicked 0 Times</code></li></ul></li></ul><hr><p>现在我们看一下，在点击后发生了什么：</p><ul><li><strong>你的组件</strong>： 把我的状态更新为<code>1</code></li><li><strong>React</strong>: 给我状态为<code>1</code>时候的 UI</li><li><strong>你的组件</strong>:<ul><li>给你需要渲染的 UI 组件 <code>&lt;p&gt;You clicked 1 Times&lt;/p&gt;</code></li><li>记得在渲染完后，调用这个<code>effect: () =&gt; {document.title = &#39;You Clicked 1 Times&#39;}</code></li></ul></li><li><strong>React</strong>: 没问题。开始更新 UI，喂浏览器，我要修改 DOM。</li><li><strong>浏览器</strong>：我已经把它绘制到屏幕上了。</li><li><strong>React</strong>： 好的， 我现在开始运行给我的 effect<ul><li>运行<code>() =&gt; document.title=&#39;You Clicked 1 Times</code></li></ul></li></ul><hr><h4 id="每一次渲染都会有它自己的所有"><a href="#每一次渲染都会有它自己的所有" class="headerlink" title="每一次渲染都会有它自己的所有"></a><strong>每一次渲染都会有它自己的所有</strong></h4><p>思考如下的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`You Clicked <span class="subst">$&#123;count&#125;</span> Times`</span>), <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + <span class="number">1</span>)&#125;&gt;clicked me&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我点击了多次，那么会输入什么？<br>有个上面的结论，我们会很快说出结果，每次渲染的时候都会有它固定的<code>props/state</code>,每次渲染的<code>effect</code>都是不同的都有属于它那次的<code>count</code>值，那么再控制台的就会输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">You Clicked 0 Times</span><br><span class="line">You Clicked 1 Times</span><br><span class="line">You Clicked 2 Times</span><br><span class="line">You Clicked 3 Times</span><br><span class="line">You Clicked 4 Times</span><br></pre></td></tr></table></figure><p>但是这里如果是<code>class</code>组件中，输出的结果就会不一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`You Clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> Times`</span>), <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>this.state.count</code>会指向最终的值，而不是每次固定的值，控制台输出的结果是输出 4 次同样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You Clicked 4 Times</span><br></pre></td></tr></table></figure><h5 id="这里我们可以得出一个结论"><a href="#这里我们可以得出一个结论" class="headerlink" title="这里我们可以得出一个结论"></a>这里我们可以得出一个结论</h5><blockquote><p>组件内的每一个函数（包括事件处理函数，effects，定时器或者 API 调用等等）会捕获定义它们的那次渲染中的 props 和 state</p></blockquote><h4 id="useRef"><a href="#useRef" class="headerlink" title="useRef()"></a><strong>useRef()</strong></h4><p>如果我们也想要在<code>effect</code>中，也获取到最终的值，那我们可以借助<code>useRef()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> lastCount = useRef(count);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(</span><br><span class="line">      () =&gt; <span class="built_in">console</span>.log(<span class="string">`You Clicked <span class="subst">$&#123;lastCount.current&#125;</span> Times`</span>),</span><br><span class="line">      <span class="number">3000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + <span class="number">1</span>)&#125;&gt;clicked me&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用了<code>useRef(count)</code>获取点击 4 次后最终的状态，控制台输出<code>lastCount.currnt</code> 4 次同样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You Clicked 4 Times</span><br></pre></td></tr></table></figure><h3 id="回收机制"><a href="#回收机制" class="headerlink" title="回收机制"></a>回收机制</h3><p>有些 effects 可能需要有一个清理步骤。本质上，它的目的是消除副作用（effect)，比如取消订阅。<br>那么这个清除步骤是什么时候执行的呢？<br>思考一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>假设,第一次渲染的时候<code>props.id = 10</code>，然后<code>props.id = 20</code>,那么这个清除步骤是在什么时候进行的？<br>你可能会认为是这样的：</p><ul><li>React 执行了<code>props.id = 10</code>的清除</li><li>React 渲染了 <code>props.id = 20</code>的 UI</li><li>React 运行了<code>props.id=20</code>的<code>effect</code></li></ul><p>事实上并非如此： 我们知道<code>effect</code>是在浏览器渲染后执行的，这使得你的应用更流畅因为大多数<code>effects</code>并不会阻塞屏幕的更新。<code>Effect</code>的清除同样被延迟了。上一次的<code>effect</code>会在重新渲染后被清除：</p><ul><li>React 渲染了 <code>props.id = 20</code>的 UI</li><li>React 执行了<code>props.id = 10</code>的清除</li><li>React 运行了<code>props.id=20</code>的<code>effect</code></li></ul><p>至于这里为什么在<code>props.id</code>变为<code>20</code>后，<code>effect</code> 的清除还能取到<code>props.id = 10</code>，这就是上面<strong>结论</strong>说的，组件的<code>effect</code>，会捕获那次渲染中的<code>props</code>和<code>state</code>。只不过是清除被延后了。</p><h3 id="useEffect-的第二个参数"><a href="#useEffect-的第二个参数" class="headerlink" title="useEffect 的第二个参数"></a>useEffect 的第二个参数</h3><p>现在我们大概了解了<code>effect</code>的执行过程，我们也知道<code>effect</code>是在首次渲染和更新后执行的，类似于<code>Class</code>组件的<code>DidMount</code>和<code>DidUpDate</code>,但是有时候也会遇到组件渲染后执行<code>effect</code>，陷入无限循环中，这种情况我们就需要靠<code>useEffect</code>的第二个参数来，告诉 React 什么时候执行<code>effect</code>。<br>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">"Hello,"</span> + name;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      Hello, &#123;name&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + <span class="number">1</span>)&#125;&gt;click me&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Demo</code>组件中，我们并没有用到<code>count</code>状态，但是我们在每次点击按钮后，都会引起页面的渲染，这种渲染就是不必要的浪费的，如果我们要避免这种不必要的浪费，就需要用到<code>useEffect</code>的第二个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">"Hello,"</span> + name;</span><br><span class="line">&#125;, [name]);</span><br></pre></td></tr></table></figure><p>这样，如果当前渲染中，依赖项<code>name</code>并没有变化，那么在这次渲染过后，React 会跳过这次<code>effect</code>。</p><h4 id="设置错误依赖项"><a href="#设置错误依赖项" class="headerlink" title="设置错误依赖项"></a><strong>设置错误依赖项</strong></h4><p>如果我们设置错误了依赖项，React 就不会按我们的期望运行<code>effect</code>，所以这里我们不要对依赖项撒谎。<br>比如这个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'Hello, " + name;</span></span><br><span class="line"><span class="string">&#125;,[])</span></span><br></pre></td></tr></table></figure><p>这样设置的话，那么在<code>name</code>改变后，React 不会运行<code>effect</code>，<code>document.title</code>只会是我初始化渲染时候的状态，这显然不是我们期望的。<br>再来看一个典型的定时器的例子：因为它是定时器，所以我们只想在函数挂载的时候执行一次就行了，那么我们可能会这样写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> setCount(count + <span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(timer);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的本意是让定时器在函数挂载的时候执行一次就行，然后每秒<code>count</code>递增<code>1</code>。事实上是这样运行的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次渲染 会调用 Effect</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">0</span>;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> setCount(<span class="number">0</span> + <span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(timer);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;0&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二次渲染 react 比对了俩次的 依赖 [] === [] 所以不会再调用 effect</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Couonter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;1&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 之后每一秒都会渲染，但是不会调用Effect了</span></span><br></pre></td></tr></table></figure><h4 id="还是那个结论"><a href="#还是那个结论" class="headerlink" title="还是那个结论"></a>还是那个结论</h4><hr><p><strong>组件内的每一个函数（包括事件处理函数，effects，定时器或者 API 调用等等）会捕获定义它们的那次渲染中的 props 和 state</strong></p><hr><p><code>setInterval</code>函数每隔一秒调用的函数都是<code>setCount(0+1)</code>，因为依赖项一样，所以每秒更新都不会再走<code>effect</code></p><h4 id="俩种正确告知依赖的方法"><a href="#俩种正确告知依赖的方法" class="headerlink" title="俩种正确告知依赖的方法"></a>俩种正确告知依赖的方法</h4><p><strong>第一种就是在依赖中包含所有 effect 中用到的组件内的值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> setCount(count + <span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(timer);</span><br><span class="line">&#125;, [count]);</span><br></pre></td></tr></table></figure><p>现在依赖正确了，每次渲染都会运行<code>effect</code>方法，定时器都会获得新的<code>count</code>值，同时每次定时器也会被清除和重新赋值。<br><strong>第二种策略是修改 effect 内部的代码以确保它包含的值只会在需要的时候发生变更，也就是尽量的减少依赖</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(timer);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>我们真正想要的是把<code>count</code>转换为<code>count+1</code>，然后返回给 React,我们其实并不需要<code>setCount(count + 1)</code>，因为 React 已经知道了<code>Count</code>的值，我们只是需要告诉 React，<code>count</code> 要处于递增的状态就行了。<br>这样在执行的时候，因为依赖变回了<code>[]</code>,那么<code>effect</code>只会在开始的时候执行一次，然后定时器这次每次执行的不再是<code>setCount(0 + 1)</code>，而是<code>setCount(c =&gt; c + 1)</code>，你可以认为它是在给 React 发送指令告知如何更新状态。</p><hr><p>思考一下：如果有多个依赖项呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + step), <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(timer);</span><br><span class="line">&#125;, [step]);</span><br></pre></td></tr></table></figure><p>这个例子目前的行为是修改<code>step</code>会重启定时器 - 因为它是依赖项之一。在大多数场景下，这正是你所需要的。清除上一次的<code>effect</code>然后重新运行新的<code>effect</code>并没有任何错。除非我们有很好的理由，我们不应该改变这个默认行为。</p><p>不过，假如我们不想在<code>step</code>改变后重启定时器，我们该如何从<code>effect</code>中移除对<code>step</code>的依赖呢？</p><p><strong>当你想更新一个状态，并且这个状态更新依赖于另一个状态的值时，你可能需要用 <code>useReducer</code> 去替换它们。</strong></p><hr><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer()"></a>useReducer()</h3><p><code>effect</code>如果有多个依赖,而且我们不想他们互相影响，那么我们可以考虑使用作弊器<code>useReducer</code>，用<code>dispatch</code>来当作依赖，上面的代码可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducers, initialState);</span><br><span class="line"><span class="keyword">const</span> &#123; count, step &#125; = state;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">"tick"</span> &#125;);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> clearInterval(timer);</span><br><span class="line">&#125;, [dispatch]);</span><br></pre></td></tr></table></figure><p><strong>React 会保证 dispatch 在组件的声明周期内保持不变。所以上面例子中不再需要重新订阅定时器。</strong><br>相比于直接在 <code>effect</code> 里面读取状态，它 <code>dispatch</code> 了一个 <code>action</code> 来描述发生了什么。这使得我们的 <code>effect</code> 和 <code>step</code> 状态解耦。我们的 <code>effect</code> 不再关心怎么更新状态，它只负责告诉我们发生了什么。更新的逻辑全都交由 <code>reducer</code> 去统一处理:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> intialState = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    step: <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reducers</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count, step &#125; = state;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"tick"</span>:</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">count</span>: count + <span class="number">1</span>, step &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"step"</span>:</span><br><span class="line">          <span class="keyword">return</span> &#123; count, <span class="attr">step</span>: action.step &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">return</span> &#123; count, step &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducers, intialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; count, step &#125; = state;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">"tick"</span> &#125;), <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(timer);</span><br><span class="line">  &#125;, [dispatch]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Count: &#123;count&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;Step: &#123;step&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"number"</span></span><br><span class="line">        value=&#123;step&#125;</span><br><span class="line">        onChange=&#123;e =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">"step"</span>, <span class="attr">step</span>: <span class="built_in">Number</span>(e.target.value) &#125;)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback()"></a>useCallback()</h3><p>函数也可以作为<code>effect</code>的依赖项，这也是<code>useCallback()</code>的功能。<br>想像一下下面这个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"react"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFetchUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"https://hn.algolia.com/api/v1/search?query="</span> + query;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> axios(getFetchUrl());</span><br><span class="line">    setData(result.data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码，在初始渲染的时候是可以执行的，但是如果我们改变了<code>query</code>的值，那么因为<code>effect</code>的依赖项是<code>[]</code>所以<code>React</code>不会运行<code>effect</code>，这样的结果显然不是我们想要的，我们也可以考虑一个简单的解决办法，如果<code>getFetchUrl</code>函数只在<code>effect</code>中使用了那我们可以把它写在<code>effect</code>里面.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"react"</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getFetchUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"https://hn.algolia.com/api/v1/search?query="</span> + query;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> axios(getFetchUrl());</span><br><span class="line">      setData(result.data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, [query]); <span class="comment">// 依赖记得加上</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样那我们在<code>query</code>变化的时候，<code>React</code>会运行<code>effect</code>，这个时候我们的方案是可行的。但是如果组件内有几个<code>effect</code>使用了相同的函数，你不想在每个 <code>effect</code> 里复制黏贴一遍这个逻辑。也或许这个函数是一个 <code>prop</code>。</p><p>在这种情况下你应该忽略对函数的依赖吗？我不这么认为。再次强调，<strong><code>efffects</code> 不应该对它的依赖撒谎。</strong>通常我们还有更好的解决办法。一个常见的误解是，“函数从来不会改变”。但是这篇文章你读到现在，你知道这显然不是事实。实际上，<strong>在组件内定义的函数每一次渲染都在变。</strong></p><p><strong>函数每次渲染都会改变这个事实本身就是个问题</strong>。这就需要我们的<code>useCallback</code>了，一起来看一下例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"react"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getFetchUrl = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"https://hn.algolia.com/api/v1/search?query="</span> + query;</span><br><span class="line">  &#125;, [query]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> axios(url);</span><br><span class="line">    setData(result.data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl();</span><br><span class="line">    fetchData(url);</span><br><span class="line">  &#125;, [getFetchUrl]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把 <code>query</code> 添加到 <code>useCallback</code> 的依赖中，任何调用了 <code>getFetchUrl</code> 的 <code>effect</code> 在 <code>query</code> 改变后都会重新运行,如果<code>query</code> 保持不变，<code>getFetchUrl</code>也会保持不变，我们的<code>effect</code>也不会重新运行。但是如果<code>query</code>修改了，<code>getFetchUrl</code>也会随之改变，因此会重新请求数据。</p><hr><p><code>useCallback</code>本质上是添加了一层依赖检查。它以另一种方式解决了问题 - <strong>我们使函数本身只在需要的时候才改变，而不是去掉对函数的依赖。</strong></p><hr><p>对于通过属性从父组件传入的函数这个方法也适用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">"react"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchData = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">"https://hn.algolia.com/api/v1/search?query="</span> + query;</span><br><span class="line">  &#125;, [query]);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">fetchData</span>=<span class="string">&#123;fetchData&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">function Child(&#123; fetchData &#125;) &#123;</span></span><br><span class="line"><span class="xml">  let [data, setData] = useState(null);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="xml">    fetchData().then(setData);</span></span><br><span class="line"><span class="xml">  &#125;, [fetchData]);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  // ...</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>只有在父组件的<code>query</code>变化后<code>Child</code>才会去请求数据。</p><hr><p>现在我们再来看看文章开头提出的几个问题，是不是都有答案了：</p><ul><li>为什么有时候会取到旧的 <code>props</code> 和 <code>state</code><ul><li>组件内的每一个函数（包括事件处理函数，effects，定时器或者 API 调用等等）会捕获定义它们的那次渲染中的 props 和 state。</li></ul></li><li>如何用<code>useEffect</code>模拟<code>componentDidMount</code><ul><li>可以把<code>effect</code>的依赖项设置为<code>[]</code>，那么组件只会在初始渲染的时候运行<code>effect</code>,之后每次渲染，因为依赖项一样所以都不会再运行<code>effect</code></li></ul></li><li>如何在<code>useEffect</code>中正确的请求数据</li><li>函数可以做<code>useEffect</code>的依赖吗<ul><li><code>effect</code>的依赖项设置正确，不要对 React 撒谎，如果函数只在<code>effect</code>中用到那么把函数直接写到<code>effect</code>中，当然要注意设置好依赖项，或者可以使用<code>useCallback</code>封装请求函数，把函数设置成<code>effect</code>依赖</li></ul></li><li><p>为什么会出现无限重复的数据请求</p><ul><li>依赖项设置错误</li></ul></li></ul><blockquote><p>参考链接</p></blockquote><p><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">useEffect 完整指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一篇关于 react-hook 的文章，但也只是大略的简述了一下&lt;code&gt;useState&lt;/code&gt;，这俩天在掘金看到一篇关于&lt;code&gt;effect-hook&lt;/code&gt;的觉得很有必要来写写。相比于&lt;code&gt;useState&lt;/code&gt;来说&lt;code&gt;useEffect&lt;/code&gt;更难理解一些。如果不想看我写的，推荐阅读文末参考链接的文章，写的真好。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
      <category term="effect-hook" scheme="http://www.tiankai.party/tags/effect-hook/"/>
    
  </entry>
  
  <entry>
    <title>ios-h5页面焦点错位问题</title>
    <link href="http://www.tiankai.party/posts/22361/"/>
    <id>http://www.tiankai.party/posts/22361/</id>
    <published>2019-02-21T09:37:32.000Z</published>
    <updated>2019-04-25T09:56:05.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前几天同事遇到一个 bug,解决完觉得挺有意思，移动端 h5 页面弹出层上有几个 input 输入框，点击输入的时候键盘出来后，弹出框会被顶上去，然后点击别处键盘收起，弹出框回到原来的位置，这时候再次点击输入框输入的时候，android 上是正常的，ios 的就会出现卡的假象，点击输入框的时候一直没反应，其实是焦点依然停留在了键盘弹出后顶起的位置，这就是 ios-h5 页面焦点错位现象。</p><a id="more"></a><p>这里没有截图我大概画了几张图片：<br><img src="/../images/ios-h5-fouce.png" alt="ios-h5-focus焦点错位"><br>解决方法： 既然焦点还停留在原来的位置，那么我们判断一下如果用户是在第一个输入框输入完，点击别处收起键盘的时候，我们把页面滚动会原来的位置，焦点归位就行了，如果用户是在第一个输入框输入完继续下一个输入框输入的时候我们就不需要进行滚动。<br>这里再插入一张图解释一下为什么是<code>scrollTo(0,0)</code><br><img src="/../images/ios-h5-scroll.png" alt="ios-h5-scroll滚动页面焦点归位"><br>思路就是这样，具体代码可以参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isScroll = <span class="literal">false</span>,</span><br><span class="line">  timer = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> focusEvent = <span class="function"><span class="params">e</span> =&gt;</span> (isScroll = <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">let</span> blurEvent = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  isScroll = <span class="literal">true</span>;</span><br><span class="line">  clerTimeout(timer);</span><br><span class="line">  timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isScroll) &#123;</span><br><span class="line">      Window.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天同事遇到一个 bug,解决完觉得挺有意思，移动端 h5 页面弹出层上有几个 input 输入框，点击输入的时候键盘出来后，弹出框会被顶上去，然后点击别处键盘收起，弹出框回到原来的位置，这时候再次点击输入框输入的时候，android 上是正常的，ios 的就会出现卡的假象，点击输入框的时候一直没反应，其实是焦点依然停留在了键盘弹出后顶起的位置，这就是 ios-h5 页面焦点错位现象。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="http://www.tiankai.party/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://www.tiankai.party/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>手动安装AndroidStudio</title>
    <link href="http://www.tiankai.party/posts/61926/"/>
    <id>http://www.tiankai.party/posts/61926/</id>
    <published>2019-02-18T06:32:52.000Z</published>
    <updated>2019-04-25T09:54:42.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为不知名的原因会导致我们在安装<code>Android Studio</code>的时候，下载文件特别慢，我们可以在它下载过程中，获取到它的下载链接，然后用迅雷下载速度会快很多，所以这里写了手动安装<code>Android Studio</code>的过程,部分过程可能会有差异，需要灵活运用，时时关注<code>Android Studio</code>在下载过程中的日志进行调整。</p><a id="more"></a><h3 id="手动安装-Android-Studio"><a href="#手动安装-Android-Studio" class="headerlink" title="手动安装 Android Studio"></a>手动安装 Android Studio</h3><p>手动通过迅雷下载如下安装包：</p><p><a href="https://dl.google.com/android/repository/platform-tools_r28.0.0-windows.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools_r28.0.0-windows.zip</a></p><p><a href="https://dl.google.com/android/repository/platform-28_r04.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-28_r04.zip</a></p><p><a href="https://dl.google.com/android/repository/build-tools_r28.0.1-windows.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/build-tools_r28.0.1-windows.zip</a></p><p><a href="https://dl.google.com/android/repository/google_m2repository_gms_v11_3_rc05_wear_2_0_5.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/google_m2repository_gms_v11_3_rc05_wear_2_0_5.zip</a></p><p><a href="https://dl.google.com/android/repository/emulator-windows-4848055.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/emulator-windows-4848055.zip</a></p><p><a href="https://dl.google.com/android/repository/3534162-studio.sdk-patcher.zip.bak" target="_blank" rel="noopener">https://dl.google.com/android/repository/3534162-studio.sdk-patcher.zip.bak</a></p><p><a href="https://dl.google.com/android/repository/sdk-tools-windows-4333796.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/sdk-tools-windows-4333796.zip</a></p><p><a href="https://dl.google.com/android/repository/android_m2repository_r47.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/android_m2repository_r47.zip</a></p><p><a href="https://dl.google.com/android/repository/sources-28_r01.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/sources-28_r01.zip</a></p><p><a href="https://dl.google.com/android/repository/extras/intel/haxm-windows_v7_3_2.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/extras/intel/haxm-windows_v7_3_2.zip</a></p><p><a href="https://dl.google.com/android/repository/sys-img/google_apis/x86-28_r08.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/sys-img/google_apis/x86-28_r08.zip</a></p><p>下载完成后逐个解压缩放入 SDK 目录，如下：</p><p>1、创建 <code>SDK</code> 目录，并 copy 上述文件到 <code>SDK</code> 目录</p><p>2、<code>platform-tools_r28.0.0-windows.zip</code> 直接接受压缩到本地目录：<code>SDK\platform-tools</code></p><p>3、<code>platform-28_r04.zip</code> 解压缩后得到 <code>android-9</code> 文件夹，把 <code>android-9</code> 修改为 <code>android-28</code>，放到本地目录：<code>SDK\platforms\android-28</code></p><p>4、<code>build-tools_r28.0.1-windows.zip</code> 解压缩后得到 <code>android-9</code> 文件夹，把 <code>android-9</code> 修改为 <code>28.0.1</code>，放到本地目录：<code>SDK\build-tools\28.0.1</code></p><p>5、<code>google_m2repository_gms_v11_3_rc05_wear_2_0_5.zip</code> 解压缩后得到 <code>m2repository</code> 文件夹，放到本地目录：<code>SDK\extras\google\m2repository</code></p><p>6、<code>emulator-windows-4848055.zip</code> 解压缩后得到 <code>emulator</code> 文件夹，放到本地目录：<code>SDK\emulator</code></p><p>7、<code>3534162-studio.sdk-patcher.zip.bak</code> 修改名称为 <code>3534162-studio.sdk-patcher.zip</code>，解压缩后得到 <code>sdk-patcher</code>，修改名称为 <code>patcher</code> 放到本地目录：<code>SDK\patcher\v4</code></p><p>8、<code>sdk-tools-windows-4333796.zip</code> 解压缩后得到 <code>tools</code> 文件夹，放到本地目录：<code>SDK\tools</code></p><p>9、<code>android_m2repository_r47.zip</code> 解压缩后得到 <code>m2repository</code>，放到本地目录：<code>SDK\extras\android\m2repository</code></p><p>10、 <code>sources-28_r01.zip</code> 解压缩后得到 <code>src</code> 文件夹重命名为 <code>android-28</code>，放到本地目录 <code>SDK\sources\android-28</code></p><p>11、<code>haxm-windows_v7_3_2.zip</code> 解压到本地目录 <code>SDK\extras\intel\Hardware_Accelerated_Execution_Manager</code>,没有的目录新建目录</p><p>12、<code>google_apis/x86-28_r08.zip</code> 解压放到本地目录 <code>SDK\system-images\android-28\google_apis\x86</code></p><p>上述完成后重新启动 <code>Android Studio</code>，创建项目时选择 <code>sdk</code> 指定到本地 <code>SDK</code> 目录。<code>Android Studio</code> 检查 <code>SDK</code> 目录的文件并显示成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为不知名的原因会导致我们在安装&lt;code&gt;Android Studio&lt;/code&gt;的时候，下载文件特别慢，我们可以在它下载过程中，获取到它的下载链接，然后用迅雷下载速度会快很多，所以这里写了手动安装&lt;code&gt;Android Studio&lt;/code&gt;的过程,部分过程可能会有差异，需要灵活运用，时时关注&lt;code&gt;Android Studio&lt;/code&gt;在下载过程中的日志进行调整。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.tiankai.party/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="android-studio" scheme="http://www.tiankai.party/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>记一次项目上线遇到的坑</title>
    <link href="http://www.tiankai.party/posts/51347/"/>
    <id>http://www.tiankai.party/posts/51347/</id>
    <published>2019-02-14T07:37:29.000Z</published>
    <updated>2019-04-25T09:54:10.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>其实这篇文章是四月份写的二三月份过的有点颓废，没有好好的学习，心里订下每个月最少一篇博客的，只能是后期慢慢的补充了，近期用<code>umi</code>框架搭建了一个项目，在本地一切正常，然后到上线那天项目就是跑不起来。。。关键自己还不在，总之各种问题出现，生产上线的经验还是太少，以后在遇到项目上线的时候务必到场。话不多说，进入正题。</p><a id="more"></a><p>这次项目出现了俩个问题，一个是浏览器版本的问题，生产上采用的老古董的谷歌浏览器，然后项目上线的时候老是报错，这个暂且不说，重点说一下第二个问题<code>publicPath</code>的问题。</p><h3 id="webpack-publicPath"><a href="#webpack-publicPath" class="headerlink" title="webpack-publicPath"></a>webpack-publicPath</h3><p>先介绍一下 <code>webpack.output.publicPath</code>,一般的配置我们都是这样的</p><figure class="highlight javascript"><figcaption><span>webpack.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./build'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们打包后的文件就会输出到 <code>build</code> 文件夹中，比如：<code>build/index.js</code>;而<code>publicPath</code>的作用就是处理文件打包后引用的问题，<br>不加 <code>publicPath</code></p><figure class="highlight css"><figcaption><span>index.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"img/bg.jpg"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>publicPath</code>为 <code>/asset/</code></p><figure class="highlight css"><figcaption><span>index.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"/asset/img/bg.jpg"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="publicPath-CDN"><a href="#publicPath-CDN" class="headerlink" title="publicPath - CDN"></a>publicPath - CDN</h3><p>对<code>publicPath</code>有个基础的理解后，来看看我遇到的问题</p><p>后端使用的<code>springBoot</code>框架架构，前端打包出来的文件直接扔到了 <code>/static/</code> 文件夹下，第一次在本地测试的时候图片显示不出来，然后我是这样配置的<code>publicPath</code></p><figure class="highlight javascript"><figcaption><span>.umirc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> defalut &#123;</span><br><span class="line">    publicPath: <span class="string">'/static/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我现在的项目不是在根目录放的，而是整体放到了后端项目的<code>/static/</code>文件下，<code>publicPath</code>设置成<code>/static/</code>找不到<code>css/js</code>,设置成根路径，找不到图片，所以我直接把<code>publicPath</code>设置成了完整的 <code>http</code>地址，然后就可以了。</p><figure class="highlight javascript"><figcaption><span>.umirc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  publicPath: <span class="string">"http://192.168.0.0:8100/market/v1/static/"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个类似于把自己项目部署到了 <code>CDN</code> 目录下，然后打包出来的<code>css/js/img</code>在路径前面都会加上完整的路径访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这篇文章是四月份写的二三月份过的有点颓废，没有好好的学习，心里订下每个月最少一篇博客的，只能是后期慢慢的补充了，近期用&lt;code&gt;umi&lt;/code&gt;框架搭建了一个项目，在本地一切正常，然后到上线那天项目就是跑不起来。。。关键自己还不在，总之各种问题出现，生产上线的经验还是太少，以后在遇到项目上线的时候务必到场。话不多说，进入正题。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="webpack" scheme="http://www.tiankai.party/tags/webpack/"/>
    
      <category term="publicPath" scheme="http://www.tiankai.party/tags/publicPath/"/>
    
  </entry>
  
  <entry>
    <title>前端导出Excel文件</title>
    <link href="http://www.tiankai.party/posts/4824/"/>
    <id>http://www.tiankai.party/posts/4824/</id>
    <published>2019-01-30T06:53:30.000Z</published>
    <updated>2019-04-25T09:53:42.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在做项目的过程中遇到一个需求，需要把前端页面的表格导出到本地生成<code>Excel</code>文件，一直以为需要靠后端的协助，后来发现了一个非常棒的工具库<code>js-xlsx</code>，可以在不依靠后端的情况下，前端自己来生成<code>Excel</code>文件，后端只要返回前端表格需要的数据就可以，不需要在进行一次请求，在这里记录一下这个库的使用过程。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xlsx</span><br></pre></td></tr></table></figure><p><code>js-xlsx</code>库很强大，既能导出 EXCEL 文件，也可以将数据导出为 EXCEL，就是官方文档不太友好，这里推荐阅读文末的参考链接</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlsx <span class="keyword">from</span> <span class="string">"xlsx"</span>;</span><br></pre></td></tr></table></figure><h4 id="xlsx-utils"><a href="#xlsx-utils" class="headerlink" title="xlsx.utils"></a>xlsx.utils</h4><p><code>xlsx.utils</code>提供的工具函数</p><ul><li><code>json_to_sheet</code>: 把一个 JSON 数据转换为<code>sheet</code>数据</li><li><code>table_to_sheet</code>: 把表格 DOM 元素转换成可导出的<code>sheet</code>数据</li><li><code>aoa_to_sheet</code>: 这个工具类最强大也最实用了，将一个二维数组转成 <code>sheet</code>，会自动处理 <code>number</code>、<code>string</code>、<code>boolean</code>、<code>date</code> 等类型数据；</li><li><code>sheet_add_aoa</code>: 将一个二维数组添加到已经存在的工作表中</li><li><code>sheet_add_json</code>: 将 JSON 数据添加到已经存在的工作表中</li></ul><p>后俩种很少用到，本文的实例中使用的是<code>json_to_sheet</code>，同样的还有将表格文件导出为数据的，<code>sheet_to_json</code>/<code>sheet_to_csv</code>/<code>sheet_to_txt</code>/<code>sheet_to_html</code>/<code>sheet_to_formulae</code>这些见名知意，就不详细的描述了</p><h4 id="xlsx-read-读取表格"><a href="#xlsx-read-读取表格" class="headerlink" title="xlsx.read 读取表格"></a><code>xlsx.read</code> 读取表格</h4><p><code>xlsx.read(data,{type:type})</code>,返回一个叫 WorkBook 的对象，type 主要取值如下：</p><blockquote><ul><li><code>base64</code>: 以 base64 方式读取</li><li><code>binary</code>: BinaryString 格式(byte n is data.charCodeAt(n))</li><li><code>string</code>: UTF8 编码的字符串</li><li><code>buffer</code>: nodejs Buffer</li><li><code>array</code>: Uint8Array，8 位无符号数组</li><li><code>file</code>: 文件的路径（仅 nodejs 下支持）；</li></ul></blockquote><h4 id="WorkBook对象"><a href="#WorkBook对象" class="headerlink" title="WorkBook对象"></a><code>WorkBook</code>对象</h4><p>返回的 workBook 对象我们只需关注俩个重要的属性<code>SheetName</code>和<code>Sheets</code></p><ul><li><code>SheetName</code> 里存放的是表格的名字，例如：sheet1,sheet2</li><li><code>Sheets</code> 数组存放的是对应 <code>SheetName</code> 中每个表格的数据，也就是我们要获取的表格数据,表格数据的具体表现形式请参考文末的参考链接，这里就不赘述了，因为工具库<code>xlsx.utils</code>已经给我们封装好了处理函数，获取到表格数据后我们就可以转换为我们需要的数据形式，比如<code>sheet_to_json</code>,直接就可以获得我们需要的 JSON 数据</li></ul><h4 id="xlsx-write-导出表格"><a href="#xlsx-write-导出表格" class="headerlink" title="xlsx.write 导出表格"></a><code>xlsx.write</code> 导出表格</h4><p>这里是本文的重点,划重点—使用<code>json_to_sheet</code>将后端返回的 JSON 数据转换成我们需要的表格数据，然后生成<code>Blob</code>格式的文件，下载，实现导出表格数据功能。</p><p>封装了一个工具函数</p><figure class="highlight javascript"><figcaption><span>src/utils/exportExcel.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlsx <span class="keyword">from</span> <span class="string">"xlsx"</span>;</span><br><span class="line"><span class="keyword">const</span> jsonToSheet = xlsx.utils.json_to_sheet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">exportExcel</span>(<span class="params">sheetData, saveName, sheetName = <span class="string">"sheet1"</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sheet = jsonToSheet(sheetData, &#123;</span><br><span class="line">    skipHeader: <span class="literal">true</span> <span class="comment">//忽略第一行，表格导出的时候不会显示第一行的数据</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//可以在这里处理单元格合并</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    sheet['!merge'] = [</span></span><br><span class="line"><span class="comment">        // 设置A1-C1的单元格合并</span></span><br><span class="line"><span class="comment">        // s表示开始， e表示结束</span></span><br><span class="line"><span class="comment">        // r表示行， c表示列</span></span><br><span class="line"><span class="comment">        &#123;s: &#123;r: 0, c: 0&#125;, e: &#123;r: 0, c: 2&#125;&#125;</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">let</span> workbook = &#123;</span><br><span class="line">    SheetNames: [sheetName], <span class="comment">//表格的名字</span></span><br><span class="line">    Sheets: &#123;&#125; <span class="comment">//表格数据</span></span><br><span class="line">  &#125;;</span><br><span class="line">  workbook.Sheets[sheetName] = sheet;</span><br><span class="line">  <span class="comment">//第一种方法：</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  // 生成excel的配置项</span></span><br><span class="line"><span class="comment">  let wopts = &#123;</span></span><br><span class="line"><span class="comment">    bookType: 'xlsx', // 要生成的文件类型</span></span><br><span class="line"><span class="comment">    bookSST: false, // 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性</span></span><br><span class="line"><span class="comment">    type: 'binary',</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment">  let wbout = xlsx.write(workbook, wopts);</span></span><br><span class="line"><span class="comment">  let blob = new Blob([s2ab(wbout)], &#123; type: 'application/octet-stream' &#125;);</span></span><br><span class="line"><span class="comment">  // 字符串转ArrayBuffer</span></span><br><span class="line"><span class="comment">  function s2ab(s) &#123;</span></span><br><span class="line"><span class="comment">    let buf = new ArrayBuffer(s.length);</span></span><br><span class="line"><span class="comment">    let view = new Uint8Array(buf);</span></span><br><span class="line"><span class="comment">    for (let i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) &amp; 0xff;</span></span><br><span class="line"><span class="comment">    return buf;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="comment">//第二种方法：</span></span><br><span class="line">  <span class="comment">// 生成excel的配置项</span></span><br><span class="line">  <span class="keyword">let</span> wopts = &#123;</span><br><span class="line">    bookType: <span class="string">"xlsx"</span>, <span class="comment">// 要生成的文件类型</span></span><br><span class="line">    bookSST: <span class="literal">false</span>, <span class="comment">// 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性</span></span><br><span class="line">    type: <span class="string">"array"</span> <span class="comment">// 返回一个ArrayBuffer</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> wbout = xlsx.write(workbook, wopts);</span><br><span class="line">  <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([wbout], &#123;</span><br><span class="line">    type: <span class="string">"text/plain"</span> <span class="comment">//创建一个装填ArrayBuffer对象的Blob对象</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//第二种方法比较方便，直接创建一个ArrayBuffer的Blob对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> blob == <span class="string">"object"</span> &amp;&amp; blob <span class="keyword">instanceof</span> Blob) &#123;</span><br><span class="line">    blob = URL.createObjectURL(blob); <span class="comment">// 创建blob地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">  aLink.href = blob;</span><br><span class="line">  <span class="comment">// HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效</span></span><br><span class="line">  aLink.download = saveName || <span class="string">"导出.xlsx"</span>;</span><br><span class="line">  <span class="comment">//可以在这里给aLink增加点击事件</span></span><br><span class="line">  <span class="comment">/* aLink.click(); */</span></span><br><span class="line">  <span class="keyword">let</span> event;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.MouseEvent) &#123;</span><br><span class="line">    event = <span class="keyword">new</span> MouseEvent(<span class="string">"click"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    event = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>);</span><br><span class="line">    event.initMouseEvent(</span><br><span class="line">      <span class="string">"click"</span>,</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="built_in">window</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//自定义事件的触发dispatchEvent</span></span><br><span class="line">  <span class="comment">//也可以直接给aLink添加点击事件</span></span><br><span class="line">  aLink.dispatchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用封装的工具函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">exportSheet = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    speedMarket: &#123; archiveDetail &#125;</span><br><span class="line">  &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  <span class="keyword">let</span> sheetData = [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="string">"序号"</span>,</span><br><span class="line">      cust_name: <span class="string">"客户姓名"</span>,</span><br><span class="line">      certificate_type: <span class="string">"证件类型"</span>,</span><br><span class="line">      certificate_no: <span class="string">"证件号码"</span>,</span><br><span class="line">      cust_sex: <span class="string">"性别"</span>,</span><br><span class="line">      credit_no: <span class="string">"卡号"</span>,</span><br><span class="line">      teller_no: <span class="string">"柜员号"</span>,</span><br><span class="line">      teller_name: <span class="string">"柜员姓名"</span>,</span><br><span class="line">      ab_user: <span class="string">"客户经理号"</span>,</span><br><span class="line">      ab_name: <span class="string">"客户经理姓名"</span>,</span><br><span class="line">      card_status: <span class="string">"卡片状态"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...archiveDetail.map(<span class="function">(<span class="params">val, idx</span>) =&gt;</span> &#123;</span><br><span class="line">      val.id = idx + <span class="number">1</span>; <span class="comment">//原始数据中增加序号一列</span></span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;)</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">await</span> exportExcel(sheetData, <span class="string">"快速营销-绩效详情表.xlsx"</span>);</span><br><span class="line">  message.info(<span class="string">"导出成功"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p></blockquote><ul><li><a href="https://github.com/SheetJS/js-xlsx" target="_blank" rel="noopener">js-xlsx</a></li><li><a href="https://www.cnblogs.com/liuxianan/p/js-excel.html#%E5%AF%BC%E5%87%BAexcel" target="_blank" rel="noopener">如何使用 JavaScript 实现纯前端读取和导出 excel 文件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做项目的过程中遇到一个需求，需要把前端页面的表格导出到本地生成&lt;code&gt;Excel&lt;/code&gt;文件，一直以为需要靠后端的协助，后来发现了一个非常棒的工具库&lt;code&gt;js-xlsx&lt;/code&gt;，可以在不依靠后端的情况下，前端自己来生成&lt;code&gt;Excel&lt;/code&gt;文件，后端只要返回前端表格需要的数据就可以，不需要在进行一次请求，在这里记录一下这个库的使用过程。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="xlsx" scheme="http://www.tiankai.party/tags/xlsx/"/>
    
  </entry>
  
  <entry>
    <title>axios封装笔记</title>
    <link href="http://www.tiankai.party/posts/48591/"/>
    <id>http://www.tiankai.party/posts/48591/</id>
    <published>2019-01-30T06:50:37.000Z</published>
    <updated>2019-04-01T09:33:10.004Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在写 react-redux-app 脚手架的时候就已经封装好了，一直没记录，后来在使用过程中又参考了<code>antd-design-pro</code>的报错机制，重新封装了一下，这里记录一下封装的代码，以免遗失</p><a id="more"></a><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  功能：封装 axios</span></span><br><span class="line"><span class="comment"> *  create by tiankai on 05/16/18 17:15:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; stringify &#125; <span class="keyword">from</span> <span class="string">"qs"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">"src/defaultSettings"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getWeekLocalStorage &#125; <span class="keyword">from</span> <span class="string">"./storage"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> codeMessage = &#123;</span><br><span class="line">  <span class="number">200</span>: <span class="string">"服务器成功返回请求的数据。"</span>,</span><br><span class="line">  <span class="number">201</span>: <span class="string">"新建或修改数据成功。"</span>,</span><br><span class="line">  <span class="number">202</span>: <span class="string">"一个请求已经进入后台排队（异步任务）。"</span>,</span><br><span class="line">  <span class="number">204</span>: <span class="string">"删除数据成功。"</span>,</span><br><span class="line">  <span class="number">400</span>: <span class="string">"发出的请求有错误，服务器没有进行新建或修改数据的操作。"</span>,</span><br><span class="line">  <span class="number">401</span>: <span class="string">"用户没有权限（令牌、用户名、密码错误）。"</span>,</span><br><span class="line">  <span class="number">403</span>: <span class="string">"用户得到授权，但是访问是被禁止的。"</span>,</span><br><span class="line">  <span class="number">404</span>: <span class="string">"发出的请求针对的是不存在的记录，服务器没有进行操作。"</span>,</span><br><span class="line">  <span class="number">406</span>: <span class="string">"请求的格式不可得。"</span>,</span><br><span class="line">  <span class="number">410</span>: <span class="string">"请求的资源被永久删除，且不会再得到的。"</span>,</span><br><span class="line">  <span class="number">422</span>: <span class="string">"当创建一个对象时，发生一个验证错误。"</span>,</span><br><span class="line">  <span class="number">500</span>: <span class="string">"服务器发生错误，请检查服务器。"</span>,</span><br><span class="line">  <span class="number">502</span>: <span class="string">"网关错误。"</span>,</span><br><span class="line">  <span class="number">503</span>: <span class="string">"服务不可用，服务器暂时过载或维护。"</span>,</span><br><span class="line">  <span class="number">504</span>: <span class="string">"网关超时。"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!response) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"response is undefined"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (response.status &gt;= <span class="number">200</span> &amp;&amp; response.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> errorText = codeMessage[response.status] || response.statusText;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(errorText);</span><br><span class="line">  error.name = response.status;</span><br><span class="line">  error.response = response;</span><br><span class="line">  error.text = errorText;</span><br><span class="line">  <span class="keyword">throw</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">//`baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: api,</span><br><span class="line">  <span class="comment">// 在请求发送前，可以根据实际要求，是否要对请求的数据进行转换</span></span><br><span class="line">  <span class="comment">// 仅应用于 post、put、patch 请求</span></span><br><span class="line">  transformRequest: [</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line">      <span class="comment">// console.log(headers);</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="comment">// it is passed to then/catch</span></span><br><span class="line">  transformResponse: [</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求头信息</span></span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="comment">// 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8;',</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 设置超时时间</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  <span class="comment">// 携带凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="comment">// 可以在这里做一些事情在请求发送前</span></span><br><span class="line">    <span class="comment">// config.headers['TOKEN']=''// 在这里设置请求头与携带token信息;</span></span><br><span class="line">    <span class="keyword">const</span> token = getWeekLocalStorage(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.headers[<span class="string">"AUTHORIZATION"</span>] = token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">"post"</span> || config.method === <span class="string">"put"</span>) &#123;</span><br><span class="line">      config.headers[<span class="string">"Content-Type"</span>] = <span class="string">"application/json;charset=UTF-8"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">"get"</span>) &#123;</span><br><span class="line">      config.data = stringify(config.data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something whit request error</span></span><br><span class="line">    <span class="comment">// 请求失败可以做一些事情</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="comment">// 在这里你可以判断后台返回数据携带的请求码</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something whit response error</span></span><br><span class="line">    <span class="comment">// 根据 错误码返回信息</span></span><br><span class="line">    <span class="keyword">return</span> checkStatus(error.response);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* method GET/POST/PUT</span></span><br><span class="line"><span class="comment"> * url</span></span><br><span class="line"><span class="comment"> * params/data</span></span><br><span class="line"><span class="comment"> * headers &#123; 'content-type': 'application/x-www-form-urlencoded'&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> ajax = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance(options)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(response);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.dir(error);</span><br><span class="line">        Modal.error(&#123;</span><br><span class="line">          title: <span class="string">"请求错误"</span>,</span><br><span class="line">          content: error.message</span><br><span class="line">        &#125;);</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ajax;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">"src/utils/axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取客户营销报表</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchClientMarket</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ajax(&#123;</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    url: <span class="string">`/report/clientMarket/clientMarketStatistics`</span>,</span><br><span class="line">    params: payload</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /report/login 平台登录接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ajax(&#123;</span><br><span class="line">    method: <span class="string">"POST"</span>,</span><br><span class="line">    url: <span class="string">"/report/login"</span>,</span><br><span class="line">    data: payload</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写 react-redux-app 脚手架的时候就已经封装好了，一直没记录，后来在使用过程中又参考了&lt;code&gt;antd-design-pro&lt;/code&gt;的报错机制，重新封装了一下，这里记录一下封装的代码，以免遗失&lt;/p&gt;
    
    </summary>
    
    
      <category term="axios,http" scheme="http://www.tiankai.party/tags/axios-http/"/>
    
  </entry>
  
  <entry>
    <title>react-hooks使用体验</title>
    <link href="http://www.tiankai.party/posts/56237/"/>
    <id>http://www.tiankai.party/posts/56237/</id>
    <published>2019-01-30T06:48:52.000Z</published>
    <updated>2019-02-12T03:54:12.951Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>react-hooks</code>使用必须把<code>react</code>/<code>react-dom</code>的版本更新到<code>16.7.0-alpha.2</code><br>如果<code>node</code>版本过低的话建议更新一下，windows 可以使用<a href="https://github.com/tiakia/nvmw-china" target="_blank" rel="noopener">nvmw</a>来管理<code>node</code>版本<br><code>react-hooks</code>的出现是为了解决在无状态的组件中（函数类组件）使用<code>state</code>和生命周期，在<code>class</code>组件中不能使用</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react@16.7.0-alpha.2 react-dom@16.7.0-alpha.2 --save</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react@16.7.0-alpha.2 react-dom@16.7.0-alpha.2</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="state-hook"><a href="#state-hook" class="headerlink" title="state hook"></a>state hook</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><code>useState</code>就是一个 Hooks,他返回一个数组，第一个是<code>state</code>的名字<code>count</code>，第二个是设置<code>count state</code>的方法，<code>useState</code>的参数就是初始的<code>state</code>，换成 class 类型的组件就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>在一个<code>function</code>组件中可以使用多个<code>useState</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Declare multiple state variables!</span></span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">"banana"</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">"Learn Hooks"</span> &#125;]);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="effect-hook"><a href="#effect-hook" class="headerlink" title="effect hook"></a>effect hook</h4><p>Effect Hook 用来处理一些带有副作用的操作，例如，变更 DOM，请求数据，因为它们会影响其他组件，并且在渲染中无法进行。<code>useEffect hook</code> 类似于类组件中 <code>componentDidMount</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code> 的统一。<br><code>useEffect</code>的带有副作用的操作通常会在渲染之后进行，包括第一次渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [width, setWidth] = useState(<span class="built_in">window</span>.innerWith);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleResize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setWidth(<span class="built_in">window</span>.innerWith);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, handleResize);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt; <span class="built_in">window</span> width is &#123;width&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useEffect</code>可以传入第二个操作来避免性能的损耗，如果第二个参数数组中的成员变量没有变化则会跳过此次改变。如果传入一个空数组 ，那么该 effect 只会在组件 mount 和 unmount 时期执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [width, setWidth] = useState(<span class="built_in">window</span>.innerWith);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleResize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setWidth(<span class="built_in">window</span>.innerWith);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, handleResize);</span><br><span class="line">  &#125;, [width]); <span class="comment">//width 没有变化则不处理</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt; <span class="built_in">window</span> width is &#123;width&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useEffect</code>可以通过返回一个函数来进行清理操作，这些操作会在组件<code>unmounts</code>时运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [width, setWidth] = useState(<span class="built_in">window</span>.innerWith);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleResize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setWidth(<span class="built_in">window</span>.innerWith);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, handleResize);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">window</span>.removeEventListener(<span class="string">"resize"</span>); <span class="comment">//取消监听窗口宽度变化</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt; <span class="built_in">window</span> width is &#123;width&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;react-hooks&lt;/code&gt;使用必须把&lt;code&gt;react&lt;/code&gt;/&lt;code&gt;react-dom&lt;/code&gt;的版本更新到&lt;code&gt;16.7.0-alpha.2&lt;/code&gt;&lt;br&gt;如果&lt;code&gt;node&lt;/code&gt;版本过低的话建议更新一下，windows 可以使用&lt;a href=&quot;https://github.com/tiakia/nvmw-china&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nvmw&lt;/a&gt;来管理&lt;code&gt;node&lt;/code&gt;版本&lt;br&gt;&lt;code&gt;react-hooks&lt;/code&gt;的出现是为了解决在无状态的组件中（函数类组件）使用&lt;code&gt;state&lt;/code&gt;和生命周期，在&lt;code&gt;class&lt;/code&gt;组件中不能使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>金额的表达正则</title>
    <link href="http://www.tiankai.party/posts/32506/"/>
    <id>http://www.tiankai.party/posts/32506/</id>
    <published>2018-12-25T06:12:00.000Z</published>
    <updated>2019-05-22T07:02:12.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个真的是有点意思，这里记录一下，大体的意思就是给你一串数字，然后你用三个一逗号的形式把数字表达出来，比如： <code>50153855514.7667</code> 表达出来就是 <code>50,153,855,514.7667</code></p><a id="more"></a><p>第一想法都是使用正则来匹配，我以为使用一个正则就能出来了，后来发现想的太简单了，头疼了好一会，又是正向肯定匹配又是反向否定匹配的弄了半天，后来想了个法子，从小数点分割开，然后再用俩次正则来达到效果。</p><figure class="highlight javascript"><figcaption><span>formateMoney.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formateMoney</span>(<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (money &amp;&amp; money &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> moneyFormate = (money + <span class="string">""</span>).split(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      moneyFormate[<span class="number">0</span>].replace(<span class="regexp">/(\d&#123;3&#125;)+$/gi</span>, (match, $<span class="number">1</span>, $<span class="number">2</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> result = match.replace(<span class="regexp">/(\d&#123;3&#125;)/gi</span>, (_match, _$<span class="number">1</span>) =&gt; <span class="string">","</span> + _$<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> $<span class="number">2</span> !== <span class="number">0</span></span><br><span class="line">          ? result</span><br><span class="line">          : result.replace(<span class="regexp">/,([,|\d]+)/gi</span>, (__match, $<span class="number">11</span>) =&gt; $<span class="number">11</span>);</span><br><span class="line">      &#125;) +</span><br><span class="line">      (moneyFormate[<span class="number">1</span>]</span><br><span class="line">      ? <span class="string">"."</span> + moneyFormate[<span class="number">1</span>]</span><br><span class="line">      : <span class="string">''</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> money;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> money1 = <span class="number">12942222.22</span>;</span><br><span class="line"><span class="built_in">console</span>.log(formateMoney(money1)); <span class="comment">//12,942,222.22</span></span><br><span class="line"><span class="keyword">let</span> money2 = <span class="number">914874.2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(formateMoney(money2)); <span class="comment">//914,874.20</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个真的是有点意思，这里记录一下，大体的意思就是给你一串数字，然后你用三个一逗号的形式把数字表达出来，比如： &lt;code&gt;50153855514.7667&lt;/code&gt; 表达出来就是 &lt;code&gt;50,153,855,514.7667&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.tiankai.party/categories/javascript/"/>
    
    
      <category term="正则" scheme="http://www.tiankai.party/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>react路由控制权限</title>
    <link href="http://www.tiankai.party/posts/45622/"/>
    <id>http://www.tiankai.party/posts/45622/</id>
    <published>2018-12-25T06:09:00.000Z</published>
    <updated>2019-01-04T02:33:09.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>react 中可以通过路由来控制用户权限访问，主要使用的 <code>react-router</code> 的 <code>switch</code> 这里有个实用的例子</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RouterConfig</span>(<span class="params">&#123; history &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router history=&#123;history&#125; basename=&#123;config.basename&#125;&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &#123;<span class="comment">/* onEnter=&#123;authenticated(history)&#125; */</span>&#125;</span><br><span class="line">        &#123;<span class="comment">/*-----------------------------*/</span>&#125;</span><br><span class="line">        &#123;<span class="comment">/*renderRoutes(RouteConfig)*/</span>&#125;</span><br><span class="line">        &#123;<span class="comment">/*-----------------------------*/</span>&#125;</span><br><span class="line">        &lt;Route path=<span class="string">"/login"</span> exact component=&#123;Login&#125; /&gt;</span><br><span class="line">        &lt;Authorized</span><br><span class="line">          component=&#123;Routes&#125;</span><br><span class="line">          path=<span class="string">"/"</span></span><br><span class="line">          noMatch=<span class="string">"/login"</span></span><br><span class="line">          history=&#123;history&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样用户在刚进入的时候，如果访问的不是<code>/login</code>那么会进入<code>/</code>对应的 <code>Authorized</code>组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Authorized = <span class="function">(<span class="params">&#123; component: Component, history, noMatch, ...rest &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Route</span><br><span class="line">    &#123;...rest&#125;</span><br><span class="line">    render=&#123;props =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> token = authenticated(history); <span class="comment">//获取 token</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"-----------"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(token);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"-----authorized------"</span>);</span><br><span class="line">      <span class="keyword">return</span> token ? &lt;Component &#123;...props&#125; /&gt; : &lt;Redirect to=&#123;noMatch&#125; /&gt;;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在<code>Authorized</code>组件中，获取<code>token</code>,如果<code>token</code>存在那么就渲染对应的组件，如果<code>token</code>不存在就重定向到<code>/login</code>路径,<code>Authorized</code>组件渲染的 <code>Component</code>是所有的路由集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Routes = <span class="function">(<span class="params">&#123; history &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Layout</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span>&gt;</span>&#123;renderRoutes(RouteConfig)&#125;<span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里使用的<code>react-router-config</code>的库提供的<code>renderRoutes</code>函数，其中的<code>RouteConfig</code>是配置的所有的静态路由<br>大体的思路就是这样，在用户开始访问的时候就控制，如果<code>token</code>(这里也可以是其他的判断条件)存在，继续访问，如果不存在就让他访问另一个路由<br>前端权限控制比较简单，权限更多的还是前后端一起来控制，比较保险</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react 中可以通过路由来控制用户权限访问，主要使用的 &lt;code&gt;react-router&lt;/code&gt; 的 &lt;code&gt;switch&lt;/code&gt; 这里有个实用的例子&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://www.tiankai.party/categories/react/"/>
    
    
      <category term="react" scheme="http://www.tiankai.party/tags/react/"/>
    
      <category term="react-router" scheme="http://www.tiankai.party/tags/react-router/"/>
    
  </entry>
  
</feed>
